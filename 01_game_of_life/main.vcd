$date
	Mon Oct 11 20:55:35 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module test_main $end
$scope module UUT $end
$var wire 2 ! buttons [1:0] $end
$var wire 1 " clk $end
$var wire 8 # rows [7:0] $end
$var wire 8 $ cols [7:0] $end
$var wire 100 % bordered_cells_q [99:0] $end
$var wire 100 & bordered_cells_d [99:0] $end
$var reg 100 ' bordered_cells_0 [99:0] $end
$var reg 64 ( cells_0 [63:0] $end
$var reg 64 ) cells_q [63:0] $end
$var reg 2 * display_counter [1:0] $end
$var reg 2 + game_counter [1:0] $end
$var reg 2 , leds [1:0] $end
$var reg 3 - rgb [2:0] $end
$var reg 1 . rst $end
$var reg 1 / rst_game $end
$var reg 1 0 step_game $end
$var reg 4 1 x [3:0] $end
$scope function cell_index $end
$var integer 32 2 i [31:0] $end
$var integer 32 3 j [31:0] $end
$upscope $end
$scope begin cells_x[0] $end
$scope begin cells_y[0] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[1] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[2] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[3] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[4] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[5] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[6] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[7] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[8] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[9] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_x[1] $end
$scope begin cells_y[0] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[1] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 4 neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 5 state_0 $end
$var wire 6 6 two_bit_sums [5:0] $end
$var wire 8 7 one_bit_sums [7:0] $end
$var wire 4 8 living_neighbors [3:0] $end
$var reg 1 9 continue_alive $end
$var reg 1 : enabled_output $end
$var reg 1 ; is_3 $end
$var reg 1 < reset_output $end
$var reg 1 = state_d $end
$var reg 1 > state_q $end
$scope module adder_1_1 $end
$var wire 1 ? a $end
$var wire 1 @ b $end
$var wire 1 A c_in $end
$var reg 1 B c_out $end
$var reg 1 C g $end
$var reg 1 D p $end
$var reg 1 E sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 F a $end
$var wire 1 G b $end
$var wire 1 H c_in $end
$var reg 1 I c_out $end
$var reg 1 J g $end
$var reg 1 K p $end
$var reg 1 L sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 M a $end
$var wire 1 N b $end
$var wire 1 O c_in $end
$var reg 1 P c_out $end
$var reg 1 Q g $end
$var reg 1 R p $end
$var reg 1 S sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 T a $end
$var wire 1 U b $end
$var wire 1 V c_in $end
$var reg 1 W c_out $end
$var reg 1 X g $end
$var reg 1 Y p $end
$var reg 1 Z sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 [ a [1:0] $end
$var wire 2 \ b [1:0] $end
$var wire 1 ] c_in $end
$var wire 2 ^ sum [1:0] $end
$var wire 3 _ carries [2:0] $end
$var wire 1 ` c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 a a $end
$var wire 1 b b $end
$var wire 1 c c_in $end
$var reg 1 d c_out $end
$var reg 1 e g $end
$var reg 1 f p $end
$var reg 1 g sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 h a $end
$var wire 1 i b $end
$var wire 1 j c_in $end
$var reg 1 k c_out $end
$var reg 1 l g $end
$var reg 1 m p $end
$var reg 1 n sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 o a [1:0] $end
$var wire 2 p b [1:0] $end
$var wire 1 q c_in $end
$var wire 2 r sum [1:0] $end
$var wire 3 s carries [2:0] $end
$var wire 1 t c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 u a $end
$var wire 1 v b $end
$var wire 1 w c_in $end
$var reg 1 x c_out $end
$var reg 1 y g $end
$var reg 1 z p $end
$var reg 1 { sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 | a $end
$var wire 1 } b $end
$var wire 1 ~ c_in $end
$var reg 1 !" c_out $end
$var reg 1 "" g $end
$var reg 1 #" p $end
$var reg 1 $" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 %" a [2:0] $end
$var wire 3 &" b [2:0] $end
$var wire 1 '" c_in $end
$var wire 3 (" sum [2:0] $end
$var wire 4 )" carries [3:0] $end
$var wire 1 *" c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 +" a $end
$var wire 1 ," b $end
$var wire 1 -" c_in $end
$var reg 1 ." c_out $end
$var reg 1 /" g $end
$var reg 1 0" p $end
$var reg 1 1" sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 2" a $end
$var wire 1 3" b $end
$var wire 1 4" c_in $end
$var reg 1 5" c_out $end
$var reg 1 6" g $end
$var reg 1 7" p $end
$var reg 1 8" sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 9" a $end
$var wire 1 :" b $end
$var wire 1 ;" c_in $end
$var reg 1 <" c_out $end
$var reg 1 =" g $end
$var reg 1 >" p $end
$var reg 1 ?" sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[2] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 @" neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 A" state_0 $end
$var wire 6 B" two_bit_sums [5:0] $end
$var wire 8 C" one_bit_sums [7:0] $end
$var wire 4 D" living_neighbors [3:0] $end
$var reg 1 E" continue_alive $end
$var reg 1 F" enabled_output $end
$var reg 1 G" is_3 $end
$var reg 1 H" reset_output $end
$var reg 1 I" state_d $end
$var reg 1 J" state_q $end
$scope module adder_1_1 $end
$var wire 1 K" a $end
$var wire 1 L" b $end
$var wire 1 M" c_in $end
$var reg 1 N" c_out $end
$var reg 1 O" g $end
$var reg 1 P" p $end
$var reg 1 Q" sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 R" a $end
$var wire 1 S" b $end
$var wire 1 T" c_in $end
$var reg 1 U" c_out $end
$var reg 1 V" g $end
$var reg 1 W" p $end
$var reg 1 X" sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 Y" a $end
$var wire 1 Z" b $end
$var wire 1 [" c_in $end
$var reg 1 \" c_out $end
$var reg 1 ]" g $end
$var reg 1 ^" p $end
$var reg 1 _" sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 `" a $end
$var wire 1 a" b $end
$var wire 1 b" c_in $end
$var reg 1 c" c_out $end
$var reg 1 d" g $end
$var reg 1 e" p $end
$var reg 1 f" sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 g" a [1:0] $end
$var wire 2 h" b [1:0] $end
$var wire 1 i" c_in $end
$var wire 2 j" sum [1:0] $end
$var wire 3 k" carries [2:0] $end
$var wire 1 l" c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 m" a $end
$var wire 1 n" b $end
$var wire 1 o" c_in $end
$var reg 1 p" c_out $end
$var reg 1 q" g $end
$var reg 1 r" p $end
$var reg 1 s" sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 t" a $end
$var wire 1 u" b $end
$var wire 1 v" c_in $end
$var reg 1 w" c_out $end
$var reg 1 x" g $end
$var reg 1 y" p $end
$var reg 1 z" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 {" a [1:0] $end
$var wire 2 |" b [1:0] $end
$var wire 1 }" c_in $end
$var wire 2 ~" sum [1:0] $end
$var wire 3 !# carries [2:0] $end
$var wire 1 "# c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 ## a $end
$var wire 1 $# b $end
$var wire 1 %# c_in $end
$var reg 1 &# c_out $end
$var reg 1 '# g $end
$var reg 1 (# p $end
$var reg 1 )# sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 *# a $end
$var wire 1 +# b $end
$var wire 1 ,# c_in $end
$var reg 1 -# c_out $end
$var reg 1 .# g $end
$var reg 1 /# p $end
$var reg 1 0# sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 1# a [2:0] $end
$var wire 3 2# b [2:0] $end
$var wire 1 3# c_in $end
$var wire 3 4# sum [2:0] $end
$var wire 4 5# carries [3:0] $end
$var wire 1 6# c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 7# a $end
$var wire 1 8# b $end
$var wire 1 9# c_in $end
$var reg 1 :# c_out $end
$var reg 1 ;# g $end
$var reg 1 <# p $end
$var reg 1 =# sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 ># a $end
$var wire 1 ?# b $end
$var wire 1 @# c_in $end
$var reg 1 A# c_out $end
$var reg 1 B# g $end
$var reg 1 C# p $end
$var reg 1 D# sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 E# a $end
$var wire 1 F# b $end
$var wire 1 G# c_in $end
$var reg 1 H# c_out $end
$var reg 1 I# g $end
$var reg 1 J# p $end
$var reg 1 K# sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[3] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 L# neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 M# state_0 $end
$var wire 6 N# two_bit_sums [5:0] $end
$var wire 8 O# one_bit_sums [7:0] $end
$var wire 4 P# living_neighbors [3:0] $end
$var reg 1 Q# continue_alive $end
$var reg 1 R# enabled_output $end
$var reg 1 S# is_3 $end
$var reg 1 T# reset_output $end
$var reg 1 U# state_d $end
$var reg 1 V# state_q $end
$scope module adder_1_1 $end
$var wire 1 W# a $end
$var wire 1 X# b $end
$var wire 1 Y# c_in $end
$var reg 1 Z# c_out $end
$var reg 1 [# g $end
$var reg 1 \# p $end
$var reg 1 ]# sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 ^# a $end
$var wire 1 _# b $end
$var wire 1 `# c_in $end
$var reg 1 a# c_out $end
$var reg 1 b# g $end
$var reg 1 c# p $end
$var reg 1 d# sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 e# a $end
$var wire 1 f# b $end
$var wire 1 g# c_in $end
$var reg 1 h# c_out $end
$var reg 1 i# g $end
$var reg 1 j# p $end
$var reg 1 k# sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 l# a $end
$var wire 1 m# b $end
$var wire 1 n# c_in $end
$var reg 1 o# c_out $end
$var reg 1 p# g $end
$var reg 1 q# p $end
$var reg 1 r# sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 s# a [1:0] $end
$var wire 2 t# b [1:0] $end
$var wire 1 u# c_in $end
$var wire 2 v# sum [1:0] $end
$var wire 3 w# carries [2:0] $end
$var wire 1 x# c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 y# a $end
$var wire 1 z# b $end
$var wire 1 {# c_in $end
$var reg 1 |# c_out $end
$var reg 1 }# g $end
$var reg 1 ~# p $end
$var reg 1 !$ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 "$ a $end
$var wire 1 #$ b $end
$var wire 1 $$ c_in $end
$var reg 1 %$ c_out $end
$var reg 1 &$ g $end
$var reg 1 '$ p $end
$var reg 1 ($ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 )$ a [1:0] $end
$var wire 2 *$ b [1:0] $end
$var wire 1 +$ c_in $end
$var wire 2 ,$ sum [1:0] $end
$var wire 3 -$ carries [2:0] $end
$var wire 1 .$ c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 /$ a $end
$var wire 1 0$ b $end
$var wire 1 1$ c_in $end
$var reg 1 2$ c_out $end
$var reg 1 3$ g $end
$var reg 1 4$ p $end
$var reg 1 5$ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 6$ a $end
$var wire 1 7$ b $end
$var wire 1 8$ c_in $end
$var reg 1 9$ c_out $end
$var reg 1 :$ g $end
$var reg 1 ;$ p $end
$var reg 1 <$ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 =$ a [2:0] $end
$var wire 3 >$ b [2:0] $end
$var wire 1 ?$ c_in $end
$var wire 3 @$ sum [2:0] $end
$var wire 4 A$ carries [3:0] $end
$var wire 1 B$ c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 C$ a $end
$var wire 1 D$ b $end
$var wire 1 E$ c_in $end
$var reg 1 F$ c_out $end
$var reg 1 G$ g $end
$var reg 1 H$ p $end
$var reg 1 I$ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 J$ a $end
$var wire 1 K$ b $end
$var wire 1 L$ c_in $end
$var reg 1 M$ c_out $end
$var reg 1 N$ g $end
$var reg 1 O$ p $end
$var reg 1 P$ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 Q$ a $end
$var wire 1 R$ b $end
$var wire 1 S$ c_in $end
$var reg 1 T$ c_out $end
$var reg 1 U$ g $end
$var reg 1 V$ p $end
$var reg 1 W$ sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[4] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 X$ neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 Y$ state_0 $end
$var wire 6 Z$ two_bit_sums [5:0] $end
$var wire 8 [$ one_bit_sums [7:0] $end
$var wire 4 \$ living_neighbors [3:0] $end
$var reg 1 ]$ continue_alive $end
$var reg 1 ^$ enabled_output $end
$var reg 1 _$ is_3 $end
$var reg 1 `$ reset_output $end
$var reg 1 a$ state_d $end
$var reg 1 b$ state_q $end
$scope module adder_1_1 $end
$var wire 1 c$ a $end
$var wire 1 d$ b $end
$var wire 1 e$ c_in $end
$var reg 1 f$ c_out $end
$var reg 1 g$ g $end
$var reg 1 h$ p $end
$var reg 1 i$ sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 j$ a $end
$var wire 1 k$ b $end
$var wire 1 l$ c_in $end
$var reg 1 m$ c_out $end
$var reg 1 n$ g $end
$var reg 1 o$ p $end
$var reg 1 p$ sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 q$ a $end
$var wire 1 r$ b $end
$var wire 1 s$ c_in $end
$var reg 1 t$ c_out $end
$var reg 1 u$ g $end
$var reg 1 v$ p $end
$var reg 1 w$ sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 x$ a $end
$var wire 1 y$ b $end
$var wire 1 z$ c_in $end
$var reg 1 {$ c_out $end
$var reg 1 |$ g $end
$var reg 1 }$ p $end
$var reg 1 ~$ sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 !% a [1:0] $end
$var wire 2 "% b [1:0] $end
$var wire 1 #% c_in $end
$var wire 2 $% sum [1:0] $end
$var wire 3 %% carries [2:0] $end
$var wire 1 &% c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 '% a $end
$var wire 1 (% b $end
$var wire 1 )% c_in $end
$var reg 1 *% c_out $end
$var reg 1 +% g $end
$var reg 1 ,% p $end
$var reg 1 -% sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 .% a $end
$var wire 1 /% b $end
$var wire 1 0% c_in $end
$var reg 1 1% c_out $end
$var reg 1 2% g $end
$var reg 1 3% p $end
$var reg 1 4% sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 5% a [1:0] $end
$var wire 2 6% b [1:0] $end
$var wire 1 7% c_in $end
$var wire 2 8% sum [1:0] $end
$var wire 3 9% carries [2:0] $end
$var wire 1 :% c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 ;% a $end
$var wire 1 <% b $end
$var wire 1 =% c_in $end
$var reg 1 >% c_out $end
$var reg 1 ?% g $end
$var reg 1 @% p $end
$var reg 1 A% sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 B% a $end
$var wire 1 C% b $end
$var wire 1 D% c_in $end
$var reg 1 E% c_out $end
$var reg 1 F% g $end
$var reg 1 G% p $end
$var reg 1 H% sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 I% a [2:0] $end
$var wire 3 J% b [2:0] $end
$var wire 1 K% c_in $end
$var wire 3 L% sum [2:0] $end
$var wire 4 M% carries [3:0] $end
$var wire 1 N% c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 O% a $end
$var wire 1 P% b $end
$var wire 1 Q% c_in $end
$var reg 1 R% c_out $end
$var reg 1 S% g $end
$var reg 1 T% p $end
$var reg 1 U% sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 V% a $end
$var wire 1 W% b $end
$var wire 1 X% c_in $end
$var reg 1 Y% c_out $end
$var reg 1 Z% g $end
$var reg 1 [% p $end
$var reg 1 \% sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 ]% a $end
$var wire 1 ^% b $end
$var wire 1 _% c_in $end
$var reg 1 `% c_out $end
$var reg 1 a% g $end
$var reg 1 b% p $end
$var reg 1 c% sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[5] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 d% neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 e% state_0 $end
$var wire 6 f% two_bit_sums [5:0] $end
$var wire 8 g% one_bit_sums [7:0] $end
$var wire 4 h% living_neighbors [3:0] $end
$var reg 1 i% continue_alive $end
$var reg 1 j% enabled_output $end
$var reg 1 k% is_3 $end
$var reg 1 l% reset_output $end
$var reg 1 m% state_d $end
$var reg 1 n% state_q $end
$scope module adder_1_1 $end
$var wire 1 o% a $end
$var wire 1 p% b $end
$var wire 1 q% c_in $end
$var reg 1 r% c_out $end
$var reg 1 s% g $end
$var reg 1 t% p $end
$var reg 1 u% sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 v% a $end
$var wire 1 w% b $end
$var wire 1 x% c_in $end
$var reg 1 y% c_out $end
$var reg 1 z% g $end
$var reg 1 {% p $end
$var reg 1 |% sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 }% a $end
$var wire 1 ~% b $end
$var wire 1 !& c_in $end
$var reg 1 "& c_out $end
$var reg 1 #& g $end
$var reg 1 $& p $end
$var reg 1 %& sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 && a $end
$var wire 1 '& b $end
$var wire 1 (& c_in $end
$var reg 1 )& c_out $end
$var reg 1 *& g $end
$var reg 1 +& p $end
$var reg 1 ,& sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 -& a [1:0] $end
$var wire 2 .& b [1:0] $end
$var wire 1 /& c_in $end
$var wire 2 0& sum [1:0] $end
$var wire 3 1& carries [2:0] $end
$var wire 1 2& c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 3& a $end
$var wire 1 4& b $end
$var wire 1 5& c_in $end
$var reg 1 6& c_out $end
$var reg 1 7& g $end
$var reg 1 8& p $end
$var reg 1 9& sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 :& a $end
$var wire 1 ;& b $end
$var wire 1 <& c_in $end
$var reg 1 =& c_out $end
$var reg 1 >& g $end
$var reg 1 ?& p $end
$var reg 1 @& sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 A& a [1:0] $end
$var wire 2 B& b [1:0] $end
$var wire 1 C& c_in $end
$var wire 2 D& sum [1:0] $end
$var wire 3 E& carries [2:0] $end
$var wire 1 F& c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 G& a $end
$var wire 1 H& b $end
$var wire 1 I& c_in $end
$var reg 1 J& c_out $end
$var reg 1 K& g $end
$var reg 1 L& p $end
$var reg 1 M& sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 N& a $end
$var wire 1 O& b $end
$var wire 1 P& c_in $end
$var reg 1 Q& c_out $end
$var reg 1 R& g $end
$var reg 1 S& p $end
$var reg 1 T& sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 U& a [2:0] $end
$var wire 3 V& b [2:0] $end
$var wire 1 W& c_in $end
$var wire 3 X& sum [2:0] $end
$var wire 4 Y& carries [3:0] $end
$var wire 1 Z& c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 [& a $end
$var wire 1 \& b $end
$var wire 1 ]& c_in $end
$var reg 1 ^& c_out $end
$var reg 1 _& g $end
$var reg 1 `& p $end
$var reg 1 a& sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 b& a $end
$var wire 1 c& b $end
$var wire 1 d& c_in $end
$var reg 1 e& c_out $end
$var reg 1 f& g $end
$var reg 1 g& p $end
$var reg 1 h& sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 i& a $end
$var wire 1 j& b $end
$var wire 1 k& c_in $end
$var reg 1 l& c_out $end
$var reg 1 m& g $end
$var reg 1 n& p $end
$var reg 1 o& sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[6] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 p& neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 q& state_0 $end
$var wire 6 r& two_bit_sums [5:0] $end
$var wire 8 s& one_bit_sums [7:0] $end
$var wire 4 t& living_neighbors [3:0] $end
$var reg 1 u& continue_alive $end
$var reg 1 v& enabled_output $end
$var reg 1 w& is_3 $end
$var reg 1 x& reset_output $end
$var reg 1 y& state_d $end
$var reg 1 z& state_q $end
$scope module adder_1_1 $end
$var wire 1 {& a $end
$var wire 1 |& b $end
$var wire 1 }& c_in $end
$var reg 1 ~& c_out $end
$var reg 1 !' g $end
$var reg 1 "' p $end
$var reg 1 #' sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 $' a $end
$var wire 1 %' b $end
$var wire 1 &' c_in $end
$var reg 1 '' c_out $end
$var reg 1 (' g $end
$var reg 1 )' p $end
$var reg 1 *' sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 +' a $end
$var wire 1 ,' b $end
$var wire 1 -' c_in $end
$var reg 1 .' c_out $end
$var reg 1 /' g $end
$var reg 1 0' p $end
$var reg 1 1' sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 2' a $end
$var wire 1 3' b $end
$var wire 1 4' c_in $end
$var reg 1 5' c_out $end
$var reg 1 6' g $end
$var reg 1 7' p $end
$var reg 1 8' sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 9' a [1:0] $end
$var wire 2 :' b [1:0] $end
$var wire 1 ;' c_in $end
$var wire 2 <' sum [1:0] $end
$var wire 3 =' carries [2:0] $end
$var wire 1 >' c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 ?' a $end
$var wire 1 @' b $end
$var wire 1 A' c_in $end
$var reg 1 B' c_out $end
$var reg 1 C' g $end
$var reg 1 D' p $end
$var reg 1 E' sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 F' a $end
$var wire 1 G' b $end
$var wire 1 H' c_in $end
$var reg 1 I' c_out $end
$var reg 1 J' g $end
$var reg 1 K' p $end
$var reg 1 L' sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 M' a [1:0] $end
$var wire 2 N' b [1:0] $end
$var wire 1 O' c_in $end
$var wire 2 P' sum [1:0] $end
$var wire 3 Q' carries [2:0] $end
$var wire 1 R' c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 S' a $end
$var wire 1 T' b $end
$var wire 1 U' c_in $end
$var reg 1 V' c_out $end
$var reg 1 W' g $end
$var reg 1 X' p $end
$var reg 1 Y' sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 Z' a $end
$var wire 1 [' b $end
$var wire 1 \' c_in $end
$var reg 1 ]' c_out $end
$var reg 1 ^' g $end
$var reg 1 _' p $end
$var reg 1 `' sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 a' a [2:0] $end
$var wire 3 b' b [2:0] $end
$var wire 1 c' c_in $end
$var wire 3 d' sum [2:0] $end
$var wire 4 e' carries [3:0] $end
$var wire 1 f' c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 g' a $end
$var wire 1 h' b $end
$var wire 1 i' c_in $end
$var reg 1 j' c_out $end
$var reg 1 k' g $end
$var reg 1 l' p $end
$var reg 1 m' sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 n' a $end
$var wire 1 o' b $end
$var wire 1 p' c_in $end
$var reg 1 q' c_out $end
$var reg 1 r' g $end
$var reg 1 s' p $end
$var reg 1 t' sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 u' a $end
$var wire 1 v' b $end
$var wire 1 w' c_in $end
$var reg 1 x' c_out $end
$var reg 1 y' g $end
$var reg 1 z' p $end
$var reg 1 {' sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[7] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 |' neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 }' state_0 $end
$var wire 6 ~' two_bit_sums [5:0] $end
$var wire 8 !( one_bit_sums [7:0] $end
$var wire 4 "( living_neighbors [3:0] $end
$var reg 1 #( continue_alive $end
$var reg 1 $( enabled_output $end
$var reg 1 %( is_3 $end
$var reg 1 &( reset_output $end
$var reg 1 '( state_d $end
$var reg 1 (( state_q $end
$scope module adder_1_1 $end
$var wire 1 )( a $end
$var wire 1 *( b $end
$var wire 1 +( c_in $end
$var reg 1 ,( c_out $end
$var reg 1 -( g $end
$var reg 1 .( p $end
$var reg 1 /( sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 0( a $end
$var wire 1 1( b $end
$var wire 1 2( c_in $end
$var reg 1 3( c_out $end
$var reg 1 4( g $end
$var reg 1 5( p $end
$var reg 1 6( sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 7( a $end
$var wire 1 8( b $end
$var wire 1 9( c_in $end
$var reg 1 :( c_out $end
$var reg 1 ;( g $end
$var reg 1 <( p $end
$var reg 1 =( sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 >( a $end
$var wire 1 ?( b $end
$var wire 1 @( c_in $end
$var reg 1 A( c_out $end
$var reg 1 B( g $end
$var reg 1 C( p $end
$var reg 1 D( sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 E( a [1:0] $end
$var wire 2 F( b [1:0] $end
$var wire 1 G( c_in $end
$var wire 2 H( sum [1:0] $end
$var wire 3 I( carries [2:0] $end
$var wire 1 J( c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 K( a $end
$var wire 1 L( b $end
$var wire 1 M( c_in $end
$var reg 1 N( c_out $end
$var reg 1 O( g $end
$var reg 1 P( p $end
$var reg 1 Q( sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 R( a $end
$var wire 1 S( b $end
$var wire 1 T( c_in $end
$var reg 1 U( c_out $end
$var reg 1 V( g $end
$var reg 1 W( p $end
$var reg 1 X( sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 Y( a [1:0] $end
$var wire 2 Z( b [1:0] $end
$var wire 1 [( c_in $end
$var wire 2 \( sum [1:0] $end
$var wire 3 ]( carries [2:0] $end
$var wire 1 ^( c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 _( a $end
$var wire 1 `( b $end
$var wire 1 a( c_in $end
$var reg 1 b( c_out $end
$var reg 1 c( g $end
$var reg 1 d( p $end
$var reg 1 e( sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 f( a $end
$var wire 1 g( b $end
$var wire 1 h( c_in $end
$var reg 1 i( c_out $end
$var reg 1 j( g $end
$var reg 1 k( p $end
$var reg 1 l( sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 m( a [2:0] $end
$var wire 3 n( b [2:0] $end
$var wire 1 o( c_in $end
$var wire 3 p( sum [2:0] $end
$var wire 4 q( carries [3:0] $end
$var wire 1 r( c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 s( a $end
$var wire 1 t( b $end
$var wire 1 u( c_in $end
$var reg 1 v( c_out $end
$var reg 1 w( g $end
$var reg 1 x( p $end
$var reg 1 y( sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 z( a $end
$var wire 1 {( b $end
$var wire 1 |( c_in $end
$var reg 1 }( c_out $end
$var reg 1 ~( g $end
$var reg 1 !) p $end
$var reg 1 ") sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 #) a $end
$var wire 1 $) b $end
$var wire 1 %) c_in $end
$var reg 1 &) c_out $end
$var reg 1 ') g $end
$var reg 1 () p $end
$var reg 1 )) sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[8] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 *) neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 +) state_0 $end
$var wire 6 ,) two_bit_sums [5:0] $end
$var wire 8 -) one_bit_sums [7:0] $end
$var wire 4 .) living_neighbors [3:0] $end
$var reg 1 /) continue_alive $end
$var reg 1 0) enabled_output $end
$var reg 1 1) is_3 $end
$var reg 1 2) reset_output $end
$var reg 1 3) state_d $end
$var reg 1 4) state_q $end
$scope module adder_1_1 $end
$var wire 1 5) a $end
$var wire 1 6) b $end
$var wire 1 7) c_in $end
$var reg 1 8) c_out $end
$var reg 1 9) g $end
$var reg 1 :) p $end
$var reg 1 ;) sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 <) a $end
$var wire 1 =) b $end
$var wire 1 >) c_in $end
$var reg 1 ?) c_out $end
$var reg 1 @) g $end
$var reg 1 A) p $end
$var reg 1 B) sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 C) a $end
$var wire 1 D) b $end
$var wire 1 E) c_in $end
$var reg 1 F) c_out $end
$var reg 1 G) g $end
$var reg 1 H) p $end
$var reg 1 I) sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 J) a $end
$var wire 1 K) b $end
$var wire 1 L) c_in $end
$var reg 1 M) c_out $end
$var reg 1 N) g $end
$var reg 1 O) p $end
$var reg 1 P) sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 Q) a [1:0] $end
$var wire 2 R) b [1:0] $end
$var wire 1 S) c_in $end
$var wire 2 T) sum [1:0] $end
$var wire 3 U) carries [2:0] $end
$var wire 1 V) c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 W) a $end
$var wire 1 X) b $end
$var wire 1 Y) c_in $end
$var reg 1 Z) c_out $end
$var reg 1 [) g $end
$var reg 1 \) p $end
$var reg 1 ]) sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 ^) a $end
$var wire 1 _) b $end
$var wire 1 `) c_in $end
$var reg 1 a) c_out $end
$var reg 1 b) g $end
$var reg 1 c) p $end
$var reg 1 d) sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 e) a [1:0] $end
$var wire 2 f) b [1:0] $end
$var wire 1 g) c_in $end
$var wire 2 h) sum [1:0] $end
$var wire 3 i) carries [2:0] $end
$var wire 1 j) c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 k) a $end
$var wire 1 l) b $end
$var wire 1 m) c_in $end
$var reg 1 n) c_out $end
$var reg 1 o) g $end
$var reg 1 p) p $end
$var reg 1 q) sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 r) a $end
$var wire 1 s) b $end
$var wire 1 t) c_in $end
$var reg 1 u) c_out $end
$var reg 1 v) g $end
$var reg 1 w) p $end
$var reg 1 x) sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 y) a [2:0] $end
$var wire 3 z) b [2:0] $end
$var wire 1 {) c_in $end
$var wire 3 |) sum [2:0] $end
$var wire 4 }) carries [3:0] $end
$var wire 1 ~) c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 !* a $end
$var wire 1 "* b $end
$var wire 1 #* c_in $end
$var reg 1 $* c_out $end
$var reg 1 %* g $end
$var reg 1 &* p $end
$var reg 1 '* sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 (* a $end
$var wire 1 )* b $end
$var wire 1 ** c_in $end
$var reg 1 +* c_out $end
$var reg 1 ,* g $end
$var reg 1 -* p $end
$var reg 1 .* sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 /* a $end
$var wire 1 0* b $end
$var wire 1 1* c_in $end
$var reg 1 2* c_out $end
$var reg 1 3* g $end
$var reg 1 4* p $end
$var reg 1 5* sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[9] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_x[2] $end
$scope begin cells_y[0] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[1] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 6* neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 7* state_0 $end
$var wire 6 8* two_bit_sums [5:0] $end
$var wire 8 9* one_bit_sums [7:0] $end
$var wire 4 :* living_neighbors [3:0] $end
$var reg 1 ;* continue_alive $end
$var reg 1 <* enabled_output $end
$var reg 1 =* is_3 $end
$var reg 1 >* reset_output $end
$var reg 1 ?* state_d $end
$var reg 1 @* state_q $end
$scope module adder_1_1 $end
$var wire 1 A* a $end
$var wire 1 B* b $end
$var wire 1 C* c_in $end
$var reg 1 D* c_out $end
$var reg 1 E* g $end
$var reg 1 F* p $end
$var reg 1 G* sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 H* a $end
$var wire 1 I* b $end
$var wire 1 J* c_in $end
$var reg 1 K* c_out $end
$var reg 1 L* g $end
$var reg 1 M* p $end
$var reg 1 N* sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 O* a $end
$var wire 1 P* b $end
$var wire 1 Q* c_in $end
$var reg 1 R* c_out $end
$var reg 1 S* g $end
$var reg 1 T* p $end
$var reg 1 U* sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 V* a $end
$var wire 1 W* b $end
$var wire 1 X* c_in $end
$var reg 1 Y* c_out $end
$var reg 1 Z* g $end
$var reg 1 [* p $end
$var reg 1 \* sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 ]* a [1:0] $end
$var wire 2 ^* b [1:0] $end
$var wire 1 _* c_in $end
$var wire 2 `* sum [1:0] $end
$var wire 3 a* carries [2:0] $end
$var wire 1 b* c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 c* a $end
$var wire 1 d* b $end
$var wire 1 e* c_in $end
$var reg 1 f* c_out $end
$var reg 1 g* g $end
$var reg 1 h* p $end
$var reg 1 i* sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 j* a $end
$var wire 1 k* b $end
$var wire 1 l* c_in $end
$var reg 1 m* c_out $end
$var reg 1 n* g $end
$var reg 1 o* p $end
$var reg 1 p* sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 q* a [1:0] $end
$var wire 2 r* b [1:0] $end
$var wire 1 s* c_in $end
$var wire 2 t* sum [1:0] $end
$var wire 3 u* carries [2:0] $end
$var wire 1 v* c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 w* a $end
$var wire 1 x* b $end
$var wire 1 y* c_in $end
$var reg 1 z* c_out $end
$var reg 1 {* g $end
$var reg 1 |* p $end
$var reg 1 }* sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 ~* a $end
$var wire 1 !+ b $end
$var wire 1 "+ c_in $end
$var reg 1 #+ c_out $end
$var reg 1 $+ g $end
$var reg 1 %+ p $end
$var reg 1 &+ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 '+ a [2:0] $end
$var wire 3 (+ b [2:0] $end
$var wire 1 )+ c_in $end
$var wire 3 *+ sum [2:0] $end
$var wire 4 ++ carries [3:0] $end
$var wire 1 ,+ c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 -+ a $end
$var wire 1 .+ b $end
$var wire 1 /+ c_in $end
$var reg 1 0+ c_out $end
$var reg 1 1+ g $end
$var reg 1 2+ p $end
$var reg 1 3+ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 4+ a $end
$var wire 1 5+ b $end
$var wire 1 6+ c_in $end
$var reg 1 7+ c_out $end
$var reg 1 8+ g $end
$var reg 1 9+ p $end
$var reg 1 :+ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 ;+ a $end
$var wire 1 <+ b $end
$var wire 1 =+ c_in $end
$var reg 1 >+ c_out $end
$var reg 1 ?+ g $end
$var reg 1 @+ p $end
$var reg 1 A+ sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[2] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 B+ neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 C+ state_0 $end
$var wire 6 D+ two_bit_sums [5:0] $end
$var wire 8 E+ one_bit_sums [7:0] $end
$var wire 4 F+ living_neighbors [3:0] $end
$var reg 1 G+ continue_alive $end
$var reg 1 H+ enabled_output $end
$var reg 1 I+ is_3 $end
$var reg 1 J+ reset_output $end
$var reg 1 K+ state_d $end
$var reg 1 L+ state_q $end
$scope module adder_1_1 $end
$var wire 1 M+ a $end
$var wire 1 N+ b $end
$var wire 1 O+ c_in $end
$var reg 1 P+ c_out $end
$var reg 1 Q+ g $end
$var reg 1 R+ p $end
$var reg 1 S+ sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 T+ a $end
$var wire 1 U+ b $end
$var wire 1 V+ c_in $end
$var reg 1 W+ c_out $end
$var reg 1 X+ g $end
$var reg 1 Y+ p $end
$var reg 1 Z+ sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 [+ a $end
$var wire 1 \+ b $end
$var wire 1 ]+ c_in $end
$var reg 1 ^+ c_out $end
$var reg 1 _+ g $end
$var reg 1 `+ p $end
$var reg 1 a+ sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 b+ a $end
$var wire 1 c+ b $end
$var wire 1 d+ c_in $end
$var reg 1 e+ c_out $end
$var reg 1 f+ g $end
$var reg 1 g+ p $end
$var reg 1 h+ sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 i+ a [1:0] $end
$var wire 2 j+ b [1:0] $end
$var wire 1 k+ c_in $end
$var wire 2 l+ sum [1:0] $end
$var wire 3 m+ carries [2:0] $end
$var wire 1 n+ c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 o+ a $end
$var wire 1 p+ b $end
$var wire 1 q+ c_in $end
$var reg 1 r+ c_out $end
$var reg 1 s+ g $end
$var reg 1 t+ p $end
$var reg 1 u+ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 v+ a $end
$var wire 1 w+ b $end
$var wire 1 x+ c_in $end
$var reg 1 y+ c_out $end
$var reg 1 z+ g $end
$var reg 1 {+ p $end
$var reg 1 |+ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 }+ a [1:0] $end
$var wire 2 ~+ b [1:0] $end
$var wire 1 !, c_in $end
$var wire 2 ", sum [1:0] $end
$var wire 3 #, carries [2:0] $end
$var wire 1 $, c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 %, a $end
$var wire 1 &, b $end
$var wire 1 ', c_in $end
$var reg 1 (, c_out $end
$var reg 1 ), g $end
$var reg 1 *, p $end
$var reg 1 +, sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 ,, a $end
$var wire 1 -, b $end
$var wire 1 ., c_in $end
$var reg 1 /, c_out $end
$var reg 1 0, g $end
$var reg 1 1, p $end
$var reg 1 2, sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 3, a [2:0] $end
$var wire 3 4, b [2:0] $end
$var wire 1 5, c_in $end
$var wire 3 6, sum [2:0] $end
$var wire 4 7, carries [3:0] $end
$var wire 1 8, c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 9, a $end
$var wire 1 :, b $end
$var wire 1 ;, c_in $end
$var reg 1 <, c_out $end
$var reg 1 =, g $end
$var reg 1 >, p $end
$var reg 1 ?, sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 @, a $end
$var wire 1 A, b $end
$var wire 1 B, c_in $end
$var reg 1 C, c_out $end
$var reg 1 D, g $end
$var reg 1 E, p $end
$var reg 1 F, sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 G, a $end
$var wire 1 H, b $end
$var wire 1 I, c_in $end
$var reg 1 J, c_out $end
$var reg 1 K, g $end
$var reg 1 L, p $end
$var reg 1 M, sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[3] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 N, neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 O, state_0 $end
$var wire 6 P, two_bit_sums [5:0] $end
$var wire 8 Q, one_bit_sums [7:0] $end
$var wire 4 R, living_neighbors [3:0] $end
$var reg 1 S, continue_alive $end
$var reg 1 T, enabled_output $end
$var reg 1 U, is_3 $end
$var reg 1 V, reset_output $end
$var reg 1 W, state_d $end
$var reg 1 X, state_q $end
$scope module adder_1_1 $end
$var wire 1 Y, a $end
$var wire 1 Z, b $end
$var wire 1 [, c_in $end
$var reg 1 \, c_out $end
$var reg 1 ], g $end
$var reg 1 ^, p $end
$var reg 1 _, sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 `, a $end
$var wire 1 a, b $end
$var wire 1 b, c_in $end
$var reg 1 c, c_out $end
$var reg 1 d, g $end
$var reg 1 e, p $end
$var reg 1 f, sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 g, a $end
$var wire 1 h, b $end
$var wire 1 i, c_in $end
$var reg 1 j, c_out $end
$var reg 1 k, g $end
$var reg 1 l, p $end
$var reg 1 m, sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 n, a $end
$var wire 1 o, b $end
$var wire 1 p, c_in $end
$var reg 1 q, c_out $end
$var reg 1 r, g $end
$var reg 1 s, p $end
$var reg 1 t, sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 u, a [1:0] $end
$var wire 2 v, b [1:0] $end
$var wire 1 w, c_in $end
$var wire 2 x, sum [1:0] $end
$var wire 3 y, carries [2:0] $end
$var wire 1 z, c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 {, a $end
$var wire 1 |, b $end
$var wire 1 }, c_in $end
$var reg 1 ~, c_out $end
$var reg 1 !- g $end
$var reg 1 "- p $end
$var reg 1 #- sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 $- a $end
$var wire 1 %- b $end
$var wire 1 &- c_in $end
$var reg 1 '- c_out $end
$var reg 1 (- g $end
$var reg 1 )- p $end
$var reg 1 *- sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 +- a [1:0] $end
$var wire 2 ,- b [1:0] $end
$var wire 1 -- c_in $end
$var wire 2 .- sum [1:0] $end
$var wire 3 /- carries [2:0] $end
$var wire 1 0- c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 1- a $end
$var wire 1 2- b $end
$var wire 1 3- c_in $end
$var reg 1 4- c_out $end
$var reg 1 5- g $end
$var reg 1 6- p $end
$var reg 1 7- sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 8- a $end
$var wire 1 9- b $end
$var wire 1 :- c_in $end
$var reg 1 ;- c_out $end
$var reg 1 <- g $end
$var reg 1 =- p $end
$var reg 1 >- sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 ?- a [2:0] $end
$var wire 3 @- b [2:0] $end
$var wire 1 A- c_in $end
$var wire 3 B- sum [2:0] $end
$var wire 4 C- carries [3:0] $end
$var wire 1 D- c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 E- a $end
$var wire 1 F- b $end
$var wire 1 G- c_in $end
$var reg 1 H- c_out $end
$var reg 1 I- g $end
$var reg 1 J- p $end
$var reg 1 K- sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 L- a $end
$var wire 1 M- b $end
$var wire 1 N- c_in $end
$var reg 1 O- c_out $end
$var reg 1 P- g $end
$var reg 1 Q- p $end
$var reg 1 R- sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 S- a $end
$var wire 1 T- b $end
$var wire 1 U- c_in $end
$var reg 1 V- c_out $end
$var reg 1 W- g $end
$var reg 1 X- p $end
$var reg 1 Y- sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[4] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 Z- neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 [- state_0 $end
$var wire 6 \- two_bit_sums [5:0] $end
$var wire 8 ]- one_bit_sums [7:0] $end
$var wire 4 ^- living_neighbors [3:0] $end
$var reg 1 _- continue_alive $end
$var reg 1 `- enabled_output $end
$var reg 1 a- is_3 $end
$var reg 1 b- reset_output $end
$var reg 1 c- state_d $end
$var reg 1 d- state_q $end
$scope module adder_1_1 $end
$var wire 1 e- a $end
$var wire 1 f- b $end
$var wire 1 g- c_in $end
$var reg 1 h- c_out $end
$var reg 1 i- g $end
$var reg 1 j- p $end
$var reg 1 k- sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 l- a $end
$var wire 1 m- b $end
$var wire 1 n- c_in $end
$var reg 1 o- c_out $end
$var reg 1 p- g $end
$var reg 1 q- p $end
$var reg 1 r- sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 s- a $end
$var wire 1 t- b $end
$var wire 1 u- c_in $end
$var reg 1 v- c_out $end
$var reg 1 w- g $end
$var reg 1 x- p $end
$var reg 1 y- sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 z- a $end
$var wire 1 {- b $end
$var wire 1 |- c_in $end
$var reg 1 }- c_out $end
$var reg 1 ~- g $end
$var reg 1 !. p $end
$var reg 1 ". sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 #. a [1:0] $end
$var wire 2 $. b [1:0] $end
$var wire 1 %. c_in $end
$var wire 2 &. sum [1:0] $end
$var wire 3 '. carries [2:0] $end
$var wire 1 (. c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 ). a $end
$var wire 1 *. b $end
$var wire 1 +. c_in $end
$var reg 1 ,. c_out $end
$var reg 1 -. g $end
$var reg 1 .. p $end
$var reg 1 /. sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 0. a $end
$var wire 1 1. b $end
$var wire 1 2. c_in $end
$var reg 1 3. c_out $end
$var reg 1 4. g $end
$var reg 1 5. p $end
$var reg 1 6. sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 7. a [1:0] $end
$var wire 2 8. b [1:0] $end
$var wire 1 9. c_in $end
$var wire 2 :. sum [1:0] $end
$var wire 3 ;. carries [2:0] $end
$var wire 1 <. c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 =. a $end
$var wire 1 >. b $end
$var wire 1 ?. c_in $end
$var reg 1 @. c_out $end
$var reg 1 A. g $end
$var reg 1 B. p $end
$var reg 1 C. sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 D. a $end
$var wire 1 E. b $end
$var wire 1 F. c_in $end
$var reg 1 G. c_out $end
$var reg 1 H. g $end
$var reg 1 I. p $end
$var reg 1 J. sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 K. a [2:0] $end
$var wire 3 L. b [2:0] $end
$var wire 1 M. c_in $end
$var wire 3 N. sum [2:0] $end
$var wire 4 O. carries [3:0] $end
$var wire 1 P. c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 Q. a $end
$var wire 1 R. b $end
$var wire 1 S. c_in $end
$var reg 1 T. c_out $end
$var reg 1 U. g $end
$var reg 1 V. p $end
$var reg 1 W. sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 X. a $end
$var wire 1 Y. b $end
$var wire 1 Z. c_in $end
$var reg 1 [. c_out $end
$var reg 1 \. g $end
$var reg 1 ]. p $end
$var reg 1 ^. sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 _. a $end
$var wire 1 `. b $end
$var wire 1 a. c_in $end
$var reg 1 b. c_out $end
$var reg 1 c. g $end
$var reg 1 d. p $end
$var reg 1 e. sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[5] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 f. neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 g. state_0 $end
$var wire 6 h. two_bit_sums [5:0] $end
$var wire 8 i. one_bit_sums [7:0] $end
$var wire 4 j. living_neighbors [3:0] $end
$var reg 1 k. continue_alive $end
$var reg 1 l. enabled_output $end
$var reg 1 m. is_3 $end
$var reg 1 n. reset_output $end
$var reg 1 o. state_d $end
$var reg 1 p. state_q $end
$scope module adder_1_1 $end
$var wire 1 q. a $end
$var wire 1 r. b $end
$var wire 1 s. c_in $end
$var reg 1 t. c_out $end
$var reg 1 u. g $end
$var reg 1 v. p $end
$var reg 1 w. sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 x. a $end
$var wire 1 y. b $end
$var wire 1 z. c_in $end
$var reg 1 {. c_out $end
$var reg 1 |. g $end
$var reg 1 }. p $end
$var reg 1 ~. sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 !/ a $end
$var wire 1 "/ b $end
$var wire 1 #/ c_in $end
$var reg 1 $/ c_out $end
$var reg 1 %/ g $end
$var reg 1 &/ p $end
$var reg 1 '/ sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 (/ a $end
$var wire 1 )/ b $end
$var wire 1 */ c_in $end
$var reg 1 +/ c_out $end
$var reg 1 ,/ g $end
$var reg 1 -/ p $end
$var reg 1 ./ sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 // a [1:0] $end
$var wire 2 0/ b [1:0] $end
$var wire 1 1/ c_in $end
$var wire 2 2/ sum [1:0] $end
$var wire 3 3/ carries [2:0] $end
$var wire 1 4/ c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 5/ a $end
$var wire 1 6/ b $end
$var wire 1 7/ c_in $end
$var reg 1 8/ c_out $end
$var reg 1 9/ g $end
$var reg 1 :/ p $end
$var reg 1 ;/ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 </ a $end
$var wire 1 =/ b $end
$var wire 1 >/ c_in $end
$var reg 1 ?/ c_out $end
$var reg 1 @/ g $end
$var reg 1 A/ p $end
$var reg 1 B/ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 C/ a [1:0] $end
$var wire 2 D/ b [1:0] $end
$var wire 1 E/ c_in $end
$var wire 2 F/ sum [1:0] $end
$var wire 3 G/ carries [2:0] $end
$var wire 1 H/ c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 I/ a $end
$var wire 1 J/ b $end
$var wire 1 K/ c_in $end
$var reg 1 L/ c_out $end
$var reg 1 M/ g $end
$var reg 1 N/ p $end
$var reg 1 O/ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 P/ a $end
$var wire 1 Q/ b $end
$var wire 1 R/ c_in $end
$var reg 1 S/ c_out $end
$var reg 1 T/ g $end
$var reg 1 U/ p $end
$var reg 1 V/ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 W/ a [2:0] $end
$var wire 3 X/ b [2:0] $end
$var wire 1 Y/ c_in $end
$var wire 3 Z/ sum [2:0] $end
$var wire 4 [/ carries [3:0] $end
$var wire 1 \/ c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 ]/ a $end
$var wire 1 ^/ b $end
$var wire 1 _/ c_in $end
$var reg 1 `/ c_out $end
$var reg 1 a/ g $end
$var reg 1 b/ p $end
$var reg 1 c/ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 d/ a $end
$var wire 1 e/ b $end
$var wire 1 f/ c_in $end
$var reg 1 g/ c_out $end
$var reg 1 h/ g $end
$var reg 1 i/ p $end
$var reg 1 j/ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 k/ a $end
$var wire 1 l/ b $end
$var wire 1 m/ c_in $end
$var reg 1 n/ c_out $end
$var reg 1 o/ g $end
$var reg 1 p/ p $end
$var reg 1 q/ sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[6] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 r/ neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 s/ state_0 $end
$var wire 6 t/ two_bit_sums [5:0] $end
$var wire 8 u/ one_bit_sums [7:0] $end
$var wire 4 v/ living_neighbors [3:0] $end
$var reg 1 w/ continue_alive $end
$var reg 1 x/ enabled_output $end
$var reg 1 y/ is_3 $end
$var reg 1 z/ reset_output $end
$var reg 1 {/ state_d $end
$var reg 1 |/ state_q $end
$scope module adder_1_1 $end
$var wire 1 }/ a $end
$var wire 1 ~/ b $end
$var wire 1 !0 c_in $end
$var reg 1 "0 c_out $end
$var reg 1 #0 g $end
$var reg 1 $0 p $end
$var reg 1 %0 sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 &0 a $end
$var wire 1 '0 b $end
$var wire 1 (0 c_in $end
$var reg 1 )0 c_out $end
$var reg 1 *0 g $end
$var reg 1 +0 p $end
$var reg 1 ,0 sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 -0 a $end
$var wire 1 .0 b $end
$var wire 1 /0 c_in $end
$var reg 1 00 c_out $end
$var reg 1 10 g $end
$var reg 1 20 p $end
$var reg 1 30 sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 40 a $end
$var wire 1 50 b $end
$var wire 1 60 c_in $end
$var reg 1 70 c_out $end
$var reg 1 80 g $end
$var reg 1 90 p $end
$var reg 1 :0 sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 ;0 a [1:0] $end
$var wire 2 <0 b [1:0] $end
$var wire 1 =0 c_in $end
$var wire 2 >0 sum [1:0] $end
$var wire 3 ?0 carries [2:0] $end
$var wire 1 @0 c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 A0 a $end
$var wire 1 B0 b $end
$var wire 1 C0 c_in $end
$var reg 1 D0 c_out $end
$var reg 1 E0 g $end
$var reg 1 F0 p $end
$var reg 1 G0 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 H0 a $end
$var wire 1 I0 b $end
$var wire 1 J0 c_in $end
$var reg 1 K0 c_out $end
$var reg 1 L0 g $end
$var reg 1 M0 p $end
$var reg 1 N0 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 O0 a [1:0] $end
$var wire 2 P0 b [1:0] $end
$var wire 1 Q0 c_in $end
$var wire 2 R0 sum [1:0] $end
$var wire 3 S0 carries [2:0] $end
$var wire 1 T0 c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 U0 a $end
$var wire 1 V0 b $end
$var wire 1 W0 c_in $end
$var reg 1 X0 c_out $end
$var reg 1 Y0 g $end
$var reg 1 Z0 p $end
$var reg 1 [0 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 \0 a $end
$var wire 1 ]0 b $end
$var wire 1 ^0 c_in $end
$var reg 1 _0 c_out $end
$var reg 1 `0 g $end
$var reg 1 a0 p $end
$var reg 1 b0 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 c0 a [2:0] $end
$var wire 3 d0 b [2:0] $end
$var wire 1 e0 c_in $end
$var wire 3 f0 sum [2:0] $end
$var wire 4 g0 carries [3:0] $end
$var wire 1 h0 c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 i0 a $end
$var wire 1 j0 b $end
$var wire 1 k0 c_in $end
$var reg 1 l0 c_out $end
$var reg 1 m0 g $end
$var reg 1 n0 p $end
$var reg 1 o0 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 p0 a $end
$var wire 1 q0 b $end
$var wire 1 r0 c_in $end
$var reg 1 s0 c_out $end
$var reg 1 t0 g $end
$var reg 1 u0 p $end
$var reg 1 v0 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 w0 a $end
$var wire 1 x0 b $end
$var wire 1 y0 c_in $end
$var reg 1 z0 c_out $end
$var reg 1 {0 g $end
$var reg 1 |0 p $end
$var reg 1 }0 sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[7] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 ~0 neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 !1 state_0 $end
$var wire 6 "1 two_bit_sums [5:0] $end
$var wire 8 #1 one_bit_sums [7:0] $end
$var wire 4 $1 living_neighbors [3:0] $end
$var reg 1 %1 continue_alive $end
$var reg 1 &1 enabled_output $end
$var reg 1 '1 is_3 $end
$var reg 1 (1 reset_output $end
$var reg 1 )1 state_d $end
$var reg 1 *1 state_q $end
$scope module adder_1_1 $end
$var wire 1 +1 a $end
$var wire 1 ,1 b $end
$var wire 1 -1 c_in $end
$var reg 1 .1 c_out $end
$var reg 1 /1 g $end
$var reg 1 01 p $end
$var reg 1 11 sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 21 a $end
$var wire 1 31 b $end
$var wire 1 41 c_in $end
$var reg 1 51 c_out $end
$var reg 1 61 g $end
$var reg 1 71 p $end
$var reg 1 81 sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 91 a $end
$var wire 1 :1 b $end
$var wire 1 ;1 c_in $end
$var reg 1 <1 c_out $end
$var reg 1 =1 g $end
$var reg 1 >1 p $end
$var reg 1 ?1 sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 @1 a $end
$var wire 1 A1 b $end
$var wire 1 B1 c_in $end
$var reg 1 C1 c_out $end
$var reg 1 D1 g $end
$var reg 1 E1 p $end
$var reg 1 F1 sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 G1 a [1:0] $end
$var wire 2 H1 b [1:0] $end
$var wire 1 I1 c_in $end
$var wire 2 J1 sum [1:0] $end
$var wire 3 K1 carries [2:0] $end
$var wire 1 L1 c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 M1 a $end
$var wire 1 N1 b $end
$var wire 1 O1 c_in $end
$var reg 1 P1 c_out $end
$var reg 1 Q1 g $end
$var reg 1 R1 p $end
$var reg 1 S1 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 T1 a $end
$var wire 1 U1 b $end
$var wire 1 V1 c_in $end
$var reg 1 W1 c_out $end
$var reg 1 X1 g $end
$var reg 1 Y1 p $end
$var reg 1 Z1 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 [1 a [1:0] $end
$var wire 2 \1 b [1:0] $end
$var wire 1 ]1 c_in $end
$var wire 2 ^1 sum [1:0] $end
$var wire 3 _1 carries [2:0] $end
$var wire 1 `1 c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 a1 a $end
$var wire 1 b1 b $end
$var wire 1 c1 c_in $end
$var reg 1 d1 c_out $end
$var reg 1 e1 g $end
$var reg 1 f1 p $end
$var reg 1 g1 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 h1 a $end
$var wire 1 i1 b $end
$var wire 1 j1 c_in $end
$var reg 1 k1 c_out $end
$var reg 1 l1 g $end
$var reg 1 m1 p $end
$var reg 1 n1 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 o1 a [2:0] $end
$var wire 3 p1 b [2:0] $end
$var wire 1 q1 c_in $end
$var wire 3 r1 sum [2:0] $end
$var wire 4 s1 carries [3:0] $end
$var wire 1 t1 c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 u1 a $end
$var wire 1 v1 b $end
$var wire 1 w1 c_in $end
$var reg 1 x1 c_out $end
$var reg 1 y1 g $end
$var reg 1 z1 p $end
$var reg 1 {1 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 |1 a $end
$var wire 1 }1 b $end
$var wire 1 ~1 c_in $end
$var reg 1 !2 c_out $end
$var reg 1 "2 g $end
$var reg 1 #2 p $end
$var reg 1 $2 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 %2 a $end
$var wire 1 &2 b $end
$var wire 1 '2 c_in $end
$var reg 1 (2 c_out $end
$var reg 1 )2 g $end
$var reg 1 *2 p $end
$var reg 1 +2 sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[8] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 ,2 neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 -2 state_0 $end
$var wire 6 .2 two_bit_sums [5:0] $end
$var wire 8 /2 one_bit_sums [7:0] $end
$var wire 4 02 living_neighbors [3:0] $end
$var reg 1 12 continue_alive $end
$var reg 1 22 enabled_output $end
$var reg 1 32 is_3 $end
$var reg 1 42 reset_output $end
$var reg 1 52 state_d $end
$var reg 1 62 state_q $end
$scope module adder_1_1 $end
$var wire 1 72 a $end
$var wire 1 82 b $end
$var wire 1 92 c_in $end
$var reg 1 :2 c_out $end
$var reg 1 ;2 g $end
$var reg 1 <2 p $end
$var reg 1 =2 sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 >2 a $end
$var wire 1 ?2 b $end
$var wire 1 @2 c_in $end
$var reg 1 A2 c_out $end
$var reg 1 B2 g $end
$var reg 1 C2 p $end
$var reg 1 D2 sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 E2 a $end
$var wire 1 F2 b $end
$var wire 1 G2 c_in $end
$var reg 1 H2 c_out $end
$var reg 1 I2 g $end
$var reg 1 J2 p $end
$var reg 1 K2 sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 L2 a $end
$var wire 1 M2 b $end
$var wire 1 N2 c_in $end
$var reg 1 O2 c_out $end
$var reg 1 P2 g $end
$var reg 1 Q2 p $end
$var reg 1 R2 sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 S2 a [1:0] $end
$var wire 2 T2 b [1:0] $end
$var wire 1 U2 c_in $end
$var wire 2 V2 sum [1:0] $end
$var wire 3 W2 carries [2:0] $end
$var wire 1 X2 c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 Y2 a $end
$var wire 1 Z2 b $end
$var wire 1 [2 c_in $end
$var reg 1 \2 c_out $end
$var reg 1 ]2 g $end
$var reg 1 ^2 p $end
$var reg 1 _2 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 `2 a $end
$var wire 1 a2 b $end
$var wire 1 b2 c_in $end
$var reg 1 c2 c_out $end
$var reg 1 d2 g $end
$var reg 1 e2 p $end
$var reg 1 f2 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 g2 a [1:0] $end
$var wire 2 h2 b [1:0] $end
$var wire 1 i2 c_in $end
$var wire 2 j2 sum [1:0] $end
$var wire 3 k2 carries [2:0] $end
$var wire 1 l2 c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 m2 a $end
$var wire 1 n2 b $end
$var wire 1 o2 c_in $end
$var reg 1 p2 c_out $end
$var reg 1 q2 g $end
$var reg 1 r2 p $end
$var reg 1 s2 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 t2 a $end
$var wire 1 u2 b $end
$var wire 1 v2 c_in $end
$var reg 1 w2 c_out $end
$var reg 1 x2 g $end
$var reg 1 y2 p $end
$var reg 1 z2 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 {2 a [2:0] $end
$var wire 3 |2 b [2:0] $end
$var wire 1 }2 c_in $end
$var wire 3 ~2 sum [2:0] $end
$var wire 4 !3 carries [3:0] $end
$var wire 1 "3 c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 #3 a $end
$var wire 1 $3 b $end
$var wire 1 %3 c_in $end
$var reg 1 &3 c_out $end
$var reg 1 '3 g $end
$var reg 1 (3 p $end
$var reg 1 )3 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 *3 a $end
$var wire 1 +3 b $end
$var wire 1 ,3 c_in $end
$var reg 1 -3 c_out $end
$var reg 1 .3 g $end
$var reg 1 /3 p $end
$var reg 1 03 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 13 a $end
$var wire 1 23 b $end
$var wire 1 33 c_in $end
$var reg 1 43 c_out $end
$var reg 1 53 g $end
$var reg 1 63 p $end
$var reg 1 73 sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[9] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_x[3] $end
$scope begin cells_y[0] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[1] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 83 neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 93 state_0 $end
$var wire 6 :3 two_bit_sums [5:0] $end
$var wire 8 ;3 one_bit_sums [7:0] $end
$var wire 4 <3 living_neighbors [3:0] $end
$var reg 1 =3 continue_alive $end
$var reg 1 >3 enabled_output $end
$var reg 1 ?3 is_3 $end
$var reg 1 @3 reset_output $end
$var reg 1 A3 state_d $end
$var reg 1 B3 state_q $end
$scope module adder_1_1 $end
$var wire 1 C3 a $end
$var wire 1 D3 b $end
$var wire 1 E3 c_in $end
$var reg 1 F3 c_out $end
$var reg 1 G3 g $end
$var reg 1 H3 p $end
$var reg 1 I3 sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 J3 a $end
$var wire 1 K3 b $end
$var wire 1 L3 c_in $end
$var reg 1 M3 c_out $end
$var reg 1 N3 g $end
$var reg 1 O3 p $end
$var reg 1 P3 sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 Q3 a $end
$var wire 1 R3 b $end
$var wire 1 S3 c_in $end
$var reg 1 T3 c_out $end
$var reg 1 U3 g $end
$var reg 1 V3 p $end
$var reg 1 W3 sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 X3 a $end
$var wire 1 Y3 b $end
$var wire 1 Z3 c_in $end
$var reg 1 [3 c_out $end
$var reg 1 \3 g $end
$var reg 1 ]3 p $end
$var reg 1 ^3 sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 _3 a [1:0] $end
$var wire 2 `3 b [1:0] $end
$var wire 1 a3 c_in $end
$var wire 2 b3 sum [1:0] $end
$var wire 3 c3 carries [2:0] $end
$var wire 1 d3 c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 e3 a $end
$var wire 1 f3 b $end
$var wire 1 g3 c_in $end
$var reg 1 h3 c_out $end
$var reg 1 i3 g $end
$var reg 1 j3 p $end
$var reg 1 k3 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 l3 a $end
$var wire 1 m3 b $end
$var wire 1 n3 c_in $end
$var reg 1 o3 c_out $end
$var reg 1 p3 g $end
$var reg 1 q3 p $end
$var reg 1 r3 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 s3 a [1:0] $end
$var wire 2 t3 b [1:0] $end
$var wire 1 u3 c_in $end
$var wire 2 v3 sum [1:0] $end
$var wire 3 w3 carries [2:0] $end
$var wire 1 x3 c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 y3 a $end
$var wire 1 z3 b $end
$var wire 1 {3 c_in $end
$var reg 1 |3 c_out $end
$var reg 1 }3 g $end
$var reg 1 ~3 p $end
$var reg 1 !4 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 "4 a $end
$var wire 1 #4 b $end
$var wire 1 $4 c_in $end
$var reg 1 %4 c_out $end
$var reg 1 &4 g $end
$var reg 1 '4 p $end
$var reg 1 (4 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 )4 a [2:0] $end
$var wire 3 *4 b [2:0] $end
$var wire 1 +4 c_in $end
$var wire 3 ,4 sum [2:0] $end
$var wire 4 -4 carries [3:0] $end
$var wire 1 .4 c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 /4 a $end
$var wire 1 04 b $end
$var wire 1 14 c_in $end
$var reg 1 24 c_out $end
$var reg 1 34 g $end
$var reg 1 44 p $end
$var reg 1 54 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 64 a $end
$var wire 1 74 b $end
$var wire 1 84 c_in $end
$var reg 1 94 c_out $end
$var reg 1 :4 g $end
$var reg 1 ;4 p $end
$var reg 1 <4 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 =4 a $end
$var wire 1 >4 b $end
$var wire 1 ?4 c_in $end
$var reg 1 @4 c_out $end
$var reg 1 A4 g $end
$var reg 1 B4 p $end
$var reg 1 C4 sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[2] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 D4 neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 E4 state_0 $end
$var wire 6 F4 two_bit_sums [5:0] $end
$var wire 8 G4 one_bit_sums [7:0] $end
$var wire 4 H4 living_neighbors [3:0] $end
$var reg 1 I4 continue_alive $end
$var reg 1 J4 enabled_output $end
$var reg 1 K4 is_3 $end
$var reg 1 L4 reset_output $end
$var reg 1 M4 state_d $end
$var reg 1 N4 state_q $end
$scope module adder_1_1 $end
$var wire 1 O4 a $end
$var wire 1 P4 b $end
$var wire 1 Q4 c_in $end
$var reg 1 R4 c_out $end
$var reg 1 S4 g $end
$var reg 1 T4 p $end
$var reg 1 U4 sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 V4 a $end
$var wire 1 W4 b $end
$var wire 1 X4 c_in $end
$var reg 1 Y4 c_out $end
$var reg 1 Z4 g $end
$var reg 1 [4 p $end
$var reg 1 \4 sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 ]4 a $end
$var wire 1 ^4 b $end
$var wire 1 _4 c_in $end
$var reg 1 `4 c_out $end
$var reg 1 a4 g $end
$var reg 1 b4 p $end
$var reg 1 c4 sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 d4 a $end
$var wire 1 e4 b $end
$var wire 1 f4 c_in $end
$var reg 1 g4 c_out $end
$var reg 1 h4 g $end
$var reg 1 i4 p $end
$var reg 1 j4 sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 k4 a [1:0] $end
$var wire 2 l4 b [1:0] $end
$var wire 1 m4 c_in $end
$var wire 2 n4 sum [1:0] $end
$var wire 3 o4 carries [2:0] $end
$var wire 1 p4 c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 q4 a $end
$var wire 1 r4 b $end
$var wire 1 s4 c_in $end
$var reg 1 t4 c_out $end
$var reg 1 u4 g $end
$var reg 1 v4 p $end
$var reg 1 w4 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 x4 a $end
$var wire 1 y4 b $end
$var wire 1 z4 c_in $end
$var reg 1 {4 c_out $end
$var reg 1 |4 g $end
$var reg 1 }4 p $end
$var reg 1 ~4 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 !5 a [1:0] $end
$var wire 2 "5 b [1:0] $end
$var wire 1 #5 c_in $end
$var wire 2 $5 sum [1:0] $end
$var wire 3 %5 carries [2:0] $end
$var wire 1 &5 c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 '5 a $end
$var wire 1 (5 b $end
$var wire 1 )5 c_in $end
$var reg 1 *5 c_out $end
$var reg 1 +5 g $end
$var reg 1 ,5 p $end
$var reg 1 -5 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 .5 a $end
$var wire 1 /5 b $end
$var wire 1 05 c_in $end
$var reg 1 15 c_out $end
$var reg 1 25 g $end
$var reg 1 35 p $end
$var reg 1 45 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 55 a [2:0] $end
$var wire 3 65 b [2:0] $end
$var wire 1 75 c_in $end
$var wire 3 85 sum [2:0] $end
$var wire 4 95 carries [3:0] $end
$var wire 1 :5 c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 ;5 a $end
$var wire 1 <5 b $end
$var wire 1 =5 c_in $end
$var reg 1 >5 c_out $end
$var reg 1 ?5 g $end
$var reg 1 @5 p $end
$var reg 1 A5 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 B5 a $end
$var wire 1 C5 b $end
$var wire 1 D5 c_in $end
$var reg 1 E5 c_out $end
$var reg 1 F5 g $end
$var reg 1 G5 p $end
$var reg 1 H5 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 I5 a $end
$var wire 1 J5 b $end
$var wire 1 K5 c_in $end
$var reg 1 L5 c_out $end
$var reg 1 M5 g $end
$var reg 1 N5 p $end
$var reg 1 O5 sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[3] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 P5 neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 Q5 state_0 $end
$var wire 6 R5 two_bit_sums [5:0] $end
$var wire 8 S5 one_bit_sums [7:0] $end
$var wire 4 T5 living_neighbors [3:0] $end
$var reg 1 U5 continue_alive $end
$var reg 1 V5 enabled_output $end
$var reg 1 W5 is_3 $end
$var reg 1 X5 reset_output $end
$var reg 1 Y5 state_d $end
$var reg 1 Z5 state_q $end
$scope module adder_1_1 $end
$var wire 1 [5 a $end
$var wire 1 \5 b $end
$var wire 1 ]5 c_in $end
$var reg 1 ^5 c_out $end
$var reg 1 _5 g $end
$var reg 1 `5 p $end
$var reg 1 a5 sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 b5 a $end
$var wire 1 c5 b $end
$var wire 1 d5 c_in $end
$var reg 1 e5 c_out $end
$var reg 1 f5 g $end
$var reg 1 g5 p $end
$var reg 1 h5 sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 i5 a $end
$var wire 1 j5 b $end
$var wire 1 k5 c_in $end
$var reg 1 l5 c_out $end
$var reg 1 m5 g $end
$var reg 1 n5 p $end
$var reg 1 o5 sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 p5 a $end
$var wire 1 q5 b $end
$var wire 1 r5 c_in $end
$var reg 1 s5 c_out $end
$var reg 1 t5 g $end
$var reg 1 u5 p $end
$var reg 1 v5 sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 w5 a [1:0] $end
$var wire 2 x5 b [1:0] $end
$var wire 1 y5 c_in $end
$var wire 2 z5 sum [1:0] $end
$var wire 3 {5 carries [2:0] $end
$var wire 1 |5 c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 }5 a $end
$var wire 1 ~5 b $end
$var wire 1 !6 c_in $end
$var reg 1 "6 c_out $end
$var reg 1 #6 g $end
$var reg 1 $6 p $end
$var reg 1 %6 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 &6 a $end
$var wire 1 '6 b $end
$var wire 1 (6 c_in $end
$var reg 1 )6 c_out $end
$var reg 1 *6 g $end
$var reg 1 +6 p $end
$var reg 1 ,6 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 -6 a [1:0] $end
$var wire 2 .6 b [1:0] $end
$var wire 1 /6 c_in $end
$var wire 2 06 sum [1:0] $end
$var wire 3 16 carries [2:0] $end
$var wire 1 26 c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 36 a $end
$var wire 1 46 b $end
$var wire 1 56 c_in $end
$var reg 1 66 c_out $end
$var reg 1 76 g $end
$var reg 1 86 p $end
$var reg 1 96 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 :6 a $end
$var wire 1 ;6 b $end
$var wire 1 <6 c_in $end
$var reg 1 =6 c_out $end
$var reg 1 >6 g $end
$var reg 1 ?6 p $end
$var reg 1 @6 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 A6 a [2:0] $end
$var wire 3 B6 b [2:0] $end
$var wire 1 C6 c_in $end
$var wire 3 D6 sum [2:0] $end
$var wire 4 E6 carries [3:0] $end
$var wire 1 F6 c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 G6 a $end
$var wire 1 H6 b $end
$var wire 1 I6 c_in $end
$var reg 1 J6 c_out $end
$var reg 1 K6 g $end
$var reg 1 L6 p $end
$var reg 1 M6 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 N6 a $end
$var wire 1 O6 b $end
$var wire 1 P6 c_in $end
$var reg 1 Q6 c_out $end
$var reg 1 R6 g $end
$var reg 1 S6 p $end
$var reg 1 T6 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 U6 a $end
$var wire 1 V6 b $end
$var wire 1 W6 c_in $end
$var reg 1 X6 c_out $end
$var reg 1 Y6 g $end
$var reg 1 Z6 p $end
$var reg 1 [6 sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[4] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 \6 neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 ]6 state_0 $end
$var wire 6 ^6 two_bit_sums [5:0] $end
$var wire 8 _6 one_bit_sums [7:0] $end
$var wire 4 `6 living_neighbors [3:0] $end
$var reg 1 a6 continue_alive $end
$var reg 1 b6 enabled_output $end
$var reg 1 c6 is_3 $end
$var reg 1 d6 reset_output $end
$var reg 1 e6 state_d $end
$var reg 1 f6 state_q $end
$scope module adder_1_1 $end
$var wire 1 g6 a $end
$var wire 1 h6 b $end
$var wire 1 i6 c_in $end
$var reg 1 j6 c_out $end
$var reg 1 k6 g $end
$var reg 1 l6 p $end
$var reg 1 m6 sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 n6 a $end
$var wire 1 o6 b $end
$var wire 1 p6 c_in $end
$var reg 1 q6 c_out $end
$var reg 1 r6 g $end
$var reg 1 s6 p $end
$var reg 1 t6 sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 u6 a $end
$var wire 1 v6 b $end
$var wire 1 w6 c_in $end
$var reg 1 x6 c_out $end
$var reg 1 y6 g $end
$var reg 1 z6 p $end
$var reg 1 {6 sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 |6 a $end
$var wire 1 }6 b $end
$var wire 1 ~6 c_in $end
$var reg 1 !7 c_out $end
$var reg 1 "7 g $end
$var reg 1 #7 p $end
$var reg 1 $7 sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 %7 a [1:0] $end
$var wire 2 &7 b [1:0] $end
$var wire 1 '7 c_in $end
$var wire 2 (7 sum [1:0] $end
$var wire 3 )7 carries [2:0] $end
$var wire 1 *7 c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 +7 a $end
$var wire 1 ,7 b $end
$var wire 1 -7 c_in $end
$var reg 1 .7 c_out $end
$var reg 1 /7 g $end
$var reg 1 07 p $end
$var reg 1 17 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 27 a $end
$var wire 1 37 b $end
$var wire 1 47 c_in $end
$var reg 1 57 c_out $end
$var reg 1 67 g $end
$var reg 1 77 p $end
$var reg 1 87 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 97 a [1:0] $end
$var wire 2 :7 b [1:0] $end
$var wire 1 ;7 c_in $end
$var wire 2 <7 sum [1:0] $end
$var wire 3 =7 carries [2:0] $end
$var wire 1 >7 c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 ?7 a $end
$var wire 1 @7 b $end
$var wire 1 A7 c_in $end
$var reg 1 B7 c_out $end
$var reg 1 C7 g $end
$var reg 1 D7 p $end
$var reg 1 E7 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 F7 a $end
$var wire 1 G7 b $end
$var wire 1 H7 c_in $end
$var reg 1 I7 c_out $end
$var reg 1 J7 g $end
$var reg 1 K7 p $end
$var reg 1 L7 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 M7 a [2:0] $end
$var wire 3 N7 b [2:0] $end
$var wire 1 O7 c_in $end
$var wire 3 P7 sum [2:0] $end
$var wire 4 Q7 carries [3:0] $end
$var wire 1 R7 c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 S7 a $end
$var wire 1 T7 b $end
$var wire 1 U7 c_in $end
$var reg 1 V7 c_out $end
$var reg 1 W7 g $end
$var reg 1 X7 p $end
$var reg 1 Y7 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 Z7 a $end
$var wire 1 [7 b $end
$var wire 1 \7 c_in $end
$var reg 1 ]7 c_out $end
$var reg 1 ^7 g $end
$var reg 1 _7 p $end
$var reg 1 `7 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 a7 a $end
$var wire 1 b7 b $end
$var wire 1 c7 c_in $end
$var reg 1 d7 c_out $end
$var reg 1 e7 g $end
$var reg 1 f7 p $end
$var reg 1 g7 sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[5] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 h7 neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 i7 state_0 $end
$var wire 6 j7 two_bit_sums [5:0] $end
$var wire 8 k7 one_bit_sums [7:0] $end
$var wire 4 l7 living_neighbors [3:0] $end
$var reg 1 m7 continue_alive $end
$var reg 1 n7 enabled_output $end
$var reg 1 o7 is_3 $end
$var reg 1 p7 reset_output $end
$var reg 1 q7 state_d $end
$var reg 1 r7 state_q $end
$scope module adder_1_1 $end
$var wire 1 s7 a $end
$var wire 1 t7 b $end
$var wire 1 u7 c_in $end
$var reg 1 v7 c_out $end
$var reg 1 w7 g $end
$var reg 1 x7 p $end
$var reg 1 y7 sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 z7 a $end
$var wire 1 {7 b $end
$var wire 1 |7 c_in $end
$var reg 1 }7 c_out $end
$var reg 1 ~7 g $end
$var reg 1 !8 p $end
$var reg 1 "8 sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 #8 a $end
$var wire 1 $8 b $end
$var wire 1 %8 c_in $end
$var reg 1 &8 c_out $end
$var reg 1 '8 g $end
$var reg 1 (8 p $end
$var reg 1 )8 sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 *8 a $end
$var wire 1 +8 b $end
$var wire 1 ,8 c_in $end
$var reg 1 -8 c_out $end
$var reg 1 .8 g $end
$var reg 1 /8 p $end
$var reg 1 08 sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 18 a [1:0] $end
$var wire 2 28 b [1:0] $end
$var wire 1 38 c_in $end
$var wire 2 48 sum [1:0] $end
$var wire 3 58 carries [2:0] $end
$var wire 1 68 c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 78 a $end
$var wire 1 88 b $end
$var wire 1 98 c_in $end
$var reg 1 :8 c_out $end
$var reg 1 ;8 g $end
$var reg 1 <8 p $end
$var reg 1 =8 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 >8 a $end
$var wire 1 ?8 b $end
$var wire 1 @8 c_in $end
$var reg 1 A8 c_out $end
$var reg 1 B8 g $end
$var reg 1 C8 p $end
$var reg 1 D8 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 E8 a [1:0] $end
$var wire 2 F8 b [1:0] $end
$var wire 1 G8 c_in $end
$var wire 2 H8 sum [1:0] $end
$var wire 3 I8 carries [2:0] $end
$var wire 1 J8 c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 K8 a $end
$var wire 1 L8 b $end
$var wire 1 M8 c_in $end
$var reg 1 N8 c_out $end
$var reg 1 O8 g $end
$var reg 1 P8 p $end
$var reg 1 Q8 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 R8 a $end
$var wire 1 S8 b $end
$var wire 1 T8 c_in $end
$var reg 1 U8 c_out $end
$var reg 1 V8 g $end
$var reg 1 W8 p $end
$var reg 1 X8 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 Y8 a [2:0] $end
$var wire 3 Z8 b [2:0] $end
$var wire 1 [8 c_in $end
$var wire 3 \8 sum [2:0] $end
$var wire 4 ]8 carries [3:0] $end
$var wire 1 ^8 c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 _8 a $end
$var wire 1 `8 b $end
$var wire 1 a8 c_in $end
$var reg 1 b8 c_out $end
$var reg 1 c8 g $end
$var reg 1 d8 p $end
$var reg 1 e8 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 f8 a $end
$var wire 1 g8 b $end
$var wire 1 h8 c_in $end
$var reg 1 i8 c_out $end
$var reg 1 j8 g $end
$var reg 1 k8 p $end
$var reg 1 l8 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 m8 a $end
$var wire 1 n8 b $end
$var wire 1 o8 c_in $end
$var reg 1 p8 c_out $end
$var reg 1 q8 g $end
$var reg 1 r8 p $end
$var reg 1 s8 sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[6] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 t8 neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 u8 state_0 $end
$var wire 6 v8 two_bit_sums [5:0] $end
$var wire 8 w8 one_bit_sums [7:0] $end
$var wire 4 x8 living_neighbors [3:0] $end
$var reg 1 y8 continue_alive $end
$var reg 1 z8 enabled_output $end
$var reg 1 {8 is_3 $end
$var reg 1 |8 reset_output $end
$var reg 1 }8 state_d $end
$var reg 1 ~8 state_q $end
$scope module adder_1_1 $end
$var wire 1 !9 a $end
$var wire 1 "9 b $end
$var wire 1 #9 c_in $end
$var reg 1 $9 c_out $end
$var reg 1 %9 g $end
$var reg 1 &9 p $end
$var reg 1 '9 sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 (9 a $end
$var wire 1 )9 b $end
$var wire 1 *9 c_in $end
$var reg 1 +9 c_out $end
$var reg 1 ,9 g $end
$var reg 1 -9 p $end
$var reg 1 .9 sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 /9 a $end
$var wire 1 09 b $end
$var wire 1 19 c_in $end
$var reg 1 29 c_out $end
$var reg 1 39 g $end
$var reg 1 49 p $end
$var reg 1 59 sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 69 a $end
$var wire 1 79 b $end
$var wire 1 89 c_in $end
$var reg 1 99 c_out $end
$var reg 1 :9 g $end
$var reg 1 ;9 p $end
$var reg 1 <9 sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 =9 a [1:0] $end
$var wire 2 >9 b [1:0] $end
$var wire 1 ?9 c_in $end
$var wire 2 @9 sum [1:0] $end
$var wire 3 A9 carries [2:0] $end
$var wire 1 B9 c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 C9 a $end
$var wire 1 D9 b $end
$var wire 1 E9 c_in $end
$var reg 1 F9 c_out $end
$var reg 1 G9 g $end
$var reg 1 H9 p $end
$var reg 1 I9 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 J9 a $end
$var wire 1 K9 b $end
$var wire 1 L9 c_in $end
$var reg 1 M9 c_out $end
$var reg 1 N9 g $end
$var reg 1 O9 p $end
$var reg 1 P9 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 Q9 a [1:0] $end
$var wire 2 R9 b [1:0] $end
$var wire 1 S9 c_in $end
$var wire 2 T9 sum [1:0] $end
$var wire 3 U9 carries [2:0] $end
$var wire 1 V9 c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 W9 a $end
$var wire 1 X9 b $end
$var wire 1 Y9 c_in $end
$var reg 1 Z9 c_out $end
$var reg 1 [9 g $end
$var reg 1 \9 p $end
$var reg 1 ]9 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 ^9 a $end
$var wire 1 _9 b $end
$var wire 1 `9 c_in $end
$var reg 1 a9 c_out $end
$var reg 1 b9 g $end
$var reg 1 c9 p $end
$var reg 1 d9 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 e9 a [2:0] $end
$var wire 3 f9 b [2:0] $end
$var wire 1 g9 c_in $end
$var wire 3 h9 sum [2:0] $end
$var wire 4 i9 carries [3:0] $end
$var wire 1 j9 c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 k9 a $end
$var wire 1 l9 b $end
$var wire 1 m9 c_in $end
$var reg 1 n9 c_out $end
$var reg 1 o9 g $end
$var reg 1 p9 p $end
$var reg 1 q9 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 r9 a $end
$var wire 1 s9 b $end
$var wire 1 t9 c_in $end
$var reg 1 u9 c_out $end
$var reg 1 v9 g $end
$var reg 1 w9 p $end
$var reg 1 x9 sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 y9 a $end
$var wire 1 z9 b $end
$var wire 1 {9 c_in $end
$var reg 1 |9 c_out $end
$var reg 1 }9 g $end
$var reg 1 ~9 p $end
$var reg 1 !: sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[7] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 ": neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 #: state_0 $end
$var wire 6 $: two_bit_sums [5:0] $end
$var wire 8 %: one_bit_sums [7:0] $end
$var wire 4 &: living_neighbors [3:0] $end
$var reg 1 ': continue_alive $end
$var reg 1 (: enabled_output $end
$var reg 1 ): is_3 $end
$var reg 1 *: reset_output $end
$var reg 1 +: state_d $end
$var reg 1 ,: state_q $end
$scope module adder_1_1 $end
$var wire 1 -: a $end
$var wire 1 .: b $end
$var wire 1 /: c_in $end
$var reg 1 0: c_out $end
$var reg 1 1: g $end
$var reg 1 2: p $end
$var reg 1 3: sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 4: a $end
$var wire 1 5: b $end
$var wire 1 6: c_in $end
$var reg 1 7: c_out $end
$var reg 1 8: g $end
$var reg 1 9: p $end
$var reg 1 :: sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 ;: a $end
$var wire 1 <: b $end
$var wire 1 =: c_in $end
$var reg 1 >: c_out $end
$var reg 1 ?: g $end
$var reg 1 @: p $end
$var reg 1 A: sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 B: a $end
$var wire 1 C: b $end
$var wire 1 D: c_in $end
$var reg 1 E: c_out $end
$var reg 1 F: g $end
$var reg 1 G: p $end
$var reg 1 H: sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 I: a [1:0] $end
$var wire 2 J: b [1:0] $end
$var wire 1 K: c_in $end
$var wire 2 L: sum [1:0] $end
$var wire 3 M: carries [2:0] $end
$var wire 1 N: c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 O: a $end
$var wire 1 P: b $end
$var wire 1 Q: c_in $end
$var reg 1 R: c_out $end
$var reg 1 S: g $end
$var reg 1 T: p $end
$var reg 1 U: sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 V: a $end
$var wire 1 W: b $end
$var wire 1 X: c_in $end
$var reg 1 Y: c_out $end
$var reg 1 Z: g $end
$var reg 1 [: p $end
$var reg 1 \: sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 ]: a [1:0] $end
$var wire 2 ^: b [1:0] $end
$var wire 1 _: c_in $end
$var wire 2 `: sum [1:0] $end
$var wire 3 a: carries [2:0] $end
$var wire 1 b: c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 c: a $end
$var wire 1 d: b $end
$var wire 1 e: c_in $end
$var reg 1 f: c_out $end
$var reg 1 g: g $end
$var reg 1 h: p $end
$var reg 1 i: sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 j: a $end
$var wire 1 k: b $end
$var wire 1 l: c_in $end
$var reg 1 m: c_out $end
$var reg 1 n: g $end
$var reg 1 o: p $end
$var reg 1 p: sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 q: a [2:0] $end
$var wire 3 r: b [2:0] $end
$var wire 1 s: c_in $end
$var wire 3 t: sum [2:0] $end
$var wire 4 u: carries [3:0] $end
$var wire 1 v: c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 w: a $end
$var wire 1 x: b $end
$var wire 1 y: c_in $end
$var reg 1 z: c_out $end
$var reg 1 {: g $end
$var reg 1 |: p $end
$var reg 1 }: sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 ~: a $end
$var wire 1 !; b $end
$var wire 1 "; c_in $end
$var reg 1 #; c_out $end
$var reg 1 $; g $end
$var reg 1 %; p $end
$var reg 1 &; sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 '; a $end
$var wire 1 (; b $end
$var wire 1 ); c_in $end
$var reg 1 *; c_out $end
$var reg 1 +; g $end
$var reg 1 ,; p $end
$var reg 1 -; sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[8] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 .; neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 /; state_0 $end
$var wire 6 0; two_bit_sums [5:0] $end
$var wire 8 1; one_bit_sums [7:0] $end
$var wire 4 2; living_neighbors [3:0] $end
$var reg 1 3; continue_alive $end
$var reg 1 4; enabled_output $end
$var reg 1 5; is_3 $end
$var reg 1 6; reset_output $end
$var reg 1 7; state_d $end
$var reg 1 8; state_q $end
$scope module adder_1_1 $end
$var wire 1 9; a $end
$var wire 1 :; b $end
$var wire 1 ;; c_in $end
$var reg 1 <; c_out $end
$var reg 1 =; g $end
$var reg 1 >; p $end
$var reg 1 ?; sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 @; a $end
$var wire 1 A; b $end
$var wire 1 B; c_in $end
$var reg 1 C; c_out $end
$var reg 1 D; g $end
$var reg 1 E; p $end
$var reg 1 F; sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 G; a $end
$var wire 1 H; b $end
$var wire 1 I; c_in $end
$var reg 1 J; c_out $end
$var reg 1 K; g $end
$var reg 1 L; p $end
$var reg 1 M; sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 N; a $end
$var wire 1 O; b $end
$var wire 1 P; c_in $end
$var reg 1 Q; c_out $end
$var reg 1 R; g $end
$var reg 1 S; p $end
$var reg 1 T; sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 U; a [1:0] $end
$var wire 2 V; b [1:0] $end
$var wire 1 W; c_in $end
$var wire 2 X; sum [1:0] $end
$var wire 3 Y; carries [2:0] $end
$var wire 1 Z; c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 [; a $end
$var wire 1 \; b $end
$var wire 1 ]; c_in $end
$var reg 1 ^; c_out $end
$var reg 1 _; g $end
$var reg 1 `; p $end
$var reg 1 a; sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 b; a $end
$var wire 1 c; b $end
$var wire 1 d; c_in $end
$var reg 1 e; c_out $end
$var reg 1 f; g $end
$var reg 1 g; p $end
$var reg 1 h; sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 i; a [1:0] $end
$var wire 2 j; b [1:0] $end
$var wire 1 k; c_in $end
$var wire 2 l; sum [1:0] $end
$var wire 3 m; carries [2:0] $end
$var wire 1 n; c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 o; a $end
$var wire 1 p; b $end
$var wire 1 q; c_in $end
$var reg 1 r; c_out $end
$var reg 1 s; g $end
$var reg 1 t; p $end
$var reg 1 u; sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 v; a $end
$var wire 1 w; b $end
$var wire 1 x; c_in $end
$var reg 1 y; c_out $end
$var reg 1 z; g $end
$var reg 1 {; p $end
$var reg 1 |; sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 }; a [2:0] $end
$var wire 3 ~; b [2:0] $end
$var wire 1 !< c_in $end
$var wire 3 "< sum [2:0] $end
$var wire 4 #< carries [3:0] $end
$var wire 1 $< c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 %< a $end
$var wire 1 &< b $end
$var wire 1 '< c_in $end
$var reg 1 (< c_out $end
$var reg 1 )< g $end
$var reg 1 *< p $end
$var reg 1 +< sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 ,< a $end
$var wire 1 -< b $end
$var wire 1 .< c_in $end
$var reg 1 /< c_out $end
$var reg 1 0< g $end
$var reg 1 1< p $end
$var reg 1 2< sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 3< a $end
$var wire 1 4< b $end
$var wire 1 5< c_in $end
$var reg 1 6< c_out $end
$var reg 1 7< g $end
$var reg 1 8< p $end
$var reg 1 9< sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[9] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_x[4] $end
$scope begin cells_y[0] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[1] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 :< neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 ;< state_0 $end
$var wire 6 << two_bit_sums [5:0] $end
$var wire 8 =< one_bit_sums [7:0] $end
$var wire 4 >< living_neighbors [3:0] $end
$var reg 1 ?< continue_alive $end
$var reg 1 @< enabled_output $end
$var reg 1 A< is_3 $end
$var reg 1 B< reset_output $end
$var reg 1 C< state_d $end
$var reg 1 D< state_q $end
$scope module adder_1_1 $end
$var wire 1 E< a $end
$var wire 1 F< b $end
$var wire 1 G< c_in $end
$var reg 1 H< c_out $end
$var reg 1 I< g $end
$var reg 1 J< p $end
$var reg 1 K< sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 L< a $end
$var wire 1 M< b $end
$var wire 1 N< c_in $end
$var reg 1 O< c_out $end
$var reg 1 P< g $end
$var reg 1 Q< p $end
$var reg 1 R< sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 S< a $end
$var wire 1 T< b $end
$var wire 1 U< c_in $end
$var reg 1 V< c_out $end
$var reg 1 W< g $end
$var reg 1 X< p $end
$var reg 1 Y< sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 Z< a $end
$var wire 1 [< b $end
$var wire 1 \< c_in $end
$var reg 1 ]< c_out $end
$var reg 1 ^< g $end
$var reg 1 _< p $end
$var reg 1 `< sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 a< a [1:0] $end
$var wire 2 b< b [1:0] $end
$var wire 1 c< c_in $end
$var wire 2 d< sum [1:0] $end
$var wire 3 e< carries [2:0] $end
$var wire 1 f< c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 g< a $end
$var wire 1 h< b $end
$var wire 1 i< c_in $end
$var reg 1 j< c_out $end
$var reg 1 k< g $end
$var reg 1 l< p $end
$var reg 1 m< sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 n< a $end
$var wire 1 o< b $end
$var wire 1 p< c_in $end
$var reg 1 q< c_out $end
$var reg 1 r< g $end
$var reg 1 s< p $end
$var reg 1 t< sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 u< a [1:0] $end
$var wire 2 v< b [1:0] $end
$var wire 1 w< c_in $end
$var wire 2 x< sum [1:0] $end
$var wire 3 y< carries [2:0] $end
$var wire 1 z< c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 {< a $end
$var wire 1 |< b $end
$var wire 1 }< c_in $end
$var reg 1 ~< c_out $end
$var reg 1 != g $end
$var reg 1 "= p $end
$var reg 1 #= sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 $= a $end
$var wire 1 %= b $end
$var wire 1 &= c_in $end
$var reg 1 '= c_out $end
$var reg 1 (= g $end
$var reg 1 )= p $end
$var reg 1 *= sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 += a [2:0] $end
$var wire 3 ,= b [2:0] $end
$var wire 1 -= c_in $end
$var wire 3 .= sum [2:0] $end
$var wire 4 /= carries [3:0] $end
$var wire 1 0= c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 1= a $end
$var wire 1 2= b $end
$var wire 1 3= c_in $end
$var reg 1 4= c_out $end
$var reg 1 5= g $end
$var reg 1 6= p $end
$var reg 1 7= sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 8= a $end
$var wire 1 9= b $end
$var wire 1 := c_in $end
$var reg 1 ;= c_out $end
$var reg 1 <= g $end
$var reg 1 == p $end
$var reg 1 >= sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 ?= a $end
$var wire 1 @= b $end
$var wire 1 A= c_in $end
$var reg 1 B= c_out $end
$var reg 1 C= g $end
$var reg 1 D= p $end
$var reg 1 E= sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[2] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 F= neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 G= state_0 $end
$var wire 6 H= two_bit_sums [5:0] $end
$var wire 8 I= one_bit_sums [7:0] $end
$var wire 4 J= living_neighbors [3:0] $end
$var reg 1 K= continue_alive $end
$var reg 1 L= enabled_output $end
$var reg 1 M= is_3 $end
$var reg 1 N= reset_output $end
$var reg 1 O= state_d $end
$var reg 1 P= state_q $end
$scope module adder_1_1 $end
$var wire 1 Q= a $end
$var wire 1 R= b $end
$var wire 1 S= c_in $end
$var reg 1 T= c_out $end
$var reg 1 U= g $end
$var reg 1 V= p $end
$var reg 1 W= sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 X= a $end
$var wire 1 Y= b $end
$var wire 1 Z= c_in $end
$var reg 1 [= c_out $end
$var reg 1 \= g $end
$var reg 1 ]= p $end
$var reg 1 ^= sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 _= a $end
$var wire 1 `= b $end
$var wire 1 a= c_in $end
$var reg 1 b= c_out $end
$var reg 1 c= g $end
$var reg 1 d= p $end
$var reg 1 e= sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 f= a $end
$var wire 1 g= b $end
$var wire 1 h= c_in $end
$var reg 1 i= c_out $end
$var reg 1 j= g $end
$var reg 1 k= p $end
$var reg 1 l= sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 m= a [1:0] $end
$var wire 2 n= b [1:0] $end
$var wire 1 o= c_in $end
$var wire 2 p= sum [1:0] $end
$var wire 3 q= carries [2:0] $end
$var wire 1 r= c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 s= a $end
$var wire 1 t= b $end
$var wire 1 u= c_in $end
$var reg 1 v= c_out $end
$var reg 1 w= g $end
$var reg 1 x= p $end
$var reg 1 y= sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 z= a $end
$var wire 1 {= b $end
$var wire 1 |= c_in $end
$var reg 1 }= c_out $end
$var reg 1 ~= g $end
$var reg 1 !> p $end
$var reg 1 "> sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 #> a [1:0] $end
$var wire 2 $> b [1:0] $end
$var wire 1 %> c_in $end
$var wire 2 &> sum [1:0] $end
$var wire 3 '> carries [2:0] $end
$var wire 1 (> c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 )> a $end
$var wire 1 *> b $end
$var wire 1 +> c_in $end
$var reg 1 ,> c_out $end
$var reg 1 -> g $end
$var reg 1 .> p $end
$var reg 1 /> sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 0> a $end
$var wire 1 1> b $end
$var wire 1 2> c_in $end
$var reg 1 3> c_out $end
$var reg 1 4> g $end
$var reg 1 5> p $end
$var reg 1 6> sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 7> a [2:0] $end
$var wire 3 8> b [2:0] $end
$var wire 1 9> c_in $end
$var wire 3 :> sum [2:0] $end
$var wire 4 ;> carries [3:0] $end
$var wire 1 <> c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 => a $end
$var wire 1 >> b $end
$var wire 1 ?> c_in $end
$var reg 1 @> c_out $end
$var reg 1 A> g $end
$var reg 1 B> p $end
$var reg 1 C> sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 D> a $end
$var wire 1 E> b $end
$var wire 1 F> c_in $end
$var reg 1 G> c_out $end
$var reg 1 H> g $end
$var reg 1 I> p $end
$var reg 1 J> sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 K> a $end
$var wire 1 L> b $end
$var wire 1 M> c_in $end
$var reg 1 N> c_out $end
$var reg 1 O> g $end
$var reg 1 P> p $end
$var reg 1 Q> sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[3] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 R> neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 S> state_0 $end
$var wire 6 T> two_bit_sums [5:0] $end
$var wire 8 U> one_bit_sums [7:0] $end
$var wire 4 V> living_neighbors [3:0] $end
$var reg 1 W> continue_alive $end
$var reg 1 X> enabled_output $end
$var reg 1 Y> is_3 $end
$var reg 1 Z> reset_output $end
$var reg 1 [> state_d $end
$var reg 1 \> state_q $end
$scope module adder_1_1 $end
$var wire 1 ]> a $end
$var wire 1 ^> b $end
$var wire 1 _> c_in $end
$var reg 1 `> c_out $end
$var reg 1 a> g $end
$var reg 1 b> p $end
$var reg 1 c> sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 d> a $end
$var wire 1 e> b $end
$var wire 1 f> c_in $end
$var reg 1 g> c_out $end
$var reg 1 h> g $end
$var reg 1 i> p $end
$var reg 1 j> sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 k> a $end
$var wire 1 l> b $end
$var wire 1 m> c_in $end
$var reg 1 n> c_out $end
$var reg 1 o> g $end
$var reg 1 p> p $end
$var reg 1 q> sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 r> a $end
$var wire 1 s> b $end
$var wire 1 t> c_in $end
$var reg 1 u> c_out $end
$var reg 1 v> g $end
$var reg 1 w> p $end
$var reg 1 x> sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 y> a [1:0] $end
$var wire 2 z> b [1:0] $end
$var wire 1 {> c_in $end
$var wire 2 |> sum [1:0] $end
$var wire 3 }> carries [2:0] $end
$var wire 1 ~> c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 !? a $end
$var wire 1 "? b $end
$var wire 1 #? c_in $end
$var reg 1 $? c_out $end
$var reg 1 %? g $end
$var reg 1 &? p $end
$var reg 1 '? sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 (? a $end
$var wire 1 )? b $end
$var wire 1 *? c_in $end
$var reg 1 +? c_out $end
$var reg 1 ,? g $end
$var reg 1 -? p $end
$var reg 1 .? sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 /? a [1:0] $end
$var wire 2 0? b [1:0] $end
$var wire 1 1? c_in $end
$var wire 2 2? sum [1:0] $end
$var wire 3 3? carries [2:0] $end
$var wire 1 4? c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 5? a $end
$var wire 1 6? b $end
$var wire 1 7? c_in $end
$var reg 1 8? c_out $end
$var reg 1 9? g $end
$var reg 1 :? p $end
$var reg 1 ;? sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 <? a $end
$var wire 1 =? b $end
$var wire 1 >? c_in $end
$var reg 1 ?? c_out $end
$var reg 1 @? g $end
$var reg 1 A? p $end
$var reg 1 B? sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 C? a [2:0] $end
$var wire 3 D? b [2:0] $end
$var wire 1 E? c_in $end
$var wire 3 F? sum [2:0] $end
$var wire 4 G? carries [3:0] $end
$var wire 1 H? c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 I? a $end
$var wire 1 J? b $end
$var wire 1 K? c_in $end
$var reg 1 L? c_out $end
$var reg 1 M? g $end
$var reg 1 N? p $end
$var reg 1 O? sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 P? a $end
$var wire 1 Q? b $end
$var wire 1 R? c_in $end
$var reg 1 S? c_out $end
$var reg 1 T? g $end
$var reg 1 U? p $end
$var reg 1 V? sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 W? a $end
$var wire 1 X? b $end
$var wire 1 Y? c_in $end
$var reg 1 Z? c_out $end
$var reg 1 [? g $end
$var reg 1 \? p $end
$var reg 1 ]? sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[4] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 ^? neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 _? state_0 $end
$var wire 6 `? two_bit_sums [5:0] $end
$var wire 8 a? one_bit_sums [7:0] $end
$var wire 4 b? living_neighbors [3:0] $end
$var reg 1 c? continue_alive $end
$var reg 1 d? enabled_output $end
$var reg 1 e? is_3 $end
$var reg 1 f? reset_output $end
$var reg 1 g? state_d $end
$var reg 1 h? state_q $end
$scope module adder_1_1 $end
$var wire 1 i? a $end
$var wire 1 j? b $end
$var wire 1 k? c_in $end
$var reg 1 l? c_out $end
$var reg 1 m? g $end
$var reg 1 n? p $end
$var reg 1 o? sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 p? a $end
$var wire 1 q? b $end
$var wire 1 r? c_in $end
$var reg 1 s? c_out $end
$var reg 1 t? g $end
$var reg 1 u? p $end
$var reg 1 v? sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 w? a $end
$var wire 1 x? b $end
$var wire 1 y? c_in $end
$var reg 1 z? c_out $end
$var reg 1 {? g $end
$var reg 1 |? p $end
$var reg 1 }? sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 ~? a $end
$var wire 1 !@ b $end
$var wire 1 "@ c_in $end
$var reg 1 #@ c_out $end
$var reg 1 $@ g $end
$var reg 1 %@ p $end
$var reg 1 &@ sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 '@ a [1:0] $end
$var wire 2 (@ b [1:0] $end
$var wire 1 )@ c_in $end
$var wire 2 *@ sum [1:0] $end
$var wire 3 +@ carries [2:0] $end
$var wire 1 ,@ c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 -@ a $end
$var wire 1 .@ b $end
$var wire 1 /@ c_in $end
$var reg 1 0@ c_out $end
$var reg 1 1@ g $end
$var reg 1 2@ p $end
$var reg 1 3@ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 4@ a $end
$var wire 1 5@ b $end
$var wire 1 6@ c_in $end
$var reg 1 7@ c_out $end
$var reg 1 8@ g $end
$var reg 1 9@ p $end
$var reg 1 :@ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 ;@ a [1:0] $end
$var wire 2 <@ b [1:0] $end
$var wire 1 =@ c_in $end
$var wire 2 >@ sum [1:0] $end
$var wire 3 ?@ carries [2:0] $end
$var wire 1 @@ c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 A@ a $end
$var wire 1 B@ b $end
$var wire 1 C@ c_in $end
$var reg 1 D@ c_out $end
$var reg 1 E@ g $end
$var reg 1 F@ p $end
$var reg 1 G@ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 H@ a $end
$var wire 1 I@ b $end
$var wire 1 J@ c_in $end
$var reg 1 K@ c_out $end
$var reg 1 L@ g $end
$var reg 1 M@ p $end
$var reg 1 N@ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 O@ a [2:0] $end
$var wire 3 P@ b [2:0] $end
$var wire 1 Q@ c_in $end
$var wire 3 R@ sum [2:0] $end
$var wire 4 S@ carries [3:0] $end
$var wire 1 T@ c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 U@ a $end
$var wire 1 V@ b $end
$var wire 1 W@ c_in $end
$var reg 1 X@ c_out $end
$var reg 1 Y@ g $end
$var reg 1 Z@ p $end
$var reg 1 [@ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 \@ a $end
$var wire 1 ]@ b $end
$var wire 1 ^@ c_in $end
$var reg 1 _@ c_out $end
$var reg 1 `@ g $end
$var reg 1 a@ p $end
$var reg 1 b@ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 c@ a $end
$var wire 1 d@ b $end
$var wire 1 e@ c_in $end
$var reg 1 f@ c_out $end
$var reg 1 g@ g $end
$var reg 1 h@ p $end
$var reg 1 i@ sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[5] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 j@ neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 k@ state_0 $end
$var wire 6 l@ two_bit_sums [5:0] $end
$var wire 8 m@ one_bit_sums [7:0] $end
$var wire 4 n@ living_neighbors [3:0] $end
$var reg 1 o@ continue_alive $end
$var reg 1 p@ enabled_output $end
$var reg 1 q@ is_3 $end
$var reg 1 r@ reset_output $end
$var reg 1 s@ state_d $end
$var reg 1 t@ state_q $end
$scope module adder_1_1 $end
$var wire 1 u@ a $end
$var wire 1 v@ b $end
$var wire 1 w@ c_in $end
$var reg 1 x@ c_out $end
$var reg 1 y@ g $end
$var reg 1 z@ p $end
$var reg 1 {@ sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 |@ a $end
$var wire 1 }@ b $end
$var wire 1 ~@ c_in $end
$var reg 1 !A c_out $end
$var reg 1 "A g $end
$var reg 1 #A p $end
$var reg 1 $A sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 %A a $end
$var wire 1 &A b $end
$var wire 1 'A c_in $end
$var reg 1 (A c_out $end
$var reg 1 )A g $end
$var reg 1 *A p $end
$var reg 1 +A sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 ,A a $end
$var wire 1 -A b $end
$var wire 1 .A c_in $end
$var reg 1 /A c_out $end
$var reg 1 0A g $end
$var reg 1 1A p $end
$var reg 1 2A sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 3A a [1:0] $end
$var wire 2 4A b [1:0] $end
$var wire 1 5A c_in $end
$var wire 2 6A sum [1:0] $end
$var wire 3 7A carries [2:0] $end
$var wire 1 8A c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 9A a $end
$var wire 1 :A b $end
$var wire 1 ;A c_in $end
$var reg 1 <A c_out $end
$var reg 1 =A g $end
$var reg 1 >A p $end
$var reg 1 ?A sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 @A a $end
$var wire 1 AA b $end
$var wire 1 BA c_in $end
$var reg 1 CA c_out $end
$var reg 1 DA g $end
$var reg 1 EA p $end
$var reg 1 FA sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 GA a [1:0] $end
$var wire 2 HA b [1:0] $end
$var wire 1 IA c_in $end
$var wire 2 JA sum [1:0] $end
$var wire 3 KA carries [2:0] $end
$var wire 1 LA c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 MA a $end
$var wire 1 NA b $end
$var wire 1 OA c_in $end
$var reg 1 PA c_out $end
$var reg 1 QA g $end
$var reg 1 RA p $end
$var reg 1 SA sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 TA a $end
$var wire 1 UA b $end
$var wire 1 VA c_in $end
$var reg 1 WA c_out $end
$var reg 1 XA g $end
$var reg 1 YA p $end
$var reg 1 ZA sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 [A a [2:0] $end
$var wire 3 \A b [2:0] $end
$var wire 1 ]A c_in $end
$var wire 3 ^A sum [2:0] $end
$var wire 4 _A carries [3:0] $end
$var wire 1 `A c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 aA a $end
$var wire 1 bA b $end
$var wire 1 cA c_in $end
$var reg 1 dA c_out $end
$var reg 1 eA g $end
$var reg 1 fA p $end
$var reg 1 gA sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 hA a $end
$var wire 1 iA b $end
$var wire 1 jA c_in $end
$var reg 1 kA c_out $end
$var reg 1 lA g $end
$var reg 1 mA p $end
$var reg 1 nA sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 oA a $end
$var wire 1 pA b $end
$var wire 1 qA c_in $end
$var reg 1 rA c_out $end
$var reg 1 sA g $end
$var reg 1 tA p $end
$var reg 1 uA sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[6] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 vA neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 wA state_0 $end
$var wire 6 xA two_bit_sums [5:0] $end
$var wire 8 yA one_bit_sums [7:0] $end
$var wire 4 zA living_neighbors [3:0] $end
$var reg 1 {A continue_alive $end
$var reg 1 |A enabled_output $end
$var reg 1 }A is_3 $end
$var reg 1 ~A reset_output $end
$var reg 1 !B state_d $end
$var reg 1 "B state_q $end
$scope module adder_1_1 $end
$var wire 1 #B a $end
$var wire 1 $B b $end
$var wire 1 %B c_in $end
$var reg 1 &B c_out $end
$var reg 1 'B g $end
$var reg 1 (B p $end
$var reg 1 )B sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 *B a $end
$var wire 1 +B b $end
$var wire 1 ,B c_in $end
$var reg 1 -B c_out $end
$var reg 1 .B g $end
$var reg 1 /B p $end
$var reg 1 0B sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 1B a $end
$var wire 1 2B b $end
$var wire 1 3B c_in $end
$var reg 1 4B c_out $end
$var reg 1 5B g $end
$var reg 1 6B p $end
$var reg 1 7B sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 8B a $end
$var wire 1 9B b $end
$var wire 1 :B c_in $end
$var reg 1 ;B c_out $end
$var reg 1 <B g $end
$var reg 1 =B p $end
$var reg 1 >B sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 ?B a [1:0] $end
$var wire 2 @B b [1:0] $end
$var wire 1 AB c_in $end
$var wire 2 BB sum [1:0] $end
$var wire 3 CB carries [2:0] $end
$var wire 1 DB c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 EB a $end
$var wire 1 FB b $end
$var wire 1 GB c_in $end
$var reg 1 HB c_out $end
$var reg 1 IB g $end
$var reg 1 JB p $end
$var reg 1 KB sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 LB a $end
$var wire 1 MB b $end
$var wire 1 NB c_in $end
$var reg 1 OB c_out $end
$var reg 1 PB g $end
$var reg 1 QB p $end
$var reg 1 RB sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 SB a [1:0] $end
$var wire 2 TB b [1:0] $end
$var wire 1 UB c_in $end
$var wire 2 VB sum [1:0] $end
$var wire 3 WB carries [2:0] $end
$var wire 1 XB c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 YB a $end
$var wire 1 ZB b $end
$var wire 1 [B c_in $end
$var reg 1 \B c_out $end
$var reg 1 ]B g $end
$var reg 1 ^B p $end
$var reg 1 _B sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 `B a $end
$var wire 1 aB b $end
$var wire 1 bB c_in $end
$var reg 1 cB c_out $end
$var reg 1 dB g $end
$var reg 1 eB p $end
$var reg 1 fB sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 gB a [2:0] $end
$var wire 3 hB b [2:0] $end
$var wire 1 iB c_in $end
$var wire 3 jB sum [2:0] $end
$var wire 4 kB carries [3:0] $end
$var wire 1 lB c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 mB a $end
$var wire 1 nB b $end
$var wire 1 oB c_in $end
$var reg 1 pB c_out $end
$var reg 1 qB g $end
$var reg 1 rB p $end
$var reg 1 sB sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 tB a $end
$var wire 1 uB b $end
$var wire 1 vB c_in $end
$var reg 1 wB c_out $end
$var reg 1 xB g $end
$var reg 1 yB p $end
$var reg 1 zB sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 {B a $end
$var wire 1 |B b $end
$var wire 1 }B c_in $end
$var reg 1 ~B c_out $end
$var reg 1 !C g $end
$var reg 1 "C p $end
$var reg 1 #C sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[7] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 $C neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 %C state_0 $end
$var wire 6 &C two_bit_sums [5:0] $end
$var wire 8 'C one_bit_sums [7:0] $end
$var wire 4 (C living_neighbors [3:0] $end
$var reg 1 )C continue_alive $end
$var reg 1 *C enabled_output $end
$var reg 1 +C is_3 $end
$var reg 1 ,C reset_output $end
$var reg 1 -C state_d $end
$var reg 1 .C state_q $end
$scope module adder_1_1 $end
$var wire 1 /C a $end
$var wire 1 0C b $end
$var wire 1 1C c_in $end
$var reg 1 2C c_out $end
$var reg 1 3C g $end
$var reg 1 4C p $end
$var reg 1 5C sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 6C a $end
$var wire 1 7C b $end
$var wire 1 8C c_in $end
$var reg 1 9C c_out $end
$var reg 1 :C g $end
$var reg 1 ;C p $end
$var reg 1 <C sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 =C a $end
$var wire 1 >C b $end
$var wire 1 ?C c_in $end
$var reg 1 @C c_out $end
$var reg 1 AC g $end
$var reg 1 BC p $end
$var reg 1 CC sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 DC a $end
$var wire 1 EC b $end
$var wire 1 FC c_in $end
$var reg 1 GC c_out $end
$var reg 1 HC g $end
$var reg 1 IC p $end
$var reg 1 JC sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 KC a [1:0] $end
$var wire 2 LC b [1:0] $end
$var wire 1 MC c_in $end
$var wire 2 NC sum [1:0] $end
$var wire 3 OC carries [2:0] $end
$var wire 1 PC c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 QC a $end
$var wire 1 RC b $end
$var wire 1 SC c_in $end
$var reg 1 TC c_out $end
$var reg 1 UC g $end
$var reg 1 VC p $end
$var reg 1 WC sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 XC a $end
$var wire 1 YC b $end
$var wire 1 ZC c_in $end
$var reg 1 [C c_out $end
$var reg 1 \C g $end
$var reg 1 ]C p $end
$var reg 1 ^C sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 _C a [1:0] $end
$var wire 2 `C b [1:0] $end
$var wire 1 aC c_in $end
$var wire 2 bC sum [1:0] $end
$var wire 3 cC carries [2:0] $end
$var wire 1 dC c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 eC a $end
$var wire 1 fC b $end
$var wire 1 gC c_in $end
$var reg 1 hC c_out $end
$var reg 1 iC g $end
$var reg 1 jC p $end
$var reg 1 kC sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 lC a $end
$var wire 1 mC b $end
$var wire 1 nC c_in $end
$var reg 1 oC c_out $end
$var reg 1 pC g $end
$var reg 1 qC p $end
$var reg 1 rC sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 sC a [2:0] $end
$var wire 3 tC b [2:0] $end
$var wire 1 uC c_in $end
$var wire 3 vC sum [2:0] $end
$var wire 4 wC carries [3:0] $end
$var wire 1 xC c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 yC a $end
$var wire 1 zC b $end
$var wire 1 {C c_in $end
$var reg 1 |C c_out $end
$var reg 1 }C g $end
$var reg 1 ~C p $end
$var reg 1 !D sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 "D a $end
$var wire 1 #D b $end
$var wire 1 $D c_in $end
$var reg 1 %D c_out $end
$var reg 1 &D g $end
$var reg 1 'D p $end
$var reg 1 (D sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 )D a $end
$var wire 1 *D b $end
$var wire 1 +D c_in $end
$var reg 1 ,D c_out $end
$var reg 1 -D g $end
$var reg 1 .D p $end
$var reg 1 /D sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[8] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 0D neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 1D state_0 $end
$var wire 6 2D two_bit_sums [5:0] $end
$var wire 8 3D one_bit_sums [7:0] $end
$var wire 4 4D living_neighbors [3:0] $end
$var reg 1 5D continue_alive $end
$var reg 1 6D enabled_output $end
$var reg 1 7D is_3 $end
$var reg 1 8D reset_output $end
$var reg 1 9D state_d $end
$var reg 1 :D state_q $end
$scope module adder_1_1 $end
$var wire 1 ;D a $end
$var wire 1 <D b $end
$var wire 1 =D c_in $end
$var reg 1 >D c_out $end
$var reg 1 ?D g $end
$var reg 1 @D p $end
$var reg 1 AD sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 BD a $end
$var wire 1 CD b $end
$var wire 1 DD c_in $end
$var reg 1 ED c_out $end
$var reg 1 FD g $end
$var reg 1 GD p $end
$var reg 1 HD sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 ID a $end
$var wire 1 JD b $end
$var wire 1 KD c_in $end
$var reg 1 LD c_out $end
$var reg 1 MD g $end
$var reg 1 ND p $end
$var reg 1 OD sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 PD a $end
$var wire 1 QD b $end
$var wire 1 RD c_in $end
$var reg 1 SD c_out $end
$var reg 1 TD g $end
$var reg 1 UD p $end
$var reg 1 VD sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 WD a [1:0] $end
$var wire 2 XD b [1:0] $end
$var wire 1 YD c_in $end
$var wire 2 ZD sum [1:0] $end
$var wire 3 [D carries [2:0] $end
$var wire 1 \D c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 ]D a $end
$var wire 1 ^D b $end
$var wire 1 _D c_in $end
$var reg 1 `D c_out $end
$var reg 1 aD g $end
$var reg 1 bD p $end
$var reg 1 cD sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 dD a $end
$var wire 1 eD b $end
$var wire 1 fD c_in $end
$var reg 1 gD c_out $end
$var reg 1 hD g $end
$var reg 1 iD p $end
$var reg 1 jD sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 kD a [1:0] $end
$var wire 2 lD b [1:0] $end
$var wire 1 mD c_in $end
$var wire 2 nD sum [1:0] $end
$var wire 3 oD carries [2:0] $end
$var wire 1 pD c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 qD a $end
$var wire 1 rD b $end
$var wire 1 sD c_in $end
$var reg 1 tD c_out $end
$var reg 1 uD g $end
$var reg 1 vD p $end
$var reg 1 wD sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 xD a $end
$var wire 1 yD b $end
$var wire 1 zD c_in $end
$var reg 1 {D c_out $end
$var reg 1 |D g $end
$var reg 1 }D p $end
$var reg 1 ~D sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 !E a [2:0] $end
$var wire 3 "E b [2:0] $end
$var wire 1 #E c_in $end
$var wire 3 $E sum [2:0] $end
$var wire 4 %E carries [3:0] $end
$var wire 1 &E c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 'E a $end
$var wire 1 (E b $end
$var wire 1 )E c_in $end
$var reg 1 *E c_out $end
$var reg 1 +E g $end
$var reg 1 ,E p $end
$var reg 1 -E sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 .E a $end
$var wire 1 /E b $end
$var wire 1 0E c_in $end
$var reg 1 1E c_out $end
$var reg 1 2E g $end
$var reg 1 3E p $end
$var reg 1 4E sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 5E a $end
$var wire 1 6E b $end
$var wire 1 7E c_in $end
$var reg 1 8E c_out $end
$var reg 1 9E g $end
$var reg 1 :E p $end
$var reg 1 ;E sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[9] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_x[5] $end
$scope begin cells_y[0] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[1] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 <E neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 =E state_0 $end
$var wire 6 >E two_bit_sums [5:0] $end
$var wire 8 ?E one_bit_sums [7:0] $end
$var wire 4 @E living_neighbors [3:0] $end
$var reg 1 AE continue_alive $end
$var reg 1 BE enabled_output $end
$var reg 1 CE is_3 $end
$var reg 1 DE reset_output $end
$var reg 1 EE state_d $end
$var reg 1 FE state_q $end
$scope module adder_1_1 $end
$var wire 1 GE a $end
$var wire 1 HE b $end
$var wire 1 IE c_in $end
$var reg 1 JE c_out $end
$var reg 1 KE g $end
$var reg 1 LE p $end
$var reg 1 ME sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 NE a $end
$var wire 1 OE b $end
$var wire 1 PE c_in $end
$var reg 1 QE c_out $end
$var reg 1 RE g $end
$var reg 1 SE p $end
$var reg 1 TE sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 UE a $end
$var wire 1 VE b $end
$var wire 1 WE c_in $end
$var reg 1 XE c_out $end
$var reg 1 YE g $end
$var reg 1 ZE p $end
$var reg 1 [E sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 \E a $end
$var wire 1 ]E b $end
$var wire 1 ^E c_in $end
$var reg 1 _E c_out $end
$var reg 1 `E g $end
$var reg 1 aE p $end
$var reg 1 bE sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 cE a [1:0] $end
$var wire 2 dE b [1:0] $end
$var wire 1 eE c_in $end
$var wire 2 fE sum [1:0] $end
$var wire 3 gE carries [2:0] $end
$var wire 1 hE c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 iE a $end
$var wire 1 jE b $end
$var wire 1 kE c_in $end
$var reg 1 lE c_out $end
$var reg 1 mE g $end
$var reg 1 nE p $end
$var reg 1 oE sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 pE a $end
$var wire 1 qE b $end
$var wire 1 rE c_in $end
$var reg 1 sE c_out $end
$var reg 1 tE g $end
$var reg 1 uE p $end
$var reg 1 vE sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 wE a [1:0] $end
$var wire 2 xE b [1:0] $end
$var wire 1 yE c_in $end
$var wire 2 zE sum [1:0] $end
$var wire 3 {E carries [2:0] $end
$var wire 1 |E c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 }E a $end
$var wire 1 ~E b $end
$var wire 1 !F c_in $end
$var reg 1 "F c_out $end
$var reg 1 #F g $end
$var reg 1 $F p $end
$var reg 1 %F sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 &F a $end
$var wire 1 'F b $end
$var wire 1 (F c_in $end
$var reg 1 )F c_out $end
$var reg 1 *F g $end
$var reg 1 +F p $end
$var reg 1 ,F sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 -F a [2:0] $end
$var wire 3 .F b [2:0] $end
$var wire 1 /F c_in $end
$var wire 3 0F sum [2:0] $end
$var wire 4 1F carries [3:0] $end
$var wire 1 2F c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 3F a $end
$var wire 1 4F b $end
$var wire 1 5F c_in $end
$var reg 1 6F c_out $end
$var reg 1 7F g $end
$var reg 1 8F p $end
$var reg 1 9F sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 :F a $end
$var wire 1 ;F b $end
$var wire 1 <F c_in $end
$var reg 1 =F c_out $end
$var reg 1 >F g $end
$var reg 1 ?F p $end
$var reg 1 @F sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 AF a $end
$var wire 1 BF b $end
$var wire 1 CF c_in $end
$var reg 1 DF c_out $end
$var reg 1 EF g $end
$var reg 1 FF p $end
$var reg 1 GF sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[2] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 HF neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 IF state_0 $end
$var wire 6 JF two_bit_sums [5:0] $end
$var wire 8 KF one_bit_sums [7:0] $end
$var wire 4 LF living_neighbors [3:0] $end
$var reg 1 MF continue_alive $end
$var reg 1 NF enabled_output $end
$var reg 1 OF is_3 $end
$var reg 1 PF reset_output $end
$var reg 1 QF state_d $end
$var reg 1 RF state_q $end
$scope module adder_1_1 $end
$var wire 1 SF a $end
$var wire 1 TF b $end
$var wire 1 UF c_in $end
$var reg 1 VF c_out $end
$var reg 1 WF g $end
$var reg 1 XF p $end
$var reg 1 YF sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 ZF a $end
$var wire 1 [F b $end
$var wire 1 \F c_in $end
$var reg 1 ]F c_out $end
$var reg 1 ^F g $end
$var reg 1 _F p $end
$var reg 1 `F sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 aF a $end
$var wire 1 bF b $end
$var wire 1 cF c_in $end
$var reg 1 dF c_out $end
$var reg 1 eF g $end
$var reg 1 fF p $end
$var reg 1 gF sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 hF a $end
$var wire 1 iF b $end
$var wire 1 jF c_in $end
$var reg 1 kF c_out $end
$var reg 1 lF g $end
$var reg 1 mF p $end
$var reg 1 nF sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 oF a [1:0] $end
$var wire 2 pF b [1:0] $end
$var wire 1 qF c_in $end
$var wire 2 rF sum [1:0] $end
$var wire 3 sF carries [2:0] $end
$var wire 1 tF c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 uF a $end
$var wire 1 vF b $end
$var wire 1 wF c_in $end
$var reg 1 xF c_out $end
$var reg 1 yF g $end
$var reg 1 zF p $end
$var reg 1 {F sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 |F a $end
$var wire 1 }F b $end
$var wire 1 ~F c_in $end
$var reg 1 !G c_out $end
$var reg 1 "G g $end
$var reg 1 #G p $end
$var reg 1 $G sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 %G a [1:0] $end
$var wire 2 &G b [1:0] $end
$var wire 1 'G c_in $end
$var wire 2 (G sum [1:0] $end
$var wire 3 )G carries [2:0] $end
$var wire 1 *G c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 +G a $end
$var wire 1 ,G b $end
$var wire 1 -G c_in $end
$var reg 1 .G c_out $end
$var reg 1 /G g $end
$var reg 1 0G p $end
$var reg 1 1G sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 2G a $end
$var wire 1 3G b $end
$var wire 1 4G c_in $end
$var reg 1 5G c_out $end
$var reg 1 6G g $end
$var reg 1 7G p $end
$var reg 1 8G sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 9G a [2:0] $end
$var wire 3 :G b [2:0] $end
$var wire 1 ;G c_in $end
$var wire 3 <G sum [2:0] $end
$var wire 4 =G carries [3:0] $end
$var wire 1 >G c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 ?G a $end
$var wire 1 @G b $end
$var wire 1 AG c_in $end
$var reg 1 BG c_out $end
$var reg 1 CG g $end
$var reg 1 DG p $end
$var reg 1 EG sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 FG a $end
$var wire 1 GG b $end
$var wire 1 HG c_in $end
$var reg 1 IG c_out $end
$var reg 1 JG g $end
$var reg 1 KG p $end
$var reg 1 LG sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 MG a $end
$var wire 1 NG b $end
$var wire 1 OG c_in $end
$var reg 1 PG c_out $end
$var reg 1 QG g $end
$var reg 1 RG p $end
$var reg 1 SG sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[3] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 TG neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 UG state_0 $end
$var wire 6 VG two_bit_sums [5:0] $end
$var wire 8 WG one_bit_sums [7:0] $end
$var wire 4 XG living_neighbors [3:0] $end
$var reg 1 YG continue_alive $end
$var reg 1 ZG enabled_output $end
$var reg 1 [G is_3 $end
$var reg 1 \G reset_output $end
$var reg 1 ]G state_d $end
$var reg 1 ^G state_q $end
$scope module adder_1_1 $end
$var wire 1 _G a $end
$var wire 1 `G b $end
$var wire 1 aG c_in $end
$var reg 1 bG c_out $end
$var reg 1 cG g $end
$var reg 1 dG p $end
$var reg 1 eG sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 fG a $end
$var wire 1 gG b $end
$var wire 1 hG c_in $end
$var reg 1 iG c_out $end
$var reg 1 jG g $end
$var reg 1 kG p $end
$var reg 1 lG sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 mG a $end
$var wire 1 nG b $end
$var wire 1 oG c_in $end
$var reg 1 pG c_out $end
$var reg 1 qG g $end
$var reg 1 rG p $end
$var reg 1 sG sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 tG a $end
$var wire 1 uG b $end
$var wire 1 vG c_in $end
$var reg 1 wG c_out $end
$var reg 1 xG g $end
$var reg 1 yG p $end
$var reg 1 zG sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 {G a [1:0] $end
$var wire 2 |G b [1:0] $end
$var wire 1 }G c_in $end
$var wire 2 ~G sum [1:0] $end
$var wire 3 !H carries [2:0] $end
$var wire 1 "H c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 #H a $end
$var wire 1 $H b $end
$var wire 1 %H c_in $end
$var reg 1 &H c_out $end
$var reg 1 'H g $end
$var reg 1 (H p $end
$var reg 1 )H sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 *H a $end
$var wire 1 +H b $end
$var wire 1 ,H c_in $end
$var reg 1 -H c_out $end
$var reg 1 .H g $end
$var reg 1 /H p $end
$var reg 1 0H sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 1H a [1:0] $end
$var wire 2 2H b [1:0] $end
$var wire 1 3H c_in $end
$var wire 2 4H sum [1:0] $end
$var wire 3 5H carries [2:0] $end
$var wire 1 6H c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 7H a $end
$var wire 1 8H b $end
$var wire 1 9H c_in $end
$var reg 1 :H c_out $end
$var reg 1 ;H g $end
$var reg 1 <H p $end
$var reg 1 =H sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 >H a $end
$var wire 1 ?H b $end
$var wire 1 @H c_in $end
$var reg 1 AH c_out $end
$var reg 1 BH g $end
$var reg 1 CH p $end
$var reg 1 DH sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 EH a [2:0] $end
$var wire 3 FH b [2:0] $end
$var wire 1 GH c_in $end
$var wire 3 HH sum [2:0] $end
$var wire 4 IH carries [3:0] $end
$var wire 1 JH c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 KH a $end
$var wire 1 LH b $end
$var wire 1 MH c_in $end
$var reg 1 NH c_out $end
$var reg 1 OH g $end
$var reg 1 PH p $end
$var reg 1 QH sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 RH a $end
$var wire 1 SH b $end
$var wire 1 TH c_in $end
$var reg 1 UH c_out $end
$var reg 1 VH g $end
$var reg 1 WH p $end
$var reg 1 XH sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 YH a $end
$var wire 1 ZH b $end
$var wire 1 [H c_in $end
$var reg 1 \H c_out $end
$var reg 1 ]H g $end
$var reg 1 ^H p $end
$var reg 1 _H sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[4] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 `H neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 aH state_0 $end
$var wire 6 bH two_bit_sums [5:0] $end
$var wire 8 cH one_bit_sums [7:0] $end
$var wire 4 dH living_neighbors [3:0] $end
$var reg 1 eH continue_alive $end
$var reg 1 fH enabled_output $end
$var reg 1 gH is_3 $end
$var reg 1 hH reset_output $end
$var reg 1 iH state_d $end
$var reg 1 jH state_q $end
$scope module adder_1_1 $end
$var wire 1 kH a $end
$var wire 1 lH b $end
$var wire 1 mH c_in $end
$var reg 1 nH c_out $end
$var reg 1 oH g $end
$var reg 1 pH p $end
$var reg 1 qH sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 rH a $end
$var wire 1 sH b $end
$var wire 1 tH c_in $end
$var reg 1 uH c_out $end
$var reg 1 vH g $end
$var reg 1 wH p $end
$var reg 1 xH sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 yH a $end
$var wire 1 zH b $end
$var wire 1 {H c_in $end
$var reg 1 |H c_out $end
$var reg 1 }H g $end
$var reg 1 ~H p $end
$var reg 1 !I sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 "I a $end
$var wire 1 #I b $end
$var wire 1 $I c_in $end
$var reg 1 %I c_out $end
$var reg 1 &I g $end
$var reg 1 'I p $end
$var reg 1 (I sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 )I a [1:0] $end
$var wire 2 *I b [1:0] $end
$var wire 1 +I c_in $end
$var wire 2 ,I sum [1:0] $end
$var wire 3 -I carries [2:0] $end
$var wire 1 .I c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 /I a $end
$var wire 1 0I b $end
$var wire 1 1I c_in $end
$var reg 1 2I c_out $end
$var reg 1 3I g $end
$var reg 1 4I p $end
$var reg 1 5I sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 6I a $end
$var wire 1 7I b $end
$var wire 1 8I c_in $end
$var reg 1 9I c_out $end
$var reg 1 :I g $end
$var reg 1 ;I p $end
$var reg 1 <I sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 =I a [1:0] $end
$var wire 2 >I b [1:0] $end
$var wire 1 ?I c_in $end
$var wire 2 @I sum [1:0] $end
$var wire 3 AI carries [2:0] $end
$var wire 1 BI c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 CI a $end
$var wire 1 DI b $end
$var wire 1 EI c_in $end
$var reg 1 FI c_out $end
$var reg 1 GI g $end
$var reg 1 HI p $end
$var reg 1 II sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 JI a $end
$var wire 1 KI b $end
$var wire 1 LI c_in $end
$var reg 1 MI c_out $end
$var reg 1 NI g $end
$var reg 1 OI p $end
$var reg 1 PI sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 QI a [2:0] $end
$var wire 3 RI b [2:0] $end
$var wire 1 SI c_in $end
$var wire 3 TI sum [2:0] $end
$var wire 4 UI carries [3:0] $end
$var wire 1 VI c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 WI a $end
$var wire 1 XI b $end
$var wire 1 YI c_in $end
$var reg 1 ZI c_out $end
$var reg 1 [I g $end
$var reg 1 \I p $end
$var reg 1 ]I sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 ^I a $end
$var wire 1 _I b $end
$var wire 1 `I c_in $end
$var reg 1 aI c_out $end
$var reg 1 bI g $end
$var reg 1 cI p $end
$var reg 1 dI sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 eI a $end
$var wire 1 fI b $end
$var wire 1 gI c_in $end
$var reg 1 hI c_out $end
$var reg 1 iI g $end
$var reg 1 jI p $end
$var reg 1 kI sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[5] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 lI neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 mI state_0 $end
$var wire 6 nI two_bit_sums [5:0] $end
$var wire 8 oI one_bit_sums [7:0] $end
$var wire 4 pI living_neighbors [3:0] $end
$var reg 1 qI continue_alive $end
$var reg 1 rI enabled_output $end
$var reg 1 sI is_3 $end
$var reg 1 tI reset_output $end
$var reg 1 uI state_d $end
$var reg 1 vI state_q $end
$scope module adder_1_1 $end
$var wire 1 wI a $end
$var wire 1 xI b $end
$var wire 1 yI c_in $end
$var reg 1 zI c_out $end
$var reg 1 {I g $end
$var reg 1 |I p $end
$var reg 1 }I sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 ~I a $end
$var wire 1 !J b $end
$var wire 1 "J c_in $end
$var reg 1 #J c_out $end
$var reg 1 $J g $end
$var reg 1 %J p $end
$var reg 1 &J sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 'J a $end
$var wire 1 (J b $end
$var wire 1 )J c_in $end
$var reg 1 *J c_out $end
$var reg 1 +J g $end
$var reg 1 ,J p $end
$var reg 1 -J sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 .J a $end
$var wire 1 /J b $end
$var wire 1 0J c_in $end
$var reg 1 1J c_out $end
$var reg 1 2J g $end
$var reg 1 3J p $end
$var reg 1 4J sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 5J a [1:0] $end
$var wire 2 6J b [1:0] $end
$var wire 1 7J c_in $end
$var wire 2 8J sum [1:0] $end
$var wire 3 9J carries [2:0] $end
$var wire 1 :J c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 ;J a $end
$var wire 1 <J b $end
$var wire 1 =J c_in $end
$var reg 1 >J c_out $end
$var reg 1 ?J g $end
$var reg 1 @J p $end
$var reg 1 AJ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 BJ a $end
$var wire 1 CJ b $end
$var wire 1 DJ c_in $end
$var reg 1 EJ c_out $end
$var reg 1 FJ g $end
$var reg 1 GJ p $end
$var reg 1 HJ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 IJ a [1:0] $end
$var wire 2 JJ b [1:0] $end
$var wire 1 KJ c_in $end
$var wire 2 LJ sum [1:0] $end
$var wire 3 MJ carries [2:0] $end
$var wire 1 NJ c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 OJ a $end
$var wire 1 PJ b $end
$var wire 1 QJ c_in $end
$var reg 1 RJ c_out $end
$var reg 1 SJ g $end
$var reg 1 TJ p $end
$var reg 1 UJ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 VJ a $end
$var wire 1 WJ b $end
$var wire 1 XJ c_in $end
$var reg 1 YJ c_out $end
$var reg 1 ZJ g $end
$var reg 1 [J p $end
$var reg 1 \J sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 ]J a [2:0] $end
$var wire 3 ^J b [2:0] $end
$var wire 1 _J c_in $end
$var wire 3 `J sum [2:0] $end
$var wire 4 aJ carries [3:0] $end
$var wire 1 bJ c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 cJ a $end
$var wire 1 dJ b $end
$var wire 1 eJ c_in $end
$var reg 1 fJ c_out $end
$var reg 1 gJ g $end
$var reg 1 hJ p $end
$var reg 1 iJ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 jJ a $end
$var wire 1 kJ b $end
$var wire 1 lJ c_in $end
$var reg 1 mJ c_out $end
$var reg 1 nJ g $end
$var reg 1 oJ p $end
$var reg 1 pJ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 qJ a $end
$var wire 1 rJ b $end
$var wire 1 sJ c_in $end
$var reg 1 tJ c_out $end
$var reg 1 uJ g $end
$var reg 1 vJ p $end
$var reg 1 wJ sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[6] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 xJ neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 yJ state_0 $end
$var wire 6 zJ two_bit_sums [5:0] $end
$var wire 8 {J one_bit_sums [7:0] $end
$var wire 4 |J living_neighbors [3:0] $end
$var reg 1 }J continue_alive $end
$var reg 1 ~J enabled_output $end
$var reg 1 !K is_3 $end
$var reg 1 "K reset_output $end
$var reg 1 #K state_d $end
$var reg 1 $K state_q $end
$scope module adder_1_1 $end
$var wire 1 %K a $end
$var wire 1 &K b $end
$var wire 1 'K c_in $end
$var reg 1 (K c_out $end
$var reg 1 )K g $end
$var reg 1 *K p $end
$var reg 1 +K sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 ,K a $end
$var wire 1 -K b $end
$var wire 1 .K c_in $end
$var reg 1 /K c_out $end
$var reg 1 0K g $end
$var reg 1 1K p $end
$var reg 1 2K sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 3K a $end
$var wire 1 4K b $end
$var wire 1 5K c_in $end
$var reg 1 6K c_out $end
$var reg 1 7K g $end
$var reg 1 8K p $end
$var reg 1 9K sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 :K a $end
$var wire 1 ;K b $end
$var wire 1 <K c_in $end
$var reg 1 =K c_out $end
$var reg 1 >K g $end
$var reg 1 ?K p $end
$var reg 1 @K sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 AK a [1:0] $end
$var wire 2 BK b [1:0] $end
$var wire 1 CK c_in $end
$var wire 2 DK sum [1:0] $end
$var wire 3 EK carries [2:0] $end
$var wire 1 FK c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 GK a $end
$var wire 1 HK b $end
$var wire 1 IK c_in $end
$var reg 1 JK c_out $end
$var reg 1 KK g $end
$var reg 1 LK p $end
$var reg 1 MK sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 NK a $end
$var wire 1 OK b $end
$var wire 1 PK c_in $end
$var reg 1 QK c_out $end
$var reg 1 RK g $end
$var reg 1 SK p $end
$var reg 1 TK sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 UK a [1:0] $end
$var wire 2 VK b [1:0] $end
$var wire 1 WK c_in $end
$var wire 2 XK sum [1:0] $end
$var wire 3 YK carries [2:0] $end
$var wire 1 ZK c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 [K a $end
$var wire 1 \K b $end
$var wire 1 ]K c_in $end
$var reg 1 ^K c_out $end
$var reg 1 _K g $end
$var reg 1 `K p $end
$var reg 1 aK sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 bK a $end
$var wire 1 cK b $end
$var wire 1 dK c_in $end
$var reg 1 eK c_out $end
$var reg 1 fK g $end
$var reg 1 gK p $end
$var reg 1 hK sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 iK a [2:0] $end
$var wire 3 jK b [2:0] $end
$var wire 1 kK c_in $end
$var wire 3 lK sum [2:0] $end
$var wire 4 mK carries [3:0] $end
$var wire 1 nK c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 oK a $end
$var wire 1 pK b $end
$var wire 1 qK c_in $end
$var reg 1 rK c_out $end
$var reg 1 sK g $end
$var reg 1 tK p $end
$var reg 1 uK sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 vK a $end
$var wire 1 wK b $end
$var wire 1 xK c_in $end
$var reg 1 yK c_out $end
$var reg 1 zK g $end
$var reg 1 {K p $end
$var reg 1 |K sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 }K a $end
$var wire 1 ~K b $end
$var wire 1 !L c_in $end
$var reg 1 "L c_out $end
$var reg 1 #L g $end
$var reg 1 $L p $end
$var reg 1 %L sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[7] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 &L neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 'L state_0 $end
$var wire 6 (L two_bit_sums [5:0] $end
$var wire 8 )L one_bit_sums [7:0] $end
$var wire 4 *L living_neighbors [3:0] $end
$var reg 1 +L continue_alive $end
$var reg 1 ,L enabled_output $end
$var reg 1 -L is_3 $end
$var reg 1 .L reset_output $end
$var reg 1 /L state_d $end
$var reg 1 0L state_q $end
$scope module adder_1_1 $end
$var wire 1 1L a $end
$var wire 1 2L b $end
$var wire 1 3L c_in $end
$var reg 1 4L c_out $end
$var reg 1 5L g $end
$var reg 1 6L p $end
$var reg 1 7L sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 8L a $end
$var wire 1 9L b $end
$var wire 1 :L c_in $end
$var reg 1 ;L c_out $end
$var reg 1 <L g $end
$var reg 1 =L p $end
$var reg 1 >L sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 ?L a $end
$var wire 1 @L b $end
$var wire 1 AL c_in $end
$var reg 1 BL c_out $end
$var reg 1 CL g $end
$var reg 1 DL p $end
$var reg 1 EL sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 FL a $end
$var wire 1 GL b $end
$var wire 1 HL c_in $end
$var reg 1 IL c_out $end
$var reg 1 JL g $end
$var reg 1 KL p $end
$var reg 1 LL sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 ML a [1:0] $end
$var wire 2 NL b [1:0] $end
$var wire 1 OL c_in $end
$var wire 2 PL sum [1:0] $end
$var wire 3 QL carries [2:0] $end
$var wire 1 RL c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 SL a $end
$var wire 1 TL b $end
$var wire 1 UL c_in $end
$var reg 1 VL c_out $end
$var reg 1 WL g $end
$var reg 1 XL p $end
$var reg 1 YL sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 ZL a $end
$var wire 1 [L b $end
$var wire 1 \L c_in $end
$var reg 1 ]L c_out $end
$var reg 1 ^L g $end
$var reg 1 _L p $end
$var reg 1 `L sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 aL a [1:0] $end
$var wire 2 bL b [1:0] $end
$var wire 1 cL c_in $end
$var wire 2 dL sum [1:0] $end
$var wire 3 eL carries [2:0] $end
$var wire 1 fL c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 gL a $end
$var wire 1 hL b $end
$var wire 1 iL c_in $end
$var reg 1 jL c_out $end
$var reg 1 kL g $end
$var reg 1 lL p $end
$var reg 1 mL sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 nL a $end
$var wire 1 oL b $end
$var wire 1 pL c_in $end
$var reg 1 qL c_out $end
$var reg 1 rL g $end
$var reg 1 sL p $end
$var reg 1 tL sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 uL a [2:0] $end
$var wire 3 vL b [2:0] $end
$var wire 1 wL c_in $end
$var wire 3 xL sum [2:0] $end
$var wire 4 yL carries [3:0] $end
$var wire 1 zL c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 {L a $end
$var wire 1 |L b $end
$var wire 1 }L c_in $end
$var reg 1 ~L c_out $end
$var reg 1 !M g $end
$var reg 1 "M p $end
$var reg 1 #M sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 $M a $end
$var wire 1 %M b $end
$var wire 1 &M c_in $end
$var reg 1 'M c_out $end
$var reg 1 (M g $end
$var reg 1 )M p $end
$var reg 1 *M sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 +M a $end
$var wire 1 ,M b $end
$var wire 1 -M c_in $end
$var reg 1 .M c_out $end
$var reg 1 /M g $end
$var reg 1 0M p $end
$var reg 1 1M sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[8] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 2M neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 3M state_0 $end
$var wire 6 4M two_bit_sums [5:0] $end
$var wire 8 5M one_bit_sums [7:0] $end
$var wire 4 6M living_neighbors [3:0] $end
$var reg 1 7M continue_alive $end
$var reg 1 8M enabled_output $end
$var reg 1 9M is_3 $end
$var reg 1 :M reset_output $end
$var reg 1 ;M state_d $end
$var reg 1 <M state_q $end
$scope module adder_1_1 $end
$var wire 1 =M a $end
$var wire 1 >M b $end
$var wire 1 ?M c_in $end
$var reg 1 @M c_out $end
$var reg 1 AM g $end
$var reg 1 BM p $end
$var reg 1 CM sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 DM a $end
$var wire 1 EM b $end
$var wire 1 FM c_in $end
$var reg 1 GM c_out $end
$var reg 1 HM g $end
$var reg 1 IM p $end
$var reg 1 JM sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 KM a $end
$var wire 1 LM b $end
$var wire 1 MM c_in $end
$var reg 1 NM c_out $end
$var reg 1 OM g $end
$var reg 1 PM p $end
$var reg 1 QM sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 RM a $end
$var wire 1 SM b $end
$var wire 1 TM c_in $end
$var reg 1 UM c_out $end
$var reg 1 VM g $end
$var reg 1 WM p $end
$var reg 1 XM sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 YM a [1:0] $end
$var wire 2 ZM b [1:0] $end
$var wire 1 [M c_in $end
$var wire 2 \M sum [1:0] $end
$var wire 3 ]M carries [2:0] $end
$var wire 1 ^M c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 _M a $end
$var wire 1 `M b $end
$var wire 1 aM c_in $end
$var reg 1 bM c_out $end
$var reg 1 cM g $end
$var reg 1 dM p $end
$var reg 1 eM sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 fM a $end
$var wire 1 gM b $end
$var wire 1 hM c_in $end
$var reg 1 iM c_out $end
$var reg 1 jM g $end
$var reg 1 kM p $end
$var reg 1 lM sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 mM a [1:0] $end
$var wire 2 nM b [1:0] $end
$var wire 1 oM c_in $end
$var wire 2 pM sum [1:0] $end
$var wire 3 qM carries [2:0] $end
$var wire 1 rM c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 sM a $end
$var wire 1 tM b $end
$var wire 1 uM c_in $end
$var reg 1 vM c_out $end
$var reg 1 wM g $end
$var reg 1 xM p $end
$var reg 1 yM sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 zM a $end
$var wire 1 {M b $end
$var wire 1 |M c_in $end
$var reg 1 }M c_out $end
$var reg 1 ~M g $end
$var reg 1 !N p $end
$var reg 1 "N sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 #N a [2:0] $end
$var wire 3 $N b [2:0] $end
$var wire 1 %N c_in $end
$var wire 3 &N sum [2:0] $end
$var wire 4 'N carries [3:0] $end
$var wire 1 (N c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 )N a $end
$var wire 1 *N b $end
$var wire 1 +N c_in $end
$var reg 1 ,N c_out $end
$var reg 1 -N g $end
$var reg 1 .N p $end
$var reg 1 /N sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 0N a $end
$var wire 1 1N b $end
$var wire 1 2N c_in $end
$var reg 1 3N c_out $end
$var reg 1 4N g $end
$var reg 1 5N p $end
$var reg 1 6N sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 7N a $end
$var wire 1 8N b $end
$var wire 1 9N c_in $end
$var reg 1 :N c_out $end
$var reg 1 ;N g $end
$var reg 1 <N p $end
$var reg 1 =N sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[9] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_x[6] $end
$scope begin cells_y[0] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[1] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 >N neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 ?N state_0 $end
$var wire 6 @N two_bit_sums [5:0] $end
$var wire 8 AN one_bit_sums [7:0] $end
$var wire 4 BN living_neighbors [3:0] $end
$var reg 1 CN continue_alive $end
$var reg 1 DN enabled_output $end
$var reg 1 EN is_3 $end
$var reg 1 FN reset_output $end
$var reg 1 GN state_d $end
$var reg 1 HN state_q $end
$scope module adder_1_1 $end
$var wire 1 IN a $end
$var wire 1 JN b $end
$var wire 1 KN c_in $end
$var reg 1 LN c_out $end
$var reg 1 MN g $end
$var reg 1 NN p $end
$var reg 1 ON sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 PN a $end
$var wire 1 QN b $end
$var wire 1 RN c_in $end
$var reg 1 SN c_out $end
$var reg 1 TN g $end
$var reg 1 UN p $end
$var reg 1 VN sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 WN a $end
$var wire 1 XN b $end
$var wire 1 YN c_in $end
$var reg 1 ZN c_out $end
$var reg 1 [N g $end
$var reg 1 \N p $end
$var reg 1 ]N sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 ^N a $end
$var wire 1 _N b $end
$var wire 1 `N c_in $end
$var reg 1 aN c_out $end
$var reg 1 bN g $end
$var reg 1 cN p $end
$var reg 1 dN sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 eN a [1:0] $end
$var wire 2 fN b [1:0] $end
$var wire 1 gN c_in $end
$var wire 2 hN sum [1:0] $end
$var wire 3 iN carries [2:0] $end
$var wire 1 jN c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 kN a $end
$var wire 1 lN b $end
$var wire 1 mN c_in $end
$var reg 1 nN c_out $end
$var reg 1 oN g $end
$var reg 1 pN p $end
$var reg 1 qN sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 rN a $end
$var wire 1 sN b $end
$var wire 1 tN c_in $end
$var reg 1 uN c_out $end
$var reg 1 vN g $end
$var reg 1 wN p $end
$var reg 1 xN sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 yN a [1:0] $end
$var wire 2 zN b [1:0] $end
$var wire 1 {N c_in $end
$var wire 2 |N sum [1:0] $end
$var wire 3 }N carries [2:0] $end
$var wire 1 ~N c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 !O a $end
$var wire 1 "O b $end
$var wire 1 #O c_in $end
$var reg 1 $O c_out $end
$var reg 1 %O g $end
$var reg 1 &O p $end
$var reg 1 'O sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 (O a $end
$var wire 1 )O b $end
$var wire 1 *O c_in $end
$var reg 1 +O c_out $end
$var reg 1 ,O g $end
$var reg 1 -O p $end
$var reg 1 .O sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 /O a [2:0] $end
$var wire 3 0O b [2:0] $end
$var wire 1 1O c_in $end
$var wire 3 2O sum [2:0] $end
$var wire 4 3O carries [3:0] $end
$var wire 1 4O c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 5O a $end
$var wire 1 6O b $end
$var wire 1 7O c_in $end
$var reg 1 8O c_out $end
$var reg 1 9O g $end
$var reg 1 :O p $end
$var reg 1 ;O sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 <O a $end
$var wire 1 =O b $end
$var wire 1 >O c_in $end
$var reg 1 ?O c_out $end
$var reg 1 @O g $end
$var reg 1 AO p $end
$var reg 1 BO sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 CO a $end
$var wire 1 DO b $end
$var wire 1 EO c_in $end
$var reg 1 FO c_out $end
$var reg 1 GO g $end
$var reg 1 HO p $end
$var reg 1 IO sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[2] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 JO neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 KO state_0 $end
$var wire 6 LO two_bit_sums [5:0] $end
$var wire 8 MO one_bit_sums [7:0] $end
$var wire 4 NO living_neighbors [3:0] $end
$var reg 1 OO continue_alive $end
$var reg 1 PO enabled_output $end
$var reg 1 QO is_3 $end
$var reg 1 RO reset_output $end
$var reg 1 SO state_d $end
$var reg 1 TO state_q $end
$scope module adder_1_1 $end
$var wire 1 UO a $end
$var wire 1 VO b $end
$var wire 1 WO c_in $end
$var reg 1 XO c_out $end
$var reg 1 YO g $end
$var reg 1 ZO p $end
$var reg 1 [O sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 \O a $end
$var wire 1 ]O b $end
$var wire 1 ^O c_in $end
$var reg 1 _O c_out $end
$var reg 1 `O g $end
$var reg 1 aO p $end
$var reg 1 bO sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 cO a $end
$var wire 1 dO b $end
$var wire 1 eO c_in $end
$var reg 1 fO c_out $end
$var reg 1 gO g $end
$var reg 1 hO p $end
$var reg 1 iO sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 jO a $end
$var wire 1 kO b $end
$var wire 1 lO c_in $end
$var reg 1 mO c_out $end
$var reg 1 nO g $end
$var reg 1 oO p $end
$var reg 1 pO sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 qO a [1:0] $end
$var wire 2 rO b [1:0] $end
$var wire 1 sO c_in $end
$var wire 2 tO sum [1:0] $end
$var wire 3 uO carries [2:0] $end
$var wire 1 vO c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 wO a $end
$var wire 1 xO b $end
$var wire 1 yO c_in $end
$var reg 1 zO c_out $end
$var reg 1 {O g $end
$var reg 1 |O p $end
$var reg 1 }O sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 ~O a $end
$var wire 1 !P b $end
$var wire 1 "P c_in $end
$var reg 1 #P c_out $end
$var reg 1 $P g $end
$var reg 1 %P p $end
$var reg 1 &P sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 'P a [1:0] $end
$var wire 2 (P b [1:0] $end
$var wire 1 )P c_in $end
$var wire 2 *P sum [1:0] $end
$var wire 3 +P carries [2:0] $end
$var wire 1 ,P c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 -P a $end
$var wire 1 .P b $end
$var wire 1 /P c_in $end
$var reg 1 0P c_out $end
$var reg 1 1P g $end
$var reg 1 2P p $end
$var reg 1 3P sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 4P a $end
$var wire 1 5P b $end
$var wire 1 6P c_in $end
$var reg 1 7P c_out $end
$var reg 1 8P g $end
$var reg 1 9P p $end
$var reg 1 :P sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 ;P a [2:0] $end
$var wire 3 <P b [2:0] $end
$var wire 1 =P c_in $end
$var wire 3 >P sum [2:0] $end
$var wire 4 ?P carries [3:0] $end
$var wire 1 @P c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 AP a $end
$var wire 1 BP b $end
$var wire 1 CP c_in $end
$var reg 1 DP c_out $end
$var reg 1 EP g $end
$var reg 1 FP p $end
$var reg 1 GP sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 HP a $end
$var wire 1 IP b $end
$var wire 1 JP c_in $end
$var reg 1 KP c_out $end
$var reg 1 LP g $end
$var reg 1 MP p $end
$var reg 1 NP sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 OP a $end
$var wire 1 PP b $end
$var wire 1 QP c_in $end
$var reg 1 RP c_out $end
$var reg 1 SP g $end
$var reg 1 TP p $end
$var reg 1 UP sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[3] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 VP neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 WP state_0 $end
$var wire 6 XP two_bit_sums [5:0] $end
$var wire 8 YP one_bit_sums [7:0] $end
$var wire 4 ZP living_neighbors [3:0] $end
$var reg 1 [P continue_alive $end
$var reg 1 \P enabled_output $end
$var reg 1 ]P is_3 $end
$var reg 1 ^P reset_output $end
$var reg 1 _P state_d $end
$var reg 1 `P state_q $end
$scope module adder_1_1 $end
$var wire 1 aP a $end
$var wire 1 bP b $end
$var wire 1 cP c_in $end
$var reg 1 dP c_out $end
$var reg 1 eP g $end
$var reg 1 fP p $end
$var reg 1 gP sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 hP a $end
$var wire 1 iP b $end
$var wire 1 jP c_in $end
$var reg 1 kP c_out $end
$var reg 1 lP g $end
$var reg 1 mP p $end
$var reg 1 nP sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 oP a $end
$var wire 1 pP b $end
$var wire 1 qP c_in $end
$var reg 1 rP c_out $end
$var reg 1 sP g $end
$var reg 1 tP p $end
$var reg 1 uP sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 vP a $end
$var wire 1 wP b $end
$var wire 1 xP c_in $end
$var reg 1 yP c_out $end
$var reg 1 zP g $end
$var reg 1 {P p $end
$var reg 1 |P sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 }P a [1:0] $end
$var wire 2 ~P b [1:0] $end
$var wire 1 !Q c_in $end
$var wire 2 "Q sum [1:0] $end
$var wire 3 #Q carries [2:0] $end
$var wire 1 $Q c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 %Q a $end
$var wire 1 &Q b $end
$var wire 1 'Q c_in $end
$var reg 1 (Q c_out $end
$var reg 1 )Q g $end
$var reg 1 *Q p $end
$var reg 1 +Q sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 ,Q a $end
$var wire 1 -Q b $end
$var wire 1 .Q c_in $end
$var reg 1 /Q c_out $end
$var reg 1 0Q g $end
$var reg 1 1Q p $end
$var reg 1 2Q sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 3Q a [1:0] $end
$var wire 2 4Q b [1:0] $end
$var wire 1 5Q c_in $end
$var wire 2 6Q sum [1:0] $end
$var wire 3 7Q carries [2:0] $end
$var wire 1 8Q c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 9Q a $end
$var wire 1 :Q b $end
$var wire 1 ;Q c_in $end
$var reg 1 <Q c_out $end
$var reg 1 =Q g $end
$var reg 1 >Q p $end
$var reg 1 ?Q sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 @Q a $end
$var wire 1 AQ b $end
$var wire 1 BQ c_in $end
$var reg 1 CQ c_out $end
$var reg 1 DQ g $end
$var reg 1 EQ p $end
$var reg 1 FQ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 GQ a [2:0] $end
$var wire 3 HQ b [2:0] $end
$var wire 1 IQ c_in $end
$var wire 3 JQ sum [2:0] $end
$var wire 4 KQ carries [3:0] $end
$var wire 1 LQ c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 MQ a $end
$var wire 1 NQ b $end
$var wire 1 OQ c_in $end
$var reg 1 PQ c_out $end
$var reg 1 QQ g $end
$var reg 1 RQ p $end
$var reg 1 SQ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 TQ a $end
$var wire 1 UQ b $end
$var wire 1 VQ c_in $end
$var reg 1 WQ c_out $end
$var reg 1 XQ g $end
$var reg 1 YQ p $end
$var reg 1 ZQ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 [Q a $end
$var wire 1 \Q b $end
$var wire 1 ]Q c_in $end
$var reg 1 ^Q c_out $end
$var reg 1 _Q g $end
$var reg 1 `Q p $end
$var reg 1 aQ sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[4] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 bQ neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 cQ state_0 $end
$var wire 6 dQ two_bit_sums [5:0] $end
$var wire 8 eQ one_bit_sums [7:0] $end
$var wire 4 fQ living_neighbors [3:0] $end
$var reg 1 gQ continue_alive $end
$var reg 1 hQ enabled_output $end
$var reg 1 iQ is_3 $end
$var reg 1 jQ reset_output $end
$var reg 1 kQ state_d $end
$var reg 1 lQ state_q $end
$scope module adder_1_1 $end
$var wire 1 mQ a $end
$var wire 1 nQ b $end
$var wire 1 oQ c_in $end
$var reg 1 pQ c_out $end
$var reg 1 qQ g $end
$var reg 1 rQ p $end
$var reg 1 sQ sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 tQ a $end
$var wire 1 uQ b $end
$var wire 1 vQ c_in $end
$var reg 1 wQ c_out $end
$var reg 1 xQ g $end
$var reg 1 yQ p $end
$var reg 1 zQ sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 {Q a $end
$var wire 1 |Q b $end
$var wire 1 }Q c_in $end
$var reg 1 ~Q c_out $end
$var reg 1 !R g $end
$var reg 1 "R p $end
$var reg 1 #R sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 $R a $end
$var wire 1 %R b $end
$var wire 1 &R c_in $end
$var reg 1 'R c_out $end
$var reg 1 (R g $end
$var reg 1 )R p $end
$var reg 1 *R sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 +R a [1:0] $end
$var wire 2 ,R b [1:0] $end
$var wire 1 -R c_in $end
$var wire 2 .R sum [1:0] $end
$var wire 3 /R carries [2:0] $end
$var wire 1 0R c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 1R a $end
$var wire 1 2R b $end
$var wire 1 3R c_in $end
$var reg 1 4R c_out $end
$var reg 1 5R g $end
$var reg 1 6R p $end
$var reg 1 7R sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 8R a $end
$var wire 1 9R b $end
$var wire 1 :R c_in $end
$var reg 1 ;R c_out $end
$var reg 1 <R g $end
$var reg 1 =R p $end
$var reg 1 >R sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 ?R a [1:0] $end
$var wire 2 @R b [1:0] $end
$var wire 1 AR c_in $end
$var wire 2 BR sum [1:0] $end
$var wire 3 CR carries [2:0] $end
$var wire 1 DR c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 ER a $end
$var wire 1 FR b $end
$var wire 1 GR c_in $end
$var reg 1 HR c_out $end
$var reg 1 IR g $end
$var reg 1 JR p $end
$var reg 1 KR sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 LR a $end
$var wire 1 MR b $end
$var wire 1 NR c_in $end
$var reg 1 OR c_out $end
$var reg 1 PR g $end
$var reg 1 QR p $end
$var reg 1 RR sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 SR a [2:0] $end
$var wire 3 TR b [2:0] $end
$var wire 1 UR c_in $end
$var wire 3 VR sum [2:0] $end
$var wire 4 WR carries [3:0] $end
$var wire 1 XR c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 YR a $end
$var wire 1 ZR b $end
$var wire 1 [R c_in $end
$var reg 1 \R c_out $end
$var reg 1 ]R g $end
$var reg 1 ^R p $end
$var reg 1 _R sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 `R a $end
$var wire 1 aR b $end
$var wire 1 bR c_in $end
$var reg 1 cR c_out $end
$var reg 1 dR g $end
$var reg 1 eR p $end
$var reg 1 fR sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 gR a $end
$var wire 1 hR b $end
$var wire 1 iR c_in $end
$var reg 1 jR c_out $end
$var reg 1 kR g $end
$var reg 1 lR p $end
$var reg 1 mR sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[5] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 nR neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 oR state_0 $end
$var wire 6 pR two_bit_sums [5:0] $end
$var wire 8 qR one_bit_sums [7:0] $end
$var wire 4 rR living_neighbors [3:0] $end
$var reg 1 sR continue_alive $end
$var reg 1 tR enabled_output $end
$var reg 1 uR is_3 $end
$var reg 1 vR reset_output $end
$var reg 1 wR state_d $end
$var reg 1 xR state_q $end
$scope module adder_1_1 $end
$var wire 1 yR a $end
$var wire 1 zR b $end
$var wire 1 {R c_in $end
$var reg 1 |R c_out $end
$var reg 1 }R g $end
$var reg 1 ~R p $end
$var reg 1 !S sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 "S a $end
$var wire 1 #S b $end
$var wire 1 $S c_in $end
$var reg 1 %S c_out $end
$var reg 1 &S g $end
$var reg 1 'S p $end
$var reg 1 (S sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 )S a $end
$var wire 1 *S b $end
$var wire 1 +S c_in $end
$var reg 1 ,S c_out $end
$var reg 1 -S g $end
$var reg 1 .S p $end
$var reg 1 /S sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 0S a $end
$var wire 1 1S b $end
$var wire 1 2S c_in $end
$var reg 1 3S c_out $end
$var reg 1 4S g $end
$var reg 1 5S p $end
$var reg 1 6S sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 7S a [1:0] $end
$var wire 2 8S b [1:0] $end
$var wire 1 9S c_in $end
$var wire 2 :S sum [1:0] $end
$var wire 3 ;S carries [2:0] $end
$var wire 1 <S c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 =S a $end
$var wire 1 >S b $end
$var wire 1 ?S c_in $end
$var reg 1 @S c_out $end
$var reg 1 AS g $end
$var reg 1 BS p $end
$var reg 1 CS sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 DS a $end
$var wire 1 ES b $end
$var wire 1 FS c_in $end
$var reg 1 GS c_out $end
$var reg 1 HS g $end
$var reg 1 IS p $end
$var reg 1 JS sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 KS a [1:0] $end
$var wire 2 LS b [1:0] $end
$var wire 1 MS c_in $end
$var wire 2 NS sum [1:0] $end
$var wire 3 OS carries [2:0] $end
$var wire 1 PS c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 QS a $end
$var wire 1 RS b $end
$var wire 1 SS c_in $end
$var reg 1 TS c_out $end
$var reg 1 US g $end
$var reg 1 VS p $end
$var reg 1 WS sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 XS a $end
$var wire 1 YS b $end
$var wire 1 ZS c_in $end
$var reg 1 [S c_out $end
$var reg 1 \S g $end
$var reg 1 ]S p $end
$var reg 1 ^S sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 _S a [2:0] $end
$var wire 3 `S b [2:0] $end
$var wire 1 aS c_in $end
$var wire 3 bS sum [2:0] $end
$var wire 4 cS carries [3:0] $end
$var wire 1 dS c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 eS a $end
$var wire 1 fS b $end
$var wire 1 gS c_in $end
$var reg 1 hS c_out $end
$var reg 1 iS g $end
$var reg 1 jS p $end
$var reg 1 kS sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 lS a $end
$var wire 1 mS b $end
$var wire 1 nS c_in $end
$var reg 1 oS c_out $end
$var reg 1 pS g $end
$var reg 1 qS p $end
$var reg 1 rS sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 sS a $end
$var wire 1 tS b $end
$var wire 1 uS c_in $end
$var reg 1 vS c_out $end
$var reg 1 wS g $end
$var reg 1 xS p $end
$var reg 1 yS sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[6] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 zS neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 {S state_0 $end
$var wire 6 |S two_bit_sums [5:0] $end
$var wire 8 }S one_bit_sums [7:0] $end
$var wire 4 ~S living_neighbors [3:0] $end
$var reg 1 !T continue_alive $end
$var reg 1 "T enabled_output $end
$var reg 1 #T is_3 $end
$var reg 1 $T reset_output $end
$var reg 1 %T state_d $end
$var reg 1 &T state_q $end
$scope module adder_1_1 $end
$var wire 1 'T a $end
$var wire 1 (T b $end
$var wire 1 )T c_in $end
$var reg 1 *T c_out $end
$var reg 1 +T g $end
$var reg 1 ,T p $end
$var reg 1 -T sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 .T a $end
$var wire 1 /T b $end
$var wire 1 0T c_in $end
$var reg 1 1T c_out $end
$var reg 1 2T g $end
$var reg 1 3T p $end
$var reg 1 4T sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 5T a $end
$var wire 1 6T b $end
$var wire 1 7T c_in $end
$var reg 1 8T c_out $end
$var reg 1 9T g $end
$var reg 1 :T p $end
$var reg 1 ;T sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 <T a $end
$var wire 1 =T b $end
$var wire 1 >T c_in $end
$var reg 1 ?T c_out $end
$var reg 1 @T g $end
$var reg 1 AT p $end
$var reg 1 BT sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 CT a [1:0] $end
$var wire 2 DT b [1:0] $end
$var wire 1 ET c_in $end
$var wire 2 FT sum [1:0] $end
$var wire 3 GT carries [2:0] $end
$var wire 1 HT c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 IT a $end
$var wire 1 JT b $end
$var wire 1 KT c_in $end
$var reg 1 LT c_out $end
$var reg 1 MT g $end
$var reg 1 NT p $end
$var reg 1 OT sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 PT a $end
$var wire 1 QT b $end
$var wire 1 RT c_in $end
$var reg 1 ST c_out $end
$var reg 1 TT g $end
$var reg 1 UT p $end
$var reg 1 VT sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 WT a [1:0] $end
$var wire 2 XT b [1:0] $end
$var wire 1 YT c_in $end
$var wire 2 ZT sum [1:0] $end
$var wire 3 [T carries [2:0] $end
$var wire 1 \T c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 ]T a $end
$var wire 1 ^T b $end
$var wire 1 _T c_in $end
$var reg 1 `T c_out $end
$var reg 1 aT g $end
$var reg 1 bT p $end
$var reg 1 cT sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 dT a $end
$var wire 1 eT b $end
$var wire 1 fT c_in $end
$var reg 1 gT c_out $end
$var reg 1 hT g $end
$var reg 1 iT p $end
$var reg 1 jT sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 kT a [2:0] $end
$var wire 3 lT b [2:0] $end
$var wire 1 mT c_in $end
$var wire 3 nT sum [2:0] $end
$var wire 4 oT carries [3:0] $end
$var wire 1 pT c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 qT a $end
$var wire 1 rT b $end
$var wire 1 sT c_in $end
$var reg 1 tT c_out $end
$var reg 1 uT g $end
$var reg 1 vT p $end
$var reg 1 wT sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 xT a $end
$var wire 1 yT b $end
$var wire 1 zT c_in $end
$var reg 1 {T c_out $end
$var reg 1 |T g $end
$var reg 1 }T p $end
$var reg 1 ~T sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 !U a $end
$var wire 1 "U b $end
$var wire 1 #U c_in $end
$var reg 1 $U c_out $end
$var reg 1 %U g $end
$var reg 1 &U p $end
$var reg 1 'U sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[7] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 (U neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 )U state_0 $end
$var wire 6 *U two_bit_sums [5:0] $end
$var wire 8 +U one_bit_sums [7:0] $end
$var wire 4 ,U living_neighbors [3:0] $end
$var reg 1 -U continue_alive $end
$var reg 1 .U enabled_output $end
$var reg 1 /U is_3 $end
$var reg 1 0U reset_output $end
$var reg 1 1U state_d $end
$var reg 1 2U state_q $end
$scope module adder_1_1 $end
$var wire 1 3U a $end
$var wire 1 4U b $end
$var wire 1 5U c_in $end
$var reg 1 6U c_out $end
$var reg 1 7U g $end
$var reg 1 8U p $end
$var reg 1 9U sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 :U a $end
$var wire 1 ;U b $end
$var wire 1 <U c_in $end
$var reg 1 =U c_out $end
$var reg 1 >U g $end
$var reg 1 ?U p $end
$var reg 1 @U sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 AU a $end
$var wire 1 BU b $end
$var wire 1 CU c_in $end
$var reg 1 DU c_out $end
$var reg 1 EU g $end
$var reg 1 FU p $end
$var reg 1 GU sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 HU a $end
$var wire 1 IU b $end
$var wire 1 JU c_in $end
$var reg 1 KU c_out $end
$var reg 1 LU g $end
$var reg 1 MU p $end
$var reg 1 NU sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 OU a [1:0] $end
$var wire 2 PU b [1:0] $end
$var wire 1 QU c_in $end
$var wire 2 RU sum [1:0] $end
$var wire 3 SU carries [2:0] $end
$var wire 1 TU c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 UU a $end
$var wire 1 VU b $end
$var wire 1 WU c_in $end
$var reg 1 XU c_out $end
$var reg 1 YU g $end
$var reg 1 ZU p $end
$var reg 1 [U sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 \U a $end
$var wire 1 ]U b $end
$var wire 1 ^U c_in $end
$var reg 1 _U c_out $end
$var reg 1 `U g $end
$var reg 1 aU p $end
$var reg 1 bU sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 cU a [1:0] $end
$var wire 2 dU b [1:0] $end
$var wire 1 eU c_in $end
$var wire 2 fU sum [1:0] $end
$var wire 3 gU carries [2:0] $end
$var wire 1 hU c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 iU a $end
$var wire 1 jU b $end
$var wire 1 kU c_in $end
$var reg 1 lU c_out $end
$var reg 1 mU g $end
$var reg 1 nU p $end
$var reg 1 oU sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 pU a $end
$var wire 1 qU b $end
$var wire 1 rU c_in $end
$var reg 1 sU c_out $end
$var reg 1 tU g $end
$var reg 1 uU p $end
$var reg 1 vU sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 wU a [2:0] $end
$var wire 3 xU b [2:0] $end
$var wire 1 yU c_in $end
$var wire 3 zU sum [2:0] $end
$var wire 4 {U carries [3:0] $end
$var wire 1 |U c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 }U a $end
$var wire 1 ~U b $end
$var wire 1 !V c_in $end
$var reg 1 "V c_out $end
$var reg 1 #V g $end
$var reg 1 $V p $end
$var reg 1 %V sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 &V a $end
$var wire 1 'V b $end
$var wire 1 (V c_in $end
$var reg 1 )V c_out $end
$var reg 1 *V g $end
$var reg 1 +V p $end
$var reg 1 ,V sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 -V a $end
$var wire 1 .V b $end
$var wire 1 /V c_in $end
$var reg 1 0V c_out $end
$var reg 1 1V g $end
$var reg 1 2V p $end
$var reg 1 3V sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[8] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 4V neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 5V state_0 $end
$var wire 6 6V two_bit_sums [5:0] $end
$var wire 8 7V one_bit_sums [7:0] $end
$var wire 4 8V living_neighbors [3:0] $end
$var reg 1 9V continue_alive $end
$var reg 1 :V enabled_output $end
$var reg 1 ;V is_3 $end
$var reg 1 <V reset_output $end
$var reg 1 =V state_d $end
$var reg 1 >V state_q $end
$scope module adder_1_1 $end
$var wire 1 ?V a $end
$var wire 1 @V b $end
$var wire 1 AV c_in $end
$var reg 1 BV c_out $end
$var reg 1 CV g $end
$var reg 1 DV p $end
$var reg 1 EV sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 FV a $end
$var wire 1 GV b $end
$var wire 1 HV c_in $end
$var reg 1 IV c_out $end
$var reg 1 JV g $end
$var reg 1 KV p $end
$var reg 1 LV sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 MV a $end
$var wire 1 NV b $end
$var wire 1 OV c_in $end
$var reg 1 PV c_out $end
$var reg 1 QV g $end
$var reg 1 RV p $end
$var reg 1 SV sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 TV a $end
$var wire 1 UV b $end
$var wire 1 VV c_in $end
$var reg 1 WV c_out $end
$var reg 1 XV g $end
$var reg 1 YV p $end
$var reg 1 ZV sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 [V a [1:0] $end
$var wire 2 \V b [1:0] $end
$var wire 1 ]V c_in $end
$var wire 2 ^V sum [1:0] $end
$var wire 3 _V carries [2:0] $end
$var wire 1 `V c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 aV a $end
$var wire 1 bV b $end
$var wire 1 cV c_in $end
$var reg 1 dV c_out $end
$var reg 1 eV g $end
$var reg 1 fV p $end
$var reg 1 gV sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 hV a $end
$var wire 1 iV b $end
$var wire 1 jV c_in $end
$var reg 1 kV c_out $end
$var reg 1 lV g $end
$var reg 1 mV p $end
$var reg 1 nV sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 oV a [1:0] $end
$var wire 2 pV b [1:0] $end
$var wire 1 qV c_in $end
$var wire 2 rV sum [1:0] $end
$var wire 3 sV carries [2:0] $end
$var wire 1 tV c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 uV a $end
$var wire 1 vV b $end
$var wire 1 wV c_in $end
$var reg 1 xV c_out $end
$var reg 1 yV g $end
$var reg 1 zV p $end
$var reg 1 {V sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 |V a $end
$var wire 1 }V b $end
$var wire 1 ~V c_in $end
$var reg 1 !W c_out $end
$var reg 1 "W g $end
$var reg 1 #W p $end
$var reg 1 $W sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 %W a [2:0] $end
$var wire 3 &W b [2:0] $end
$var wire 1 'W c_in $end
$var wire 3 (W sum [2:0] $end
$var wire 4 )W carries [3:0] $end
$var wire 1 *W c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 +W a $end
$var wire 1 ,W b $end
$var wire 1 -W c_in $end
$var reg 1 .W c_out $end
$var reg 1 /W g $end
$var reg 1 0W p $end
$var reg 1 1W sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 2W a $end
$var wire 1 3W b $end
$var wire 1 4W c_in $end
$var reg 1 5W c_out $end
$var reg 1 6W g $end
$var reg 1 7W p $end
$var reg 1 8W sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 9W a $end
$var wire 1 :W b $end
$var wire 1 ;W c_in $end
$var reg 1 <W c_out $end
$var reg 1 =W g $end
$var reg 1 >W p $end
$var reg 1 ?W sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[9] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_x[7] $end
$scope begin cells_y[0] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[1] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 @W neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 AW state_0 $end
$var wire 6 BW two_bit_sums [5:0] $end
$var wire 8 CW one_bit_sums [7:0] $end
$var wire 4 DW living_neighbors [3:0] $end
$var reg 1 EW continue_alive $end
$var reg 1 FW enabled_output $end
$var reg 1 GW is_3 $end
$var reg 1 HW reset_output $end
$var reg 1 IW state_d $end
$var reg 1 JW state_q $end
$scope module adder_1_1 $end
$var wire 1 KW a $end
$var wire 1 LW b $end
$var wire 1 MW c_in $end
$var reg 1 NW c_out $end
$var reg 1 OW g $end
$var reg 1 PW p $end
$var reg 1 QW sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 RW a $end
$var wire 1 SW b $end
$var wire 1 TW c_in $end
$var reg 1 UW c_out $end
$var reg 1 VW g $end
$var reg 1 WW p $end
$var reg 1 XW sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 YW a $end
$var wire 1 ZW b $end
$var wire 1 [W c_in $end
$var reg 1 \W c_out $end
$var reg 1 ]W g $end
$var reg 1 ^W p $end
$var reg 1 _W sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 `W a $end
$var wire 1 aW b $end
$var wire 1 bW c_in $end
$var reg 1 cW c_out $end
$var reg 1 dW g $end
$var reg 1 eW p $end
$var reg 1 fW sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 gW a [1:0] $end
$var wire 2 hW b [1:0] $end
$var wire 1 iW c_in $end
$var wire 2 jW sum [1:0] $end
$var wire 3 kW carries [2:0] $end
$var wire 1 lW c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 mW a $end
$var wire 1 nW b $end
$var wire 1 oW c_in $end
$var reg 1 pW c_out $end
$var reg 1 qW g $end
$var reg 1 rW p $end
$var reg 1 sW sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 tW a $end
$var wire 1 uW b $end
$var wire 1 vW c_in $end
$var reg 1 wW c_out $end
$var reg 1 xW g $end
$var reg 1 yW p $end
$var reg 1 zW sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 {W a [1:0] $end
$var wire 2 |W b [1:0] $end
$var wire 1 }W c_in $end
$var wire 2 ~W sum [1:0] $end
$var wire 3 !X carries [2:0] $end
$var wire 1 "X c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 #X a $end
$var wire 1 $X b $end
$var wire 1 %X c_in $end
$var reg 1 &X c_out $end
$var reg 1 'X g $end
$var reg 1 (X p $end
$var reg 1 )X sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 *X a $end
$var wire 1 +X b $end
$var wire 1 ,X c_in $end
$var reg 1 -X c_out $end
$var reg 1 .X g $end
$var reg 1 /X p $end
$var reg 1 0X sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 1X a [2:0] $end
$var wire 3 2X b [2:0] $end
$var wire 1 3X c_in $end
$var wire 3 4X sum [2:0] $end
$var wire 4 5X carries [3:0] $end
$var wire 1 6X c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 7X a $end
$var wire 1 8X b $end
$var wire 1 9X c_in $end
$var reg 1 :X c_out $end
$var reg 1 ;X g $end
$var reg 1 <X p $end
$var reg 1 =X sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 >X a $end
$var wire 1 ?X b $end
$var wire 1 @X c_in $end
$var reg 1 AX c_out $end
$var reg 1 BX g $end
$var reg 1 CX p $end
$var reg 1 DX sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 EX a $end
$var wire 1 FX b $end
$var wire 1 GX c_in $end
$var reg 1 HX c_out $end
$var reg 1 IX g $end
$var reg 1 JX p $end
$var reg 1 KX sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[2] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 LX neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 MX state_0 $end
$var wire 6 NX two_bit_sums [5:0] $end
$var wire 8 OX one_bit_sums [7:0] $end
$var wire 4 PX living_neighbors [3:0] $end
$var reg 1 QX continue_alive $end
$var reg 1 RX enabled_output $end
$var reg 1 SX is_3 $end
$var reg 1 TX reset_output $end
$var reg 1 UX state_d $end
$var reg 1 VX state_q $end
$scope module adder_1_1 $end
$var wire 1 WX a $end
$var wire 1 XX b $end
$var wire 1 YX c_in $end
$var reg 1 ZX c_out $end
$var reg 1 [X g $end
$var reg 1 \X p $end
$var reg 1 ]X sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 ^X a $end
$var wire 1 _X b $end
$var wire 1 `X c_in $end
$var reg 1 aX c_out $end
$var reg 1 bX g $end
$var reg 1 cX p $end
$var reg 1 dX sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 eX a $end
$var wire 1 fX b $end
$var wire 1 gX c_in $end
$var reg 1 hX c_out $end
$var reg 1 iX g $end
$var reg 1 jX p $end
$var reg 1 kX sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 lX a $end
$var wire 1 mX b $end
$var wire 1 nX c_in $end
$var reg 1 oX c_out $end
$var reg 1 pX g $end
$var reg 1 qX p $end
$var reg 1 rX sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 sX a [1:0] $end
$var wire 2 tX b [1:0] $end
$var wire 1 uX c_in $end
$var wire 2 vX sum [1:0] $end
$var wire 3 wX carries [2:0] $end
$var wire 1 xX c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 yX a $end
$var wire 1 zX b $end
$var wire 1 {X c_in $end
$var reg 1 |X c_out $end
$var reg 1 }X g $end
$var reg 1 ~X p $end
$var reg 1 !Y sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 "Y a $end
$var wire 1 #Y b $end
$var wire 1 $Y c_in $end
$var reg 1 %Y c_out $end
$var reg 1 &Y g $end
$var reg 1 'Y p $end
$var reg 1 (Y sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 )Y a [1:0] $end
$var wire 2 *Y b [1:0] $end
$var wire 1 +Y c_in $end
$var wire 2 ,Y sum [1:0] $end
$var wire 3 -Y carries [2:0] $end
$var wire 1 .Y c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 /Y a $end
$var wire 1 0Y b $end
$var wire 1 1Y c_in $end
$var reg 1 2Y c_out $end
$var reg 1 3Y g $end
$var reg 1 4Y p $end
$var reg 1 5Y sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 6Y a $end
$var wire 1 7Y b $end
$var wire 1 8Y c_in $end
$var reg 1 9Y c_out $end
$var reg 1 :Y g $end
$var reg 1 ;Y p $end
$var reg 1 <Y sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 =Y a [2:0] $end
$var wire 3 >Y b [2:0] $end
$var wire 1 ?Y c_in $end
$var wire 3 @Y sum [2:0] $end
$var wire 4 AY carries [3:0] $end
$var wire 1 BY c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 CY a $end
$var wire 1 DY b $end
$var wire 1 EY c_in $end
$var reg 1 FY c_out $end
$var reg 1 GY g $end
$var reg 1 HY p $end
$var reg 1 IY sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 JY a $end
$var wire 1 KY b $end
$var wire 1 LY c_in $end
$var reg 1 MY c_out $end
$var reg 1 NY g $end
$var reg 1 OY p $end
$var reg 1 PY sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 QY a $end
$var wire 1 RY b $end
$var wire 1 SY c_in $end
$var reg 1 TY c_out $end
$var reg 1 UY g $end
$var reg 1 VY p $end
$var reg 1 WY sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[3] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 XY neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 YY state_0 $end
$var wire 6 ZY two_bit_sums [5:0] $end
$var wire 8 [Y one_bit_sums [7:0] $end
$var wire 4 \Y living_neighbors [3:0] $end
$var reg 1 ]Y continue_alive $end
$var reg 1 ^Y enabled_output $end
$var reg 1 _Y is_3 $end
$var reg 1 `Y reset_output $end
$var reg 1 aY state_d $end
$var reg 1 bY state_q $end
$scope module adder_1_1 $end
$var wire 1 cY a $end
$var wire 1 dY b $end
$var wire 1 eY c_in $end
$var reg 1 fY c_out $end
$var reg 1 gY g $end
$var reg 1 hY p $end
$var reg 1 iY sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 jY a $end
$var wire 1 kY b $end
$var wire 1 lY c_in $end
$var reg 1 mY c_out $end
$var reg 1 nY g $end
$var reg 1 oY p $end
$var reg 1 pY sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 qY a $end
$var wire 1 rY b $end
$var wire 1 sY c_in $end
$var reg 1 tY c_out $end
$var reg 1 uY g $end
$var reg 1 vY p $end
$var reg 1 wY sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 xY a $end
$var wire 1 yY b $end
$var wire 1 zY c_in $end
$var reg 1 {Y c_out $end
$var reg 1 |Y g $end
$var reg 1 }Y p $end
$var reg 1 ~Y sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 !Z a [1:0] $end
$var wire 2 "Z b [1:0] $end
$var wire 1 #Z c_in $end
$var wire 2 $Z sum [1:0] $end
$var wire 3 %Z carries [2:0] $end
$var wire 1 &Z c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 'Z a $end
$var wire 1 (Z b $end
$var wire 1 )Z c_in $end
$var reg 1 *Z c_out $end
$var reg 1 +Z g $end
$var reg 1 ,Z p $end
$var reg 1 -Z sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 .Z a $end
$var wire 1 /Z b $end
$var wire 1 0Z c_in $end
$var reg 1 1Z c_out $end
$var reg 1 2Z g $end
$var reg 1 3Z p $end
$var reg 1 4Z sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 5Z a [1:0] $end
$var wire 2 6Z b [1:0] $end
$var wire 1 7Z c_in $end
$var wire 2 8Z sum [1:0] $end
$var wire 3 9Z carries [2:0] $end
$var wire 1 :Z c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 ;Z a $end
$var wire 1 <Z b $end
$var wire 1 =Z c_in $end
$var reg 1 >Z c_out $end
$var reg 1 ?Z g $end
$var reg 1 @Z p $end
$var reg 1 AZ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 BZ a $end
$var wire 1 CZ b $end
$var wire 1 DZ c_in $end
$var reg 1 EZ c_out $end
$var reg 1 FZ g $end
$var reg 1 GZ p $end
$var reg 1 HZ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 IZ a [2:0] $end
$var wire 3 JZ b [2:0] $end
$var wire 1 KZ c_in $end
$var wire 3 LZ sum [2:0] $end
$var wire 4 MZ carries [3:0] $end
$var wire 1 NZ c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 OZ a $end
$var wire 1 PZ b $end
$var wire 1 QZ c_in $end
$var reg 1 RZ c_out $end
$var reg 1 SZ g $end
$var reg 1 TZ p $end
$var reg 1 UZ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 VZ a $end
$var wire 1 WZ b $end
$var wire 1 XZ c_in $end
$var reg 1 YZ c_out $end
$var reg 1 ZZ g $end
$var reg 1 [Z p $end
$var reg 1 \Z sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 ]Z a $end
$var wire 1 ^Z b $end
$var wire 1 _Z c_in $end
$var reg 1 `Z c_out $end
$var reg 1 aZ g $end
$var reg 1 bZ p $end
$var reg 1 cZ sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[4] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 dZ neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 eZ state_0 $end
$var wire 6 fZ two_bit_sums [5:0] $end
$var wire 8 gZ one_bit_sums [7:0] $end
$var wire 4 hZ living_neighbors [3:0] $end
$var reg 1 iZ continue_alive $end
$var reg 1 jZ enabled_output $end
$var reg 1 kZ is_3 $end
$var reg 1 lZ reset_output $end
$var reg 1 mZ state_d $end
$var reg 1 nZ state_q $end
$scope module adder_1_1 $end
$var wire 1 oZ a $end
$var wire 1 pZ b $end
$var wire 1 qZ c_in $end
$var reg 1 rZ c_out $end
$var reg 1 sZ g $end
$var reg 1 tZ p $end
$var reg 1 uZ sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 vZ a $end
$var wire 1 wZ b $end
$var wire 1 xZ c_in $end
$var reg 1 yZ c_out $end
$var reg 1 zZ g $end
$var reg 1 {Z p $end
$var reg 1 |Z sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 }Z a $end
$var wire 1 ~Z b $end
$var wire 1 ![ c_in $end
$var reg 1 "[ c_out $end
$var reg 1 #[ g $end
$var reg 1 $[ p $end
$var reg 1 %[ sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 &[ a $end
$var wire 1 '[ b $end
$var wire 1 ([ c_in $end
$var reg 1 )[ c_out $end
$var reg 1 *[ g $end
$var reg 1 +[ p $end
$var reg 1 ,[ sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 -[ a [1:0] $end
$var wire 2 .[ b [1:0] $end
$var wire 1 /[ c_in $end
$var wire 2 0[ sum [1:0] $end
$var wire 3 1[ carries [2:0] $end
$var wire 1 2[ c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 3[ a $end
$var wire 1 4[ b $end
$var wire 1 5[ c_in $end
$var reg 1 6[ c_out $end
$var reg 1 7[ g $end
$var reg 1 8[ p $end
$var reg 1 9[ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 :[ a $end
$var wire 1 ;[ b $end
$var wire 1 <[ c_in $end
$var reg 1 =[ c_out $end
$var reg 1 >[ g $end
$var reg 1 ?[ p $end
$var reg 1 @[ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 A[ a [1:0] $end
$var wire 2 B[ b [1:0] $end
$var wire 1 C[ c_in $end
$var wire 2 D[ sum [1:0] $end
$var wire 3 E[ carries [2:0] $end
$var wire 1 F[ c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 G[ a $end
$var wire 1 H[ b $end
$var wire 1 I[ c_in $end
$var reg 1 J[ c_out $end
$var reg 1 K[ g $end
$var reg 1 L[ p $end
$var reg 1 M[ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 N[ a $end
$var wire 1 O[ b $end
$var wire 1 P[ c_in $end
$var reg 1 Q[ c_out $end
$var reg 1 R[ g $end
$var reg 1 S[ p $end
$var reg 1 T[ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 U[ a [2:0] $end
$var wire 3 V[ b [2:0] $end
$var wire 1 W[ c_in $end
$var wire 3 X[ sum [2:0] $end
$var wire 4 Y[ carries [3:0] $end
$var wire 1 Z[ c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 [[ a $end
$var wire 1 \[ b $end
$var wire 1 ][ c_in $end
$var reg 1 ^[ c_out $end
$var reg 1 _[ g $end
$var reg 1 `[ p $end
$var reg 1 a[ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 b[ a $end
$var wire 1 c[ b $end
$var wire 1 d[ c_in $end
$var reg 1 e[ c_out $end
$var reg 1 f[ g $end
$var reg 1 g[ p $end
$var reg 1 h[ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 i[ a $end
$var wire 1 j[ b $end
$var wire 1 k[ c_in $end
$var reg 1 l[ c_out $end
$var reg 1 m[ g $end
$var reg 1 n[ p $end
$var reg 1 o[ sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[5] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 p[ neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 q[ state_0 $end
$var wire 6 r[ two_bit_sums [5:0] $end
$var wire 8 s[ one_bit_sums [7:0] $end
$var wire 4 t[ living_neighbors [3:0] $end
$var reg 1 u[ continue_alive $end
$var reg 1 v[ enabled_output $end
$var reg 1 w[ is_3 $end
$var reg 1 x[ reset_output $end
$var reg 1 y[ state_d $end
$var reg 1 z[ state_q $end
$scope module adder_1_1 $end
$var wire 1 {[ a $end
$var wire 1 |[ b $end
$var wire 1 }[ c_in $end
$var reg 1 ~[ c_out $end
$var reg 1 !\ g $end
$var reg 1 "\ p $end
$var reg 1 #\ sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 $\ a $end
$var wire 1 %\ b $end
$var wire 1 &\ c_in $end
$var reg 1 '\ c_out $end
$var reg 1 (\ g $end
$var reg 1 )\ p $end
$var reg 1 *\ sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 +\ a $end
$var wire 1 ,\ b $end
$var wire 1 -\ c_in $end
$var reg 1 .\ c_out $end
$var reg 1 /\ g $end
$var reg 1 0\ p $end
$var reg 1 1\ sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 2\ a $end
$var wire 1 3\ b $end
$var wire 1 4\ c_in $end
$var reg 1 5\ c_out $end
$var reg 1 6\ g $end
$var reg 1 7\ p $end
$var reg 1 8\ sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 9\ a [1:0] $end
$var wire 2 :\ b [1:0] $end
$var wire 1 ;\ c_in $end
$var wire 2 <\ sum [1:0] $end
$var wire 3 =\ carries [2:0] $end
$var wire 1 >\ c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 ?\ a $end
$var wire 1 @\ b $end
$var wire 1 A\ c_in $end
$var reg 1 B\ c_out $end
$var reg 1 C\ g $end
$var reg 1 D\ p $end
$var reg 1 E\ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 F\ a $end
$var wire 1 G\ b $end
$var wire 1 H\ c_in $end
$var reg 1 I\ c_out $end
$var reg 1 J\ g $end
$var reg 1 K\ p $end
$var reg 1 L\ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 M\ a [1:0] $end
$var wire 2 N\ b [1:0] $end
$var wire 1 O\ c_in $end
$var wire 2 P\ sum [1:0] $end
$var wire 3 Q\ carries [2:0] $end
$var wire 1 R\ c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 S\ a $end
$var wire 1 T\ b $end
$var wire 1 U\ c_in $end
$var reg 1 V\ c_out $end
$var reg 1 W\ g $end
$var reg 1 X\ p $end
$var reg 1 Y\ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 Z\ a $end
$var wire 1 [\ b $end
$var wire 1 \\ c_in $end
$var reg 1 ]\ c_out $end
$var reg 1 ^\ g $end
$var reg 1 _\ p $end
$var reg 1 `\ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 a\ a [2:0] $end
$var wire 3 b\ b [2:0] $end
$var wire 1 c\ c_in $end
$var wire 3 d\ sum [2:0] $end
$var wire 4 e\ carries [3:0] $end
$var wire 1 f\ c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 g\ a $end
$var wire 1 h\ b $end
$var wire 1 i\ c_in $end
$var reg 1 j\ c_out $end
$var reg 1 k\ g $end
$var reg 1 l\ p $end
$var reg 1 m\ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 n\ a $end
$var wire 1 o\ b $end
$var wire 1 p\ c_in $end
$var reg 1 q\ c_out $end
$var reg 1 r\ g $end
$var reg 1 s\ p $end
$var reg 1 t\ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 u\ a $end
$var wire 1 v\ b $end
$var wire 1 w\ c_in $end
$var reg 1 x\ c_out $end
$var reg 1 y\ g $end
$var reg 1 z\ p $end
$var reg 1 {\ sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[6] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 |\ neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 }\ state_0 $end
$var wire 6 ~\ two_bit_sums [5:0] $end
$var wire 8 !] one_bit_sums [7:0] $end
$var wire 4 "] living_neighbors [3:0] $end
$var reg 1 #] continue_alive $end
$var reg 1 $] enabled_output $end
$var reg 1 %] is_3 $end
$var reg 1 &] reset_output $end
$var reg 1 '] state_d $end
$var reg 1 (] state_q $end
$scope module adder_1_1 $end
$var wire 1 )] a $end
$var wire 1 *] b $end
$var wire 1 +] c_in $end
$var reg 1 ,] c_out $end
$var reg 1 -] g $end
$var reg 1 .] p $end
$var reg 1 /] sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 0] a $end
$var wire 1 1] b $end
$var wire 1 2] c_in $end
$var reg 1 3] c_out $end
$var reg 1 4] g $end
$var reg 1 5] p $end
$var reg 1 6] sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 7] a $end
$var wire 1 8] b $end
$var wire 1 9] c_in $end
$var reg 1 :] c_out $end
$var reg 1 ;] g $end
$var reg 1 <] p $end
$var reg 1 =] sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 >] a $end
$var wire 1 ?] b $end
$var wire 1 @] c_in $end
$var reg 1 A] c_out $end
$var reg 1 B] g $end
$var reg 1 C] p $end
$var reg 1 D] sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 E] a [1:0] $end
$var wire 2 F] b [1:0] $end
$var wire 1 G] c_in $end
$var wire 2 H] sum [1:0] $end
$var wire 3 I] carries [2:0] $end
$var wire 1 J] c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 K] a $end
$var wire 1 L] b $end
$var wire 1 M] c_in $end
$var reg 1 N] c_out $end
$var reg 1 O] g $end
$var reg 1 P] p $end
$var reg 1 Q] sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 R] a $end
$var wire 1 S] b $end
$var wire 1 T] c_in $end
$var reg 1 U] c_out $end
$var reg 1 V] g $end
$var reg 1 W] p $end
$var reg 1 X] sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 Y] a [1:0] $end
$var wire 2 Z] b [1:0] $end
$var wire 1 [] c_in $end
$var wire 2 \] sum [1:0] $end
$var wire 3 ]] carries [2:0] $end
$var wire 1 ^] c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 _] a $end
$var wire 1 `] b $end
$var wire 1 a] c_in $end
$var reg 1 b] c_out $end
$var reg 1 c] g $end
$var reg 1 d] p $end
$var reg 1 e] sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 f] a $end
$var wire 1 g] b $end
$var wire 1 h] c_in $end
$var reg 1 i] c_out $end
$var reg 1 j] g $end
$var reg 1 k] p $end
$var reg 1 l] sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 m] a [2:0] $end
$var wire 3 n] b [2:0] $end
$var wire 1 o] c_in $end
$var wire 3 p] sum [2:0] $end
$var wire 4 q] carries [3:0] $end
$var wire 1 r] c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 s] a $end
$var wire 1 t] b $end
$var wire 1 u] c_in $end
$var reg 1 v] c_out $end
$var reg 1 w] g $end
$var reg 1 x] p $end
$var reg 1 y] sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 z] a $end
$var wire 1 {] b $end
$var wire 1 |] c_in $end
$var reg 1 }] c_out $end
$var reg 1 ~] g $end
$var reg 1 !^ p $end
$var reg 1 "^ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 #^ a $end
$var wire 1 $^ b $end
$var wire 1 %^ c_in $end
$var reg 1 &^ c_out $end
$var reg 1 '^ g $end
$var reg 1 (^ p $end
$var reg 1 )^ sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[7] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 *^ neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 +^ state_0 $end
$var wire 6 ,^ two_bit_sums [5:0] $end
$var wire 8 -^ one_bit_sums [7:0] $end
$var wire 4 .^ living_neighbors [3:0] $end
$var reg 1 /^ continue_alive $end
$var reg 1 0^ enabled_output $end
$var reg 1 1^ is_3 $end
$var reg 1 2^ reset_output $end
$var reg 1 3^ state_d $end
$var reg 1 4^ state_q $end
$scope module adder_1_1 $end
$var wire 1 5^ a $end
$var wire 1 6^ b $end
$var wire 1 7^ c_in $end
$var reg 1 8^ c_out $end
$var reg 1 9^ g $end
$var reg 1 :^ p $end
$var reg 1 ;^ sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 <^ a $end
$var wire 1 =^ b $end
$var wire 1 >^ c_in $end
$var reg 1 ?^ c_out $end
$var reg 1 @^ g $end
$var reg 1 A^ p $end
$var reg 1 B^ sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 C^ a $end
$var wire 1 D^ b $end
$var wire 1 E^ c_in $end
$var reg 1 F^ c_out $end
$var reg 1 G^ g $end
$var reg 1 H^ p $end
$var reg 1 I^ sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 J^ a $end
$var wire 1 K^ b $end
$var wire 1 L^ c_in $end
$var reg 1 M^ c_out $end
$var reg 1 N^ g $end
$var reg 1 O^ p $end
$var reg 1 P^ sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 Q^ a [1:0] $end
$var wire 2 R^ b [1:0] $end
$var wire 1 S^ c_in $end
$var wire 2 T^ sum [1:0] $end
$var wire 3 U^ carries [2:0] $end
$var wire 1 V^ c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 W^ a $end
$var wire 1 X^ b $end
$var wire 1 Y^ c_in $end
$var reg 1 Z^ c_out $end
$var reg 1 [^ g $end
$var reg 1 \^ p $end
$var reg 1 ]^ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 ^^ a $end
$var wire 1 _^ b $end
$var wire 1 `^ c_in $end
$var reg 1 a^ c_out $end
$var reg 1 b^ g $end
$var reg 1 c^ p $end
$var reg 1 d^ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 e^ a [1:0] $end
$var wire 2 f^ b [1:0] $end
$var wire 1 g^ c_in $end
$var wire 2 h^ sum [1:0] $end
$var wire 3 i^ carries [2:0] $end
$var wire 1 j^ c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 k^ a $end
$var wire 1 l^ b $end
$var wire 1 m^ c_in $end
$var reg 1 n^ c_out $end
$var reg 1 o^ g $end
$var reg 1 p^ p $end
$var reg 1 q^ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 r^ a $end
$var wire 1 s^ b $end
$var wire 1 t^ c_in $end
$var reg 1 u^ c_out $end
$var reg 1 v^ g $end
$var reg 1 w^ p $end
$var reg 1 x^ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 y^ a [2:0] $end
$var wire 3 z^ b [2:0] $end
$var wire 1 {^ c_in $end
$var wire 3 |^ sum [2:0] $end
$var wire 4 }^ carries [3:0] $end
$var wire 1 ~^ c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 !_ a $end
$var wire 1 "_ b $end
$var wire 1 #_ c_in $end
$var reg 1 $_ c_out $end
$var reg 1 %_ g $end
$var reg 1 &_ p $end
$var reg 1 '_ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 (_ a $end
$var wire 1 )_ b $end
$var wire 1 *_ c_in $end
$var reg 1 +_ c_out $end
$var reg 1 ,_ g $end
$var reg 1 -_ p $end
$var reg 1 ._ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 /_ a $end
$var wire 1 0_ b $end
$var wire 1 1_ c_in $end
$var reg 1 2_ c_out $end
$var reg 1 3_ g $end
$var reg 1 4_ p $end
$var reg 1 5_ sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[8] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 6_ neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 7_ state_0 $end
$var wire 6 8_ two_bit_sums [5:0] $end
$var wire 8 9_ one_bit_sums [7:0] $end
$var wire 4 :_ living_neighbors [3:0] $end
$var reg 1 ;_ continue_alive $end
$var reg 1 <_ enabled_output $end
$var reg 1 =_ is_3 $end
$var reg 1 >_ reset_output $end
$var reg 1 ?_ state_d $end
$var reg 1 @_ state_q $end
$scope module adder_1_1 $end
$var wire 1 A_ a $end
$var wire 1 B_ b $end
$var wire 1 C_ c_in $end
$var reg 1 D_ c_out $end
$var reg 1 E_ g $end
$var reg 1 F_ p $end
$var reg 1 G_ sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 H_ a $end
$var wire 1 I_ b $end
$var wire 1 J_ c_in $end
$var reg 1 K_ c_out $end
$var reg 1 L_ g $end
$var reg 1 M_ p $end
$var reg 1 N_ sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 O_ a $end
$var wire 1 P_ b $end
$var wire 1 Q_ c_in $end
$var reg 1 R_ c_out $end
$var reg 1 S_ g $end
$var reg 1 T_ p $end
$var reg 1 U_ sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 V_ a $end
$var wire 1 W_ b $end
$var wire 1 X_ c_in $end
$var reg 1 Y_ c_out $end
$var reg 1 Z_ g $end
$var reg 1 [_ p $end
$var reg 1 \_ sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 ]_ a [1:0] $end
$var wire 2 ^_ b [1:0] $end
$var wire 1 __ c_in $end
$var wire 2 `_ sum [1:0] $end
$var wire 3 a_ carries [2:0] $end
$var wire 1 b_ c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 c_ a $end
$var wire 1 d_ b $end
$var wire 1 e_ c_in $end
$var reg 1 f_ c_out $end
$var reg 1 g_ g $end
$var reg 1 h_ p $end
$var reg 1 i_ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 j_ a $end
$var wire 1 k_ b $end
$var wire 1 l_ c_in $end
$var reg 1 m_ c_out $end
$var reg 1 n_ g $end
$var reg 1 o_ p $end
$var reg 1 p_ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 q_ a [1:0] $end
$var wire 2 r_ b [1:0] $end
$var wire 1 s_ c_in $end
$var wire 2 t_ sum [1:0] $end
$var wire 3 u_ carries [2:0] $end
$var wire 1 v_ c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 w_ a $end
$var wire 1 x_ b $end
$var wire 1 y_ c_in $end
$var reg 1 z_ c_out $end
$var reg 1 {_ g $end
$var reg 1 |_ p $end
$var reg 1 }_ sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 ~_ a $end
$var wire 1 !` b $end
$var wire 1 "` c_in $end
$var reg 1 #` c_out $end
$var reg 1 $` g $end
$var reg 1 %` p $end
$var reg 1 &` sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 '` a [2:0] $end
$var wire 3 (` b [2:0] $end
$var wire 1 )` c_in $end
$var wire 3 *` sum [2:0] $end
$var wire 4 +` carries [3:0] $end
$var wire 1 ,` c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 -` a $end
$var wire 1 .` b $end
$var wire 1 /` c_in $end
$var reg 1 0` c_out $end
$var reg 1 1` g $end
$var reg 1 2` p $end
$var reg 1 3` sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 4` a $end
$var wire 1 5` b $end
$var wire 1 6` c_in $end
$var reg 1 7` c_out $end
$var reg 1 8` g $end
$var reg 1 9` p $end
$var reg 1 :` sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 ;` a $end
$var wire 1 <` b $end
$var wire 1 =` c_in $end
$var reg 1 >` c_out $end
$var reg 1 ?` g $end
$var reg 1 @` p $end
$var reg 1 A` sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[9] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_x[8] $end
$scope begin cells_y[0] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[1] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 B` neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 C` state_0 $end
$var wire 6 D` two_bit_sums [5:0] $end
$var wire 8 E` one_bit_sums [7:0] $end
$var wire 4 F` living_neighbors [3:0] $end
$var reg 1 G` continue_alive $end
$var reg 1 H` enabled_output $end
$var reg 1 I` is_3 $end
$var reg 1 J` reset_output $end
$var reg 1 K` state_d $end
$var reg 1 L` state_q $end
$scope module adder_1_1 $end
$var wire 1 M` a $end
$var wire 1 N` b $end
$var wire 1 O` c_in $end
$var reg 1 P` c_out $end
$var reg 1 Q` g $end
$var reg 1 R` p $end
$var reg 1 S` sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 T` a $end
$var wire 1 U` b $end
$var wire 1 V` c_in $end
$var reg 1 W` c_out $end
$var reg 1 X` g $end
$var reg 1 Y` p $end
$var reg 1 Z` sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 [` a $end
$var wire 1 \` b $end
$var wire 1 ]` c_in $end
$var reg 1 ^` c_out $end
$var reg 1 _` g $end
$var reg 1 `` p $end
$var reg 1 a` sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 b` a $end
$var wire 1 c` b $end
$var wire 1 d` c_in $end
$var reg 1 e` c_out $end
$var reg 1 f` g $end
$var reg 1 g` p $end
$var reg 1 h` sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 i` a [1:0] $end
$var wire 2 j` b [1:0] $end
$var wire 1 k` c_in $end
$var wire 2 l` sum [1:0] $end
$var wire 3 m` carries [2:0] $end
$var wire 1 n` c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 o` a $end
$var wire 1 p` b $end
$var wire 1 q` c_in $end
$var reg 1 r` c_out $end
$var reg 1 s` g $end
$var reg 1 t` p $end
$var reg 1 u` sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 v` a $end
$var wire 1 w` b $end
$var wire 1 x` c_in $end
$var reg 1 y` c_out $end
$var reg 1 z` g $end
$var reg 1 {` p $end
$var reg 1 |` sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 }` a [1:0] $end
$var wire 2 ~` b [1:0] $end
$var wire 1 !a c_in $end
$var wire 2 "a sum [1:0] $end
$var wire 3 #a carries [2:0] $end
$var wire 1 $a c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 %a a $end
$var wire 1 &a b $end
$var wire 1 'a c_in $end
$var reg 1 (a c_out $end
$var reg 1 )a g $end
$var reg 1 *a p $end
$var reg 1 +a sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 ,a a $end
$var wire 1 -a b $end
$var wire 1 .a c_in $end
$var reg 1 /a c_out $end
$var reg 1 0a g $end
$var reg 1 1a p $end
$var reg 1 2a sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 3a a [2:0] $end
$var wire 3 4a b [2:0] $end
$var wire 1 5a c_in $end
$var wire 3 6a sum [2:0] $end
$var wire 4 7a carries [3:0] $end
$var wire 1 8a c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 9a a $end
$var wire 1 :a b $end
$var wire 1 ;a c_in $end
$var reg 1 <a c_out $end
$var reg 1 =a g $end
$var reg 1 >a p $end
$var reg 1 ?a sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 @a a $end
$var wire 1 Aa b $end
$var wire 1 Ba c_in $end
$var reg 1 Ca c_out $end
$var reg 1 Da g $end
$var reg 1 Ea p $end
$var reg 1 Fa sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 Ga a $end
$var wire 1 Ha b $end
$var wire 1 Ia c_in $end
$var reg 1 Ja c_out $end
$var reg 1 Ka g $end
$var reg 1 La p $end
$var reg 1 Ma sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[2] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 Na neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 Oa state_0 $end
$var wire 6 Pa two_bit_sums [5:0] $end
$var wire 8 Qa one_bit_sums [7:0] $end
$var wire 4 Ra living_neighbors [3:0] $end
$var reg 1 Sa continue_alive $end
$var reg 1 Ta enabled_output $end
$var reg 1 Ua is_3 $end
$var reg 1 Va reset_output $end
$var reg 1 Wa state_d $end
$var reg 1 Xa state_q $end
$scope module adder_1_1 $end
$var wire 1 Ya a $end
$var wire 1 Za b $end
$var wire 1 [a c_in $end
$var reg 1 \a c_out $end
$var reg 1 ]a g $end
$var reg 1 ^a p $end
$var reg 1 _a sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 `a a $end
$var wire 1 aa b $end
$var wire 1 ba c_in $end
$var reg 1 ca c_out $end
$var reg 1 da g $end
$var reg 1 ea p $end
$var reg 1 fa sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 ga a $end
$var wire 1 ha b $end
$var wire 1 ia c_in $end
$var reg 1 ja c_out $end
$var reg 1 ka g $end
$var reg 1 la p $end
$var reg 1 ma sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 na a $end
$var wire 1 oa b $end
$var wire 1 pa c_in $end
$var reg 1 qa c_out $end
$var reg 1 ra g $end
$var reg 1 sa p $end
$var reg 1 ta sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 ua a [1:0] $end
$var wire 2 va b [1:0] $end
$var wire 1 wa c_in $end
$var wire 2 xa sum [1:0] $end
$var wire 3 ya carries [2:0] $end
$var wire 1 za c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 {a a $end
$var wire 1 |a b $end
$var wire 1 }a c_in $end
$var reg 1 ~a c_out $end
$var reg 1 !b g $end
$var reg 1 "b p $end
$var reg 1 #b sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 $b a $end
$var wire 1 %b b $end
$var wire 1 &b c_in $end
$var reg 1 'b c_out $end
$var reg 1 (b g $end
$var reg 1 )b p $end
$var reg 1 *b sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 +b a [1:0] $end
$var wire 2 ,b b [1:0] $end
$var wire 1 -b c_in $end
$var wire 2 .b sum [1:0] $end
$var wire 3 /b carries [2:0] $end
$var wire 1 0b c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 1b a $end
$var wire 1 2b b $end
$var wire 1 3b c_in $end
$var reg 1 4b c_out $end
$var reg 1 5b g $end
$var reg 1 6b p $end
$var reg 1 7b sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 8b a $end
$var wire 1 9b b $end
$var wire 1 :b c_in $end
$var reg 1 ;b c_out $end
$var reg 1 <b g $end
$var reg 1 =b p $end
$var reg 1 >b sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 ?b a [2:0] $end
$var wire 3 @b b [2:0] $end
$var wire 1 Ab c_in $end
$var wire 3 Bb sum [2:0] $end
$var wire 4 Cb carries [3:0] $end
$var wire 1 Db c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 Eb a $end
$var wire 1 Fb b $end
$var wire 1 Gb c_in $end
$var reg 1 Hb c_out $end
$var reg 1 Ib g $end
$var reg 1 Jb p $end
$var reg 1 Kb sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 Lb a $end
$var wire 1 Mb b $end
$var wire 1 Nb c_in $end
$var reg 1 Ob c_out $end
$var reg 1 Pb g $end
$var reg 1 Qb p $end
$var reg 1 Rb sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 Sb a $end
$var wire 1 Tb b $end
$var wire 1 Ub c_in $end
$var reg 1 Vb c_out $end
$var reg 1 Wb g $end
$var reg 1 Xb p $end
$var reg 1 Yb sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[3] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 Zb neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 [b state_0 $end
$var wire 6 \b two_bit_sums [5:0] $end
$var wire 8 ]b one_bit_sums [7:0] $end
$var wire 4 ^b living_neighbors [3:0] $end
$var reg 1 _b continue_alive $end
$var reg 1 `b enabled_output $end
$var reg 1 ab is_3 $end
$var reg 1 bb reset_output $end
$var reg 1 cb state_d $end
$var reg 1 db state_q $end
$scope module adder_1_1 $end
$var wire 1 eb a $end
$var wire 1 fb b $end
$var wire 1 gb c_in $end
$var reg 1 hb c_out $end
$var reg 1 ib g $end
$var reg 1 jb p $end
$var reg 1 kb sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 lb a $end
$var wire 1 mb b $end
$var wire 1 nb c_in $end
$var reg 1 ob c_out $end
$var reg 1 pb g $end
$var reg 1 qb p $end
$var reg 1 rb sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 sb a $end
$var wire 1 tb b $end
$var wire 1 ub c_in $end
$var reg 1 vb c_out $end
$var reg 1 wb g $end
$var reg 1 xb p $end
$var reg 1 yb sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 zb a $end
$var wire 1 {b b $end
$var wire 1 |b c_in $end
$var reg 1 }b c_out $end
$var reg 1 ~b g $end
$var reg 1 !c p $end
$var reg 1 "c sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 #c a [1:0] $end
$var wire 2 $c b [1:0] $end
$var wire 1 %c c_in $end
$var wire 2 &c sum [1:0] $end
$var wire 3 'c carries [2:0] $end
$var wire 1 (c c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 )c a $end
$var wire 1 *c b $end
$var wire 1 +c c_in $end
$var reg 1 ,c c_out $end
$var reg 1 -c g $end
$var reg 1 .c p $end
$var reg 1 /c sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 0c a $end
$var wire 1 1c b $end
$var wire 1 2c c_in $end
$var reg 1 3c c_out $end
$var reg 1 4c g $end
$var reg 1 5c p $end
$var reg 1 6c sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 7c a [1:0] $end
$var wire 2 8c b [1:0] $end
$var wire 1 9c c_in $end
$var wire 2 :c sum [1:0] $end
$var wire 3 ;c carries [2:0] $end
$var wire 1 <c c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 =c a $end
$var wire 1 >c b $end
$var wire 1 ?c c_in $end
$var reg 1 @c c_out $end
$var reg 1 Ac g $end
$var reg 1 Bc p $end
$var reg 1 Cc sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 Dc a $end
$var wire 1 Ec b $end
$var wire 1 Fc c_in $end
$var reg 1 Gc c_out $end
$var reg 1 Hc g $end
$var reg 1 Ic p $end
$var reg 1 Jc sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 Kc a [2:0] $end
$var wire 3 Lc b [2:0] $end
$var wire 1 Mc c_in $end
$var wire 3 Nc sum [2:0] $end
$var wire 4 Oc carries [3:0] $end
$var wire 1 Pc c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 Qc a $end
$var wire 1 Rc b $end
$var wire 1 Sc c_in $end
$var reg 1 Tc c_out $end
$var reg 1 Uc g $end
$var reg 1 Vc p $end
$var reg 1 Wc sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 Xc a $end
$var wire 1 Yc b $end
$var wire 1 Zc c_in $end
$var reg 1 [c c_out $end
$var reg 1 \c g $end
$var reg 1 ]c p $end
$var reg 1 ^c sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 _c a $end
$var wire 1 `c b $end
$var wire 1 ac c_in $end
$var reg 1 bc c_out $end
$var reg 1 cc g $end
$var reg 1 dc p $end
$var reg 1 ec sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[4] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 fc neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 gc state_0 $end
$var wire 6 hc two_bit_sums [5:0] $end
$var wire 8 ic one_bit_sums [7:0] $end
$var wire 4 jc living_neighbors [3:0] $end
$var reg 1 kc continue_alive $end
$var reg 1 lc enabled_output $end
$var reg 1 mc is_3 $end
$var reg 1 nc reset_output $end
$var reg 1 oc state_d $end
$var reg 1 pc state_q $end
$scope module adder_1_1 $end
$var wire 1 qc a $end
$var wire 1 rc b $end
$var wire 1 sc c_in $end
$var reg 1 tc c_out $end
$var reg 1 uc g $end
$var reg 1 vc p $end
$var reg 1 wc sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 xc a $end
$var wire 1 yc b $end
$var wire 1 zc c_in $end
$var reg 1 {c c_out $end
$var reg 1 |c g $end
$var reg 1 }c p $end
$var reg 1 ~c sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 !d a $end
$var wire 1 "d b $end
$var wire 1 #d c_in $end
$var reg 1 $d c_out $end
$var reg 1 %d g $end
$var reg 1 &d p $end
$var reg 1 'd sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 (d a $end
$var wire 1 )d b $end
$var wire 1 *d c_in $end
$var reg 1 +d c_out $end
$var reg 1 ,d g $end
$var reg 1 -d p $end
$var reg 1 .d sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 /d a [1:0] $end
$var wire 2 0d b [1:0] $end
$var wire 1 1d c_in $end
$var wire 2 2d sum [1:0] $end
$var wire 3 3d carries [2:0] $end
$var wire 1 4d c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 5d a $end
$var wire 1 6d b $end
$var wire 1 7d c_in $end
$var reg 1 8d c_out $end
$var reg 1 9d g $end
$var reg 1 :d p $end
$var reg 1 ;d sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 <d a $end
$var wire 1 =d b $end
$var wire 1 >d c_in $end
$var reg 1 ?d c_out $end
$var reg 1 @d g $end
$var reg 1 Ad p $end
$var reg 1 Bd sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 Cd a [1:0] $end
$var wire 2 Dd b [1:0] $end
$var wire 1 Ed c_in $end
$var wire 2 Fd sum [1:0] $end
$var wire 3 Gd carries [2:0] $end
$var wire 1 Hd c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 Id a $end
$var wire 1 Jd b $end
$var wire 1 Kd c_in $end
$var reg 1 Ld c_out $end
$var reg 1 Md g $end
$var reg 1 Nd p $end
$var reg 1 Od sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 Pd a $end
$var wire 1 Qd b $end
$var wire 1 Rd c_in $end
$var reg 1 Sd c_out $end
$var reg 1 Td g $end
$var reg 1 Ud p $end
$var reg 1 Vd sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 Wd a [2:0] $end
$var wire 3 Xd b [2:0] $end
$var wire 1 Yd c_in $end
$var wire 3 Zd sum [2:0] $end
$var wire 4 [d carries [3:0] $end
$var wire 1 \d c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 ]d a $end
$var wire 1 ^d b $end
$var wire 1 _d c_in $end
$var reg 1 `d c_out $end
$var reg 1 ad g $end
$var reg 1 bd p $end
$var reg 1 cd sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 dd a $end
$var wire 1 ed b $end
$var wire 1 fd c_in $end
$var reg 1 gd c_out $end
$var reg 1 hd g $end
$var reg 1 id p $end
$var reg 1 jd sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 kd a $end
$var wire 1 ld b $end
$var wire 1 md c_in $end
$var reg 1 nd c_out $end
$var reg 1 od g $end
$var reg 1 pd p $end
$var reg 1 qd sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[5] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 rd neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 sd state_0 $end
$var wire 6 td two_bit_sums [5:0] $end
$var wire 8 ud one_bit_sums [7:0] $end
$var wire 4 vd living_neighbors [3:0] $end
$var reg 1 wd continue_alive $end
$var reg 1 xd enabled_output $end
$var reg 1 yd is_3 $end
$var reg 1 zd reset_output $end
$var reg 1 {d state_d $end
$var reg 1 |d state_q $end
$scope module adder_1_1 $end
$var wire 1 }d a $end
$var wire 1 ~d b $end
$var wire 1 !e c_in $end
$var reg 1 "e c_out $end
$var reg 1 #e g $end
$var reg 1 $e p $end
$var reg 1 %e sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 &e a $end
$var wire 1 'e b $end
$var wire 1 (e c_in $end
$var reg 1 )e c_out $end
$var reg 1 *e g $end
$var reg 1 +e p $end
$var reg 1 ,e sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 -e a $end
$var wire 1 .e b $end
$var wire 1 /e c_in $end
$var reg 1 0e c_out $end
$var reg 1 1e g $end
$var reg 1 2e p $end
$var reg 1 3e sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 4e a $end
$var wire 1 5e b $end
$var wire 1 6e c_in $end
$var reg 1 7e c_out $end
$var reg 1 8e g $end
$var reg 1 9e p $end
$var reg 1 :e sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 ;e a [1:0] $end
$var wire 2 <e b [1:0] $end
$var wire 1 =e c_in $end
$var wire 2 >e sum [1:0] $end
$var wire 3 ?e carries [2:0] $end
$var wire 1 @e c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 Ae a $end
$var wire 1 Be b $end
$var wire 1 Ce c_in $end
$var reg 1 De c_out $end
$var reg 1 Ee g $end
$var reg 1 Fe p $end
$var reg 1 Ge sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 He a $end
$var wire 1 Ie b $end
$var wire 1 Je c_in $end
$var reg 1 Ke c_out $end
$var reg 1 Le g $end
$var reg 1 Me p $end
$var reg 1 Ne sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 Oe a [1:0] $end
$var wire 2 Pe b [1:0] $end
$var wire 1 Qe c_in $end
$var wire 2 Re sum [1:0] $end
$var wire 3 Se carries [2:0] $end
$var wire 1 Te c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 Ue a $end
$var wire 1 Ve b $end
$var wire 1 We c_in $end
$var reg 1 Xe c_out $end
$var reg 1 Ye g $end
$var reg 1 Ze p $end
$var reg 1 [e sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 \e a $end
$var wire 1 ]e b $end
$var wire 1 ^e c_in $end
$var reg 1 _e c_out $end
$var reg 1 `e g $end
$var reg 1 ae p $end
$var reg 1 be sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 ce a [2:0] $end
$var wire 3 de b [2:0] $end
$var wire 1 ee c_in $end
$var wire 3 fe sum [2:0] $end
$var wire 4 ge carries [3:0] $end
$var wire 1 he c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 ie a $end
$var wire 1 je b $end
$var wire 1 ke c_in $end
$var reg 1 le c_out $end
$var reg 1 me g $end
$var reg 1 ne p $end
$var reg 1 oe sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 pe a $end
$var wire 1 qe b $end
$var wire 1 re c_in $end
$var reg 1 se c_out $end
$var reg 1 te g $end
$var reg 1 ue p $end
$var reg 1 ve sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 we a $end
$var wire 1 xe b $end
$var wire 1 ye c_in $end
$var reg 1 ze c_out $end
$var reg 1 {e g $end
$var reg 1 |e p $end
$var reg 1 }e sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[6] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 ~e neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 !f state_0 $end
$var wire 6 "f two_bit_sums [5:0] $end
$var wire 8 #f one_bit_sums [7:0] $end
$var wire 4 $f living_neighbors [3:0] $end
$var reg 1 %f continue_alive $end
$var reg 1 &f enabled_output $end
$var reg 1 'f is_3 $end
$var reg 1 (f reset_output $end
$var reg 1 )f state_d $end
$var reg 1 *f state_q $end
$scope module adder_1_1 $end
$var wire 1 +f a $end
$var wire 1 ,f b $end
$var wire 1 -f c_in $end
$var reg 1 .f c_out $end
$var reg 1 /f g $end
$var reg 1 0f p $end
$var reg 1 1f sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 2f a $end
$var wire 1 3f b $end
$var wire 1 4f c_in $end
$var reg 1 5f c_out $end
$var reg 1 6f g $end
$var reg 1 7f p $end
$var reg 1 8f sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 9f a $end
$var wire 1 :f b $end
$var wire 1 ;f c_in $end
$var reg 1 <f c_out $end
$var reg 1 =f g $end
$var reg 1 >f p $end
$var reg 1 ?f sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 @f a $end
$var wire 1 Af b $end
$var wire 1 Bf c_in $end
$var reg 1 Cf c_out $end
$var reg 1 Df g $end
$var reg 1 Ef p $end
$var reg 1 Ff sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 Gf a [1:0] $end
$var wire 2 Hf b [1:0] $end
$var wire 1 If c_in $end
$var wire 2 Jf sum [1:0] $end
$var wire 3 Kf carries [2:0] $end
$var wire 1 Lf c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 Mf a $end
$var wire 1 Nf b $end
$var wire 1 Of c_in $end
$var reg 1 Pf c_out $end
$var reg 1 Qf g $end
$var reg 1 Rf p $end
$var reg 1 Sf sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 Tf a $end
$var wire 1 Uf b $end
$var wire 1 Vf c_in $end
$var reg 1 Wf c_out $end
$var reg 1 Xf g $end
$var reg 1 Yf p $end
$var reg 1 Zf sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 [f a [1:0] $end
$var wire 2 \f b [1:0] $end
$var wire 1 ]f c_in $end
$var wire 2 ^f sum [1:0] $end
$var wire 3 _f carries [2:0] $end
$var wire 1 `f c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 af a $end
$var wire 1 bf b $end
$var wire 1 cf c_in $end
$var reg 1 df c_out $end
$var reg 1 ef g $end
$var reg 1 ff p $end
$var reg 1 gf sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 hf a $end
$var wire 1 if b $end
$var wire 1 jf c_in $end
$var reg 1 kf c_out $end
$var reg 1 lf g $end
$var reg 1 mf p $end
$var reg 1 nf sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 of a [2:0] $end
$var wire 3 pf b [2:0] $end
$var wire 1 qf c_in $end
$var wire 3 rf sum [2:0] $end
$var wire 4 sf carries [3:0] $end
$var wire 1 tf c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 uf a $end
$var wire 1 vf b $end
$var wire 1 wf c_in $end
$var reg 1 xf c_out $end
$var reg 1 yf g $end
$var reg 1 zf p $end
$var reg 1 {f sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 |f a $end
$var wire 1 }f b $end
$var wire 1 ~f c_in $end
$var reg 1 !g c_out $end
$var reg 1 "g g $end
$var reg 1 #g p $end
$var reg 1 $g sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 %g a $end
$var wire 1 &g b $end
$var wire 1 'g c_in $end
$var reg 1 (g c_out $end
$var reg 1 )g g $end
$var reg 1 *g p $end
$var reg 1 +g sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[7] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 ,g neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 -g state_0 $end
$var wire 6 .g two_bit_sums [5:0] $end
$var wire 8 /g one_bit_sums [7:0] $end
$var wire 4 0g living_neighbors [3:0] $end
$var reg 1 1g continue_alive $end
$var reg 1 2g enabled_output $end
$var reg 1 3g is_3 $end
$var reg 1 4g reset_output $end
$var reg 1 5g state_d $end
$var reg 1 6g state_q $end
$scope module adder_1_1 $end
$var wire 1 7g a $end
$var wire 1 8g b $end
$var wire 1 9g c_in $end
$var reg 1 :g c_out $end
$var reg 1 ;g g $end
$var reg 1 <g p $end
$var reg 1 =g sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 >g a $end
$var wire 1 ?g b $end
$var wire 1 @g c_in $end
$var reg 1 Ag c_out $end
$var reg 1 Bg g $end
$var reg 1 Cg p $end
$var reg 1 Dg sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 Eg a $end
$var wire 1 Fg b $end
$var wire 1 Gg c_in $end
$var reg 1 Hg c_out $end
$var reg 1 Ig g $end
$var reg 1 Jg p $end
$var reg 1 Kg sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 Lg a $end
$var wire 1 Mg b $end
$var wire 1 Ng c_in $end
$var reg 1 Og c_out $end
$var reg 1 Pg g $end
$var reg 1 Qg p $end
$var reg 1 Rg sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 Sg a [1:0] $end
$var wire 2 Tg b [1:0] $end
$var wire 1 Ug c_in $end
$var wire 2 Vg sum [1:0] $end
$var wire 3 Wg carries [2:0] $end
$var wire 1 Xg c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 Yg a $end
$var wire 1 Zg b $end
$var wire 1 [g c_in $end
$var reg 1 \g c_out $end
$var reg 1 ]g g $end
$var reg 1 ^g p $end
$var reg 1 _g sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 `g a $end
$var wire 1 ag b $end
$var wire 1 bg c_in $end
$var reg 1 cg c_out $end
$var reg 1 dg g $end
$var reg 1 eg p $end
$var reg 1 fg sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 gg a [1:0] $end
$var wire 2 hg b [1:0] $end
$var wire 1 ig c_in $end
$var wire 2 jg sum [1:0] $end
$var wire 3 kg carries [2:0] $end
$var wire 1 lg c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 mg a $end
$var wire 1 ng b $end
$var wire 1 og c_in $end
$var reg 1 pg c_out $end
$var reg 1 qg g $end
$var reg 1 rg p $end
$var reg 1 sg sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 tg a $end
$var wire 1 ug b $end
$var wire 1 vg c_in $end
$var reg 1 wg c_out $end
$var reg 1 xg g $end
$var reg 1 yg p $end
$var reg 1 zg sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 {g a [2:0] $end
$var wire 3 |g b [2:0] $end
$var wire 1 }g c_in $end
$var wire 3 ~g sum [2:0] $end
$var wire 4 !h carries [3:0] $end
$var wire 1 "h c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 #h a $end
$var wire 1 $h b $end
$var wire 1 %h c_in $end
$var reg 1 &h c_out $end
$var reg 1 'h g $end
$var reg 1 (h p $end
$var reg 1 )h sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 *h a $end
$var wire 1 +h b $end
$var wire 1 ,h c_in $end
$var reg 1 -h c_out $end
$var reg 1 .h g $end
$var reg 1 /h p $end
$var reg 1 0h sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 1h a $end
$var wire 1 2h b $end
$var wire 1 3h c_in $end
$var reg 1 4h c_out $end
$var reg 1 5h g $end
$var reg 1 6h p $end
$var reg 1 7h sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[8] $end
$scope begin genblk1 $end
$scope module CELL $end
$var wire 1 " clk $end
$var wire 1 0 ena $end
$var wire 8 8h neighbors [7:0] $end
$var wire 1 / rst $end
$var wire 1 9h state_0 $end
$var wire 6 :h two_bit_sums [5:0] $end
$var wire 8 ;h one_bit_sums [7:0] $end
$var wire 4 <h living_neighbors [3:0] $end
$var reg 1 =h continue_alive $end
$var reg 1 >h enabled_output $end
$var reg 1 ?h is_3 $end
$var reg 1 @h reset_output $end
$var reg 1 Ah state_d $end
$var reg 1 Bh state_q $end
$scope module adder_1_1 $end
$var wire 1 Ch a $end
$var wire 1 Dh b $end
$var wire 1 Eh c_in $end
$var reg 1 Fh c_out $end
$var reg 1 Gh g $end
$var reg 1 Hh p $end
$var reg 1 Ih sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 Jh a $end
$var wire 1 Kh b $end
$var wire 1 Lh c_in $end
$var reg 1 Mh c_out $end
$var reg 1 Nh g $end
$var reg 1 Oh p $end
$var reg 1 Ph sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 Qh a $end
$var wire 1 Rh b $end
$var wire 1 Sh c_in $end
$var reg 1 Th c_out $end
$var reg 1 Uh g $end
$var reg 1 Vh p $end
$var reg 1 Wh sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 Xh a $end
$var wire 1 Yh b $end
$var wire 1 Zh c_in $end
$var reg 1 [h c_out $end
$var reg 1 \h g $end
$var reg 1 ]h p $end
$var reg 1 ^h sum $end
$upscope $end
$scope module adder_2_1 $end
$var wire 2 _h a [1:0] $end
$var wire 2 `h b [1:0] $end
$var wire 1 ah c_in $end
$var wire 2 bh sum [1:0] $end
$var wire 3 ch carries [2:0] $end
$var wire 1 dh c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 eh a $end
$var wire 1 fh b $end
$var wire 1 gh c_in $end
$var reg 1 hh c_out $end
$var reg 1 ih g $end
$var reg 1 jh p $end
$var reg 1 kh sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 lh a $end
$var wire 1 mh b $end
$var wire 1 nh c_in $end
$var reg 1 oh c_out $end
$var reg 1 ph g $end
$var reg 1 qh p $end
$var reg 1 rh sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_2_2 $end
$var wire 2 sh a [1:0] $end
$var wire 2 th b [1:0] $end
$var wire 1 uh c_in $end
$var wire 2 vh sum [1:0] $end
$var wire 3 wh carries [2:0] $end
$var wire 1 xh c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 yh a $end
$var wire 1 zh b $end
$var wire 1 {h c_in $end
$var reg 1 |h c_out $end
$var reg 1 }h g $end
$var reg 1 ~h p $end
$var reg 1 !i sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 "i a $end
$var wire 1 #i b $end
$var wire 1 $i c_in $end
$var reg 1 %i c_out $end
$var reg 1 &i g $end
$var reg 1 'i p $end
$var reg 1 (i sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_3 $end
$var wire 3 )i a [2:0] $end
$var wire 3 *i b [2:0] $end
$var wire 1 +i c_in $end
$var wire 3 ,i sum [2:0] $end
$var wire 4 -i carries [3:0] $end
$var wire 1 .i c_out $end
$scope begin ripple_carry[0] $end
$scope module ADDER $end
$var wire 1 /i a $end
$var wire 1 0i b $end
$var wire 1 1i c_in $end
$var reg 1 2i c_out $end
$var reg 1 3i g $end
$var reg 1 4i p $end
$var reg 1 5i sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[1] $end
$scope module ADDER $end
$var wire 1 6i a $end
$var wire 1 7i b $end
$var wire 1 8i c_in $end
$var reg 1 9i c_out $end
$var reg 1 :i g $end
$var reg 1 ;i p $end
$var reg 1 <i sum $end
$upscope $end
$upscope $end
$scope begin ripple_carry[2] $end
$scope module ADDER $end
$var wire 1 =i a $end
$var wire 1 >i b $end
$var wire 1 ?i c_in $end
$var reg 1 @i c_out $end
$var reg 1 Ai g $end
$var reg 1 Bi p $end
$var reg 1 Ci sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_y[9] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin cells_x[9] $end
$scope begin cells_y[0] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[1] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[2] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[3] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[4] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[5] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[6] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[7] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[8] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin cells_y[9] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$scope begin genblk2[5] $end
$upscope $end
$scope begin genblk2[6] $end
$upscope $end
$scope begin genblk2[7] $end
$upscope $end
$scope module LED_DRIVER $end
$var wire 64 Di cells [63:0] $end
$var wire 8 Ei cols [7:0] $end
$var wire 1 Fi ena $end
$var wire 4 Gi x [3:0] $end
$var wire 8 Hi x_decoded [7:0] $end
$var wire 8 Ii rows [7:0] $end
$scope begin genblk1[0] $end
$var wire 8 Ji row_products [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$scope begin genblk1[4] $end
$upscope $end
$scope begin genblk1[5] $end
$upscope $end
$scope begin genblk1[6] $end
$upscope $end
$scope begin genblk1[7] $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$var wire 8 Ki row_products [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$scope begin genblk1[4] $end
$upscope $end
$scope begin genblk1[5] $end
$upscope $end
$scope begin genblk1[6] $end
$upscope $end
$scope begin genblk1[7] $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$var wire 8 Li row_products [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$scope begin genblk1[4] $end
$upscope $end
$scope begin genblk1[5] $end
$upscope $end
$scope begin genblk1[6] $end
$upscope $end
$scope begin genblk1[7] $end
$upscope $end
$upscope $end
$scope begin genblk1[3] $end
$var wire 8 Mi row_products [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$scope begin genblk1[4] $end
$upscope $end
$scope begin genblk1[5] $end
$upscope $end
$scope begin genblk1[6] $end
$upscope $end
$scope begin genblk1[7] $end
$upscope $end
$upscope $end
$scope begin genblk1[4] $end
$var wire 8 Ni row_products [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$scope begin genblk1[4] $end
$upscope $end
$scope begin genblk1[5] $end
$upscope $end
$scope begin genblk1[6] $end
$upscope $end
$scope begin genblk1[7] $end
$upscope $end
$upscope $end
$scope begin genblk1[5] $end
$var wire 8 Oi row_products [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$scope begin genblk1[4] $end
$upscope $end
$scope begin genblk1[5] $end
$upscope $end
$scope begin genblk1[6] $end
$upscope $end
$scope begin genblk1[7] $end
$upscope $end
$upscope $end
$scope begin genblk1[6] $end
$var wire 8 Pi row_products [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$scope begin genblk1[4] $end
$upscope $end
$scope begin genblk1[5] $end
$upscope $end
$scope begin genblk1[6] $end
$upscope $end
$scope begin genblk1[7] $end
$upscope $end
$upscope $end
$scope begin genblk1[7] $end
$var wire 8 Qi row_products [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$scope begin genblk1[4] $end
$upscope $end
$scope begin genblk1[5] $end
$upscope $end
$scope begin genblk1[6] $end
$upscope $end
$scope begin genblk1[7] $end
$upscope $end
$upscope $end
$scope module COL_DECODER $end
$var wire 1 Fi ena $end
$var wire 3 Ri in [2:0] $end
$var wire 2 Si out_en [1:0] $end
$var wire 8 Ti out [7:0] $end
$scope module deco_1 $end
$var wire 1 Ui ena $end
$var wire 2 Vi in [1:0] $end
$var wire 2 Wi out_en [1:0] $end
$var wire 4 Xi out [3:0] $end
$scope module deco_0 $end
$var wire 1 Yi ena $end
$var wire 1 Zi in $end
$var reg 2 [i out [1:0] $end
$upscope $end
$scope module deco_1 $end
$var wire 1 \i ena $end
$var wire 1 ]i in $end
$var reg 2 ^i out [1:0] $end
$upscope $end
$scope module deco_en $end
$var wire 1 Ui ena $end
$var wire 1 _i in $end
$var reg 2 `i out [1:0] $end
$upscope $end
$upscope $end
$scope module deco_2 $end
$var wire 1 ai ena $end
$var wire 2 bi in [1:0] $end
$var wire 2 ci out_en [1:0] $end
$var wire 4 di out [3:0] $end
$scope module deco_0 $end
$var wire 1 ei ena $end
$var wire 1 fi in $end
$var reg 2 gi out [1:0] $end
$upscope $end
$scope module deco_1 $end
$var wire 1 hi ena $end
$var wire 1 ii in $end
$var reg 2 ji out [1:0] $end
$upscope $end
$scope module deco_en $end
$var wire 1 ai ena $end
$var wire 1 ki in $end
$var reg 2 li out [1:0] $end
$upscope $end
$upscope $end
$scope module deco_en $end
$var wire 1 Fi ena $end
$var wire 1 mi in $end
$var reg 2 ni out [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin clocks_and_dividers $end
$upscope $end
$scope begin io_logic $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx ni
xmi
bx li
xki
bx ji
xii
xhi
bx gi
xfi
xei
bx di
bx ci
bx bi
xai
bx `i
x_i
bx ^i
x]i
x\i
bx [i
xZi
xYi
bx Xi
bx Wi
bx Vi
xUi
bx Ti
bx Si
bx Ri
bx Qi
bx Pi
bx Oi
bx Ni
bx Mi
bx Li
bx Ki
bx Ji
bx Ii
bx Hi
bx Gi
1Fi
bx Ei
bx Di
xCi
0Bi
0Ai
0@i
x?i
0>i
0=i
x<i
x;i
0:i
x9i
x8i
x7i
06i
x5i
x4i
x3i
x2i
01i
x0i
x/i
0.i
b0xx0 -i
bx ,i
0+i
b0xx *i
b0x )i
x(i
x'i
0&i
0%i
0$i
x#i
0"i
x!i
x~h
0}h
0|h
0{h
xzh
0yh
0xh
b0 wh
bx vh
0uh
bx th
b0 sh
0rh
0qh
0ph
0oh
0nh
0mh
0lh
xkh
xjh
0ih
0hh
0gh
0fh
xeh
0dh
b0 ch
b0x bh
0ah
b0 `h
b0x _h
x^h
x]h
x\h
x[h
0Zh
xYh
xXh
0Wh
0Vh
0Uh
0Th
0Sh
0Rh
0Qh
0Ph
0Oh
0Nh
0Mh
0Lh
0Kh
0Jh
xIh
xHh
0Gh
0Fh
0Eh
0Dh
xCh
xBh
xAh
0@h
x?h
x>h
x=h
b0xxx <h
bx00000x ;h
b0xx00x :h
09h
bx00000x 8h
x7h
x6h
05h
x4h
x3h
x2h
01h
x0h
x/h
0.h
x-h
x,h
x+h
0*h
x)h
x(h
x'h
x&h
0%h
x$h
x#h
x"h
bx0 !h
bx ~g
0}g
bx |g
b0x {g
xzg
xyg
xxg
xwg
xvg
xug
xtg
xsg
xrg
xqg
xpg
0og
xng
xmg
xlg
bx0 kg
bx jg
0ig
bx hg
bx gg
0fg
0eg
0dg
0cg
0bg
0ag
0`g
x_g
x^g
0]g
0\g
0[g
0Zg
xYg
0Xg
b0 Wg
b0x Vg
0Ug
b0 Tg
b0x Sg
xRg
xQg
xPg
xOg
0Ng
xMg
xLg
xKg
xJg
xIg
xHg
0Gg
xFg
xEg
0Dg
0Cg
0Bg
0Ag
0@g
0?g
0>g
x=g
x<g
0;g
0:g
09g
08g
x7g
x6g
x5g
04g
x3g
x2g
x1g
bx 0g
bx000x /g
bx00x .g
0-g
bx000x ,g
x+g
x*g
0)g
x(g
x'g
x&g
0%g
x$g
x#g
0"g
x!g
x~f
x}f
0|f
x{f
xzf
xyf
xxf
0wf
xvf
xuf
xtf
bx0 sf
bx rf
0qf
bx pf
b0x of
xnf
xmf
xlf
xkf
xjf
xif
xhf
xgf
xff
xef
xdf
0cf
xbf
xaf
x`f
bx0 _f
bx ^f
0]f
bx \f
bx [f
0Zf
0Yf
0Xf
0Wf
0Vf
0Uf
0Tf
xSf
xRf
0Qf
0Pf
0Of
0Nf
xMf
0Lf
b0 Kf
b0x Jf
0If
b0 Hf
b0x Gf
xFf
xEf
xDf
xCf
0Bf
xAf
x@f
x?f
x>f
x=f
x<f
0;f
x:f
x9f
08f
07f
06f
05f
04f
03f
02f
x1f
x0f
0/f
0.f
0-f
0,f
x+f
x*f
x)f
0(f
x'f
x&f
x%f
bx $f
bx000x #f
bx00x "f
0!f
bx000x ~e
x}e
x|e
0{e
xze
xye
xxe
0we
xve
xue
0te
xse
xre
xqe
0pe
xoe
xne
xme
xle
0ke
xje
xie
xhe
bx0 ge
bx fe
0ee
bx de
b0x ce
xbe
xae
x`e
x_e
x^e
x]e
x\e
x[e
xZe
xYe
xXe
0We
xVe
xUe
xTe
bx0 Se
bx Re
0Qe
bx Pe
bx Oe
0Ne
0Me
0Le
0Ke
0Je
0Ie
0He
xGe
xFe
0Ee
0De
0Ce
0Be
xAe
0@e
b0 ?e
b0x >e
0=e
b0 <e
b0x ;e
x:e
x9e
x8e
x7e
06e
x5e
x4e
x3e
x2e
x1e
x0e
0/e
x.e
x-e
0,e
0+e
0*e
0)e
0(e
0'e
0&e
x%e
x$e
0#e
0"e
0!e
0~d
x}d
x|d
x{d
0zd
xyd
xxd
xwd
bx vd
bx000x ud
bx00x td
0sd
bx000x rd
xqd
xpd
0od
xnd
xmd
xld
0kd
xjd
xid
0hd
xgd
xfd
xed
0dd
xcd
xbd
xad
x`d
0_d
x^d
x]d
x\d
bx0 [d
bx Zd
0Yd
bx Xd
b0x Wd
xVd
xUd
xTd
xSd
xRd
xQd
xPd
xOd
xNd
xMd
xLd
0Kd
xJd
xId
xHd
bx0 Gd
bx Fd
0Ed
bx Dd
bx Cd
0Bd
0Ad
0@d
0?d
0>d
0=d
0<d
x;d
x:d
09d
08d
07d
06d
x5d
04d
b0 3d
b0x 2d
01d
b0 0d
b0x /d
x.d
x-d
x,d
x+d
0*d
x)d
x(d
x'd
x&d
x%d
x$d
0#d
x"d
x!d
0~c
0}c
0|c
0{c
0zc
0yc
0xc
xwc
xvc
0uc
0tc
0sc
0rc
xqc
xpc
xoc
0nc
xmc
xlc
xkc
bx jc
bx000x ic
bx00x hc
0gc
bx000x fc
xec
xdc
0cc
xbc
xac
x`c
0_c
x^c
x]c
0\c
x[c
xZc
xYc
0Xc
xWc
xVc
xUc
xTc
0Sc
xRc
xQc
xPc
bx0 Oc
bx Nc
0Mc
bx Lc
b0x Kc
xJc
xIc
xHc
xGc
xFc
xEc
xDc
xCc
xBc
xAc
x@c
0?c
x>c
x=c
x<c
bx0 ;c
bx :c
09c
bx 8c
bx 7c
06c
05c
04c
03c
02c
01c
00c
x/c
x.c
0-c
0,c
0+c
0*c
x)c
0(c
b0 'c
b0x &c
0%c
b0 $c
b0x #c
x"c
x!c
x~b
x}b
0|b
x{b
xzb
xyb
xxb
xwb
xvb
0ub
xtb
xsb
0rb
0qb
0pb
0ob
0nb
0mb
0lb
xkb
xjb
0ib
0hb
0gb
0fb
xeb
xdb
xcb
0bb
xab
x`b
x_b
bx ^b
bx000x ]b
bx00x \b
0[b
bx000x Zb
xYb
xXb
0Wb
xVb
xUb
xTb
0Sb
xRb
xQb
0Pb
xOb
xNb
xMb
0Lb
xKb
xJb
xIb
xHb
0Gb
xFb
xEb
xDb
bx0 Cb
bx Bb
0Ab
bx @b
b0x ?b
x>b
x=b
x<b
x;b
x:b
x9b
x8b
x7b
x6b
x5b
x4b
03b
x2b
x1b
x0b
bx0 /b
bx .b
0-b
bx ,b
bx +b
0*b
0)b
0(b
0'b
0&b
0%b
0$b
x#b
x"b
0!b
0~a
0}a
0|a
x{a
0za
b0 ya
b0x xa
0wa
b0 va
b0x ua
xta
xsa
xra
xqa
0pa
xoa
xna
xma
xla
xka
xja
0ia
xha
xga
0fa
0ea
0da
0ca
0ba
0aa
0`a
x_a
x^a
0]a
0\a
0[a
0Za
xYa
xXa
xWa
0Va
xUa
xTa
xSa
bx Ra
bx000x Qa
bx00x Pa
0Oa
bx000x Na
xMa
xLa
0Ka
0Ja
0Ia
xHa
0Ga
xFa
xEa
0Da
0Ca
0Ba
xAa
0@a
x?a
x>a
0=a
0<a
0;a
x:a
09a
08a
b0 7a
bx 6a
05a
bx 4a
b0 3a
x2a
x1a
00a
x/a
x.a
0-a
x,a
x+a
x*a
x)a
x(a
0'a
x&a
x%a
x$a
bx0 #a
bx "a
0!a
b0x ~`
bx }`
0|`
0{`
0z`
0y`
0x`
0w`
0v`
0u`
0t`
0s`
0r`
0q`
0p`
0o`
0n`
b0 m`
b0 l`
0k`
b0 j`
b0 i`
xh`
xg`
0f`
0e`
0d`
0c`
xb`
xa`
x``
x_`
x^`
0]`
x\`
x[`
0Z`
0Y`
0X`
0W`
0V`
0U`
0T`
0S`
0R`
0Q`
0P`
0O`
0N`
0M`
xL`
xK`
0J`
xI`
xH`
xG`
b0xxx F`
b0xxx0000 E`
bx000 D`
0C`
b0xxx0000 B`
xA`
x@`
0?`
x>`
x=`
0<`
x;`
x:`
x9`
x8`
x7`
x6`
x5`
x4`
x3`
x2`
x1`
x0`
0/`
x.`
x-`
x,`
bx0 +`
bx *`
0)`
b0xx (`
bx '`
x&`
x%`
0$`
0#`
0"`
x!`
0~_
x}_
x|_
0{_
0z_
0y_
xx_
0w_
0v_
b0 u_
bx t_
0s_
bx r_
b0 q_
xp_
xo_
0n_
xm_
xl_
0k_
xj_
xi_
xh_
xg_
xf_
0e_
xd_
xc_
xb_
bx0 a_
bx `_
0__
b0x ^_
bx ]_
x\_
x[_
xZ_
xY_
0X_
xW_
xV_
0U_
0T_
0S_
0R_
0Q_
0P_
0O_
xN_
xM_
0L_
0K_
0J_
0I_
xH_
xG_
xF_
xE_
xD_
0C_
xB_
xA_
x@_
x?_
0>_
x=_
x<_
x;_
bx :_
bx000xxx 9_
b0xxxxx 8_
07_
bx000xxx 6_
x5_
x4_
x3_
x2_
x1_
x0_
x/_
x._
x-_
x,_
x+_
x*_
x)_
x(_
x'_
x&_
x%_
x$_
0#_
x"_
x!_
x~^
bx0 }^
bx |^
0{^
bx z^
bx y^
xx^
xw^
xv^
xu^
xt^
xs^
xr^
xq^
xp^
xo^
xn^
0m^
xl^
xk^
xj^
bx0 i^
bx h^
0g^
bx f^
bx e^
xd^
xc^
xb^
xa^
x`^
x_^
x^^
x]^
x\^
x[^
xZ^
0Y^
xX^
xW^
xV^
bx0 U^
bx T^
0S^
bx R^
bx Q^
xP^
xO^
xN^
xM^
0L^
xK^
xJ^
xI^
xH^
xG^
xF^
0E^
xD^
xC^
xB^
xA^
x@^
x?^
0>^
x=^
x<^
x;^
x:^
x9^
x8^
07^
x6^
x5^
x4^
x3^
02^
x1^
x0^
x/^
bx .^
bx -^
bx ,^
0+^
bx *^
x)^
x(^
x'^
x&^
x%^
x$^
x#^
x"^
x!^
x~]
x}]
x|]
x{]
xz]
xy]
xx]
xw]
xv]
0u]
xt]
xs]
xr]
bx0 q]
bx p]
0o]
bx n]
bx m]
xl]
xk]
xj]
xi]
xh]
xg]
xf]
xe]
xd]
xc]
xb]
0a]
x`]
x_]
x^]
bx0 ]]
bx \]
0[]
bx Z]
bx Y]
xX]
xW]
xV]
xU]
xT]
xS]
xR]
xQ]
xP]
xO]
xN]
0M]
xL]
xK]
xJ]
bx0 I]
bx H]
0G]
bx F]
bx E]
xD]
xC]
xB]
xA]
0@]
x?]
x>]
x=]
x<]
x;]
x:]
09]
x8]
x7]
x6]
x5]
x4]
x3]
02]
x1]
x0]
x/]
x.]
x-]
x,]
0+]
x*]
x)]
x(]
x']
1&]
x%]
x$]
x#]
bx "]
bx !]
bx ~\
1}\
bx |\
x{\
xz\
xy\
xx\
xw\
xv\
xu\
xt\
xs\
xr\
xq\
xp\
xo\
xn\
xm\
xl\
xk\
xj\
0i\
xh\
xg\
xf\
bx0 e\
bx d\
0c\
bx b\
bx a\
x`\
x_\
x^\
x]\
x\\
x[\
xZ\
xY\
xX\
xW\
xV\
0U\
xT\
xS\
xR\
bx0 Q\
bx P\
0O\
bx N\
bx M\
xL\
xK\
xJ\
xI\
xH\
xG\
xF\
xE\
xD\
xC\
xB\
0A\
x@\
x?\
x>\
bx0 =\
bx <\
0;\
bx :\
bx 9\
x8\
x7\
x6\
x5\
04\
x3\
x2\
x1\
x0\
x/\
x.\
0-\
x,\
x+\
x*\
x)\
x(\
x'\
0&\
x%\
x$\
x#\
x"\
x!\
x~[
0}[
x|[
x{[
xz[
xy[
0x[
xw[
xv[
xu[
bx t[
bx s[
bx r[
0q[
bx p[
xo[
xn[
xm[
xl[
xk[
xj[
xi[
xh[
xg[
xf[
xe[
xd[
xc[
xb[
xa[
x`[
x_[
x^[
0][
x\[
x[[
xZ[
bx0 Y[
bx X[
0W[
bx V[
bx U[
xT[
xS[
xR[
xQ[
xP[
xO[
xN[
xM[
xL[
xK[
xJ[
0I[
xH[
xG[
xF[
bx0 E[
bx D[
0C[
bx B[
bx A[
x@[
x?[
x>[
x=[
x<[
x;[
x:[
x9[
x8[
x7[
x6[
05[
x4[
x3[
x2[
bx0 1[
bx 0[
0/[
bx .[
bx -[
x,[
x+[
x*[
x)[
0([
x'[
x&[
x%[
x$[
x#[
x"[
0![
x~Z
x}Z
x|Z
x{Z
xzZ
xyZ
0xZ
xwZ
xvZ
xuZ
xtZ
xsZ
xrZ
0qZ
xpZ
xoZ
xnZ
xmZ
0lZ
xkZ
xjZ
xiZ
bx hZ
bx gZ
bx fZ
0eZ
bx dZ
xcZ
xbZ
xaZ
x`Z
x_Z
x^Z
x]Z
x\Z
x[Z
xZZ
xYZ
xXZ
xWZ
xVZ
xUZ
xTZ
xSZ
xRZ
0QZ
xPZ
xOZ
xNZ
bx0 MZ
bx LZ
0KZ
bx JZ
bx IZ
xHZ
xGZ
xFZ
xEZ
xDZ
xCZ
xBZ
xAZ
x@Z
x?Z
x>Z
0=Z
x<Z
x;Z
x:Z
bx0 9Z
bx 8Z
07Z
bx 6Z
bx 5Z
x4Z
x3Z
x2Z
x1Z
x0Z
x/Z
x.Z
x-Z
x,Z
x+Z
x*Z
0)Z
x(Z
x'Z
x&Z
bx0 %Z
bx $Z
0#Z
bx "Z
bx !Z
x~Y
x}Y
x|Y
x{Y
0zY
xyY
xxY
xwY
xvY
xuY
xtY
0sY
xrY
xqY
xpY
xoY
xnY
xmY
0lY
xkY
xjY
xiY
xhY
xgY
xfY
0eY
xdY
xcY
xbY
xaY
0`Y
x_Y
x^Y
x]Y
bx \Y
bx [Y
bx ZY
0YY
bx XY
xWY
xVY
xUY
xTY
xSY
xRY
xQY
xPY
xOY
xNY
xMY
xLY
xKY
xJY
xIY
xHY
xGY
xFY
0EY
xDY
xCY
xBY
bx0 AY
bx @Y
0?Y
bx >Y
bx =Y
x<Y
x;Y
x:Y
x9Y
x8Y
x7Y
x6Y
x5Y
x4Y
x3Y
x2Y
01Y
x0Y
x/Y
x.Y
bx0 -Y
bx ,Y
0+Y
bx *Y
bx )Y
x(Y
x'Y
x&Y
x%Y
x$Y
x#Y
x"Y
x!Y
x~X
x}X
x|X
0{X
xzX
xyX
xxX
bx0 wX
bx vX
0uX
bx tX
bx sX
xrX
xqX
xpX
xoX
0nX
xmX
xlX
xkX
xjX
xiX
xhX
0gX
xfX
xeX
xdX
xcX
xbX
xaX
0`X
x_X
x^X
x]X
x\X
x[X
xZX
0YX
xXX
xWX
xVX
xUX
0TX
xSX
xRX
xQX
bx PX
bx OX
bx NX
0MX
bx LX
xKX
xJX
0IX
xHX
xGX
xFX
0EX
xDX
xCX
xBX
xAX
x@X
x?X
x>X
x=X
x<X
x;X
x:X
09X
x8X
x7X
x6X
bx0 5X
bx 4X
03X
bx 2X
b0xx 1X
x0X
x/X
0.X
x-X
x,X
0+X
x*X
x)X
x(X
x'X
x&X
0%X
x$X
x#X
x"X
bx0 !X
bx ~W
0}W
b0x |W
bx {W
xzW
xyW
0xW
0wW
0vW
xuW
0tW
xsW
xrW
0qW
0pW
0oW
xnW
0mW
0lW
b0 kW
bx jW
0iW
bx hW
b0 gW
xfW
xeW
0dW
0cW
0bW
0aW
x`W
x_W
x^W
x]W
x\W
0[W
xZW
xYW
xXW
xWW
xVW
xUW
0TW
xSW
xRW
0QW
0PW
0OW
0NW
0MW
0LW
0KW
xJW
xIW
0HW
xGW
xFW
xEW
bx DW
b0xxxxx00 CW
bx0xx BW
0AW
b0xxxxx00 @W
x?W
x>W
0=W
x<W
x;W
0:W
x9W
x8W
x7W
x6W
x5W
x4W
x3W
x2W
x1W
x0W
x/W
x.W
0-W
x,W
x+W
x*W
bx0 )W
bx (W
0'W
b0xx &W
bx %W
x$W
x#W
0"W
0!W
0~V
x}V
0|V
x{V
xzV
0yV
0xV
0wV
xvV
0uV
0tV
b0 sV
bx rV
0qV
bx pV
b0 oV
xnV
xmV
0lV
xkV
xjV
0iV
xhV
xgV
xfV
xeV
xdV
0cV
xbV
xaV
x`V
bx0 _V
bx ^V
0]V
b0x \V
bx [V
xZV
xYV
xXV
xWV
0VV
xUV
xTV
0SV
0RV
0QV
0PV
0OV
0NV
0MV
xLV
xKV
0JV
0IV
0HV
0GV
xFV
xEV
xDV
xCV
xBV
0AV
x@V
x?V
x>V
x=V
1<V
x;V
x:V
x9V
bx 8V
bx000xxx 7V
b0xxxxx 6V
15V
bx000xxx 4V
x3V
x2V
x1V
x0V
x/V
x.V
x-V
x,V
x+V
x*V
x)V
x(V
x'V
x&V
x%V
x$V
x#V
x"V
0!V
x~U
x}U
x|U
bx0 {U
bx zU
0yU
bx xU
bx wU
xvU
xuU
xtU
xsU
xrU
xqU
xpU
xoU
xnU
xmU
xlU
0kU
xjU
xiU
xhU
bx0 gU
bx fU
0eU
bx dU
bx cU
xbU
xaU
x`U
x_U
x^U
x]U
x\U
x[U
xZU
xYU
xXU
0WU
xVU
xUU
xTU
bx0 SU
bx RU
0QU
bx PU
bx OU
xNU
xMU
xLU
xKU
0JU
xIU
xHU
xGU
xFU
xEU
xDU
0CU
xBU
xAU
x@U
x?U
x>U
x=U
0<U
x;U
x:U
x9U
x8U
x7U
x6U
05U
x4U
x3U
x2U
x1U
00U
x/U
x.U
x-U
bx ,U
bx +U
bx *U
0)U
bx (U
x'U
x&U
x%U
x$U
x#U
x"U
x!U
x~T
x}T
x|T
x{T
xzT
xyT
xxT
xwT
xvT
xuT
xtT
0sT
xrT
xqT
xpT
bx0 oT
bx nT
0mT
bx lT
bx kT
xjT
xiT
xhT
xgT
xfT
xeT
xdT
xcT
xbT
xaT
x`T
0_T
x^T
x]T
x\T
bx0 [T
bx ZT
0YT
bx XT
bx WT
xVT
xUT
xTT
xST
xRT
xQT
xPT
xOT
xNT
xMT
xLT
0KT
xJT
xIT
xHT
bx0 GT
bx FT
0ET
bx DT
bx CT
xBT
xAT
x@T
x?T
0>T
x=T
x<T
x;T
x:T
x9T
x8T
07T
x6T
x5T
x4T
x3T
x2T
x1T
00T
x/T
x.T
x-T
x,T
x+T
x*T
0)T
x(T
x'T
x&T
x%T
1$T
x#T
x"T
x!T
bx ~S
bx }S
bx |S
1{S
bx zS
xyS
xxS
xwS
xvS
xuS
xtS
xsS
xrS
xqS
xpS
xoS
xnS
xmS
xlS
xkS
xjS
xiS
xhS
0gS
xfS
xeS
xdS
bx0 cS
bx bS
0aS
bx `S
bx _S
x^S
x]S
x\S
x[S
xZS
xYS
xXS
xWS
xVS
xUS
xTS
0SS
xRS
xQS
xPS
bx0 OS
bx NS
0MS
bx LS
bx KS
xJS
xIS
xHS
xGS
xFS
xES
xDS
xCS
xBS
xAS
x@S
0?S
x>S
x=S
x<S
bx0 ;S
bx :S
09S
bx 8S
bx 7S
x6S
x5S
x4S
x3S
02S
x1S
x0S
x/S
x.S
x-S
x,S
0+S
x*S
x)S
x(S
x'S
x&S
x%S
0$S
x#S
x"S
x!S
x~R
x}R
x|R
0{R
xzR
xyR
xxR
xwR
0vR
xuR
xtR
xsR
bx rR
bx qR
bx pR
0oR
bx nR
xmR
xlR
xkR
xjR
xiR
xhR
xgR
xfR
xeR
xdR
xcR
xbR
xaR
x`R
x_R
x^R
x]R
x\R
0[R
xZR
xYR
xXR
bx0 WR
bx VR
0UR
bx TR
bx SR
xRR
xQR
xPR
xOR
xNR
xMR
xLR
xKR
xJR
xIR
xHR
0GR
xFR
xER
xDR
bx0 CR
bx BR
0AR
bx @R
bx ?R
x>R
x=R
x<R
x;R
x:R
x9R
x8R
x7R
x6R
x5R
x4R
03R
x2R
x1R
x0R
bx0 /R
bx .R
0-R
bx ,R
bx +R
x*R
x)R
x(R
x'R
0&R
x%R
x$R
x#R
x"R
x!R
x~Q
0}Q
x|Q
x{Q
xzQ
xyQ
xxQ
xwQ
0vQ
xuQ
xtQ
xsQ
xrQ
xqQ
xpQ
0oQ
xnQ
xmQ
xlQ
xkQ
0jQ
xiQ
xhQ
xgQ
bx fQ
bx eQ
bx dQ
0cQ
bx bQ
xaQ
x`Q
x_Q
x^Q
x]Q
x\Q
x[Q
xZQ
xYQ
xXQ
xWQ
xVQ
xUQ
xTQ
xSQ
xRQ
xQQ
xPQ
0OQ
xNQ
xMQ
xLQ
bx0 KQ
bx JQ
0IQ
bx HQ
bx GQ
xFQ
xEQ
xDQ
xCQ
xBQ
xAQ
x@Q
x?Q
x>Q
x=Q
x<Q
0;Q
x:Q
x9Q
x8Q
bx0 7Q
bx 6Q
05Q
bx 4Q
bx 3Q
x2Q
x1Q
x0Q
x/Q
x.Q
x-Q
x,Q
x+Q
x*Q
x)Q
x(Q
0'Q
x&Q
x%Q
x$Q
bx0 #Q
bx "Q
0!Q
bx ~P
bx }P
x|P
x{P
xzP
xyP
0xP
xwP
xvP
xuP
xtP
xsP
xrP
0qP
xpP
xoP
xnP
xmP
xlP
xkP
0jP
xiP
xhP
xgP
xfP
xeP
xdP
0cP
xbP
xaP
x`P
x_P
0^P
x]P
x\P
x[P
bx ZP
bx YP
bx XP
0WP
bx VP
xUP
xTP
xSP
xRP
xQP
xPP
xOP
xNP
xMP
xLP
xKP
xJP
xIP
xHP
xGP
xFP
xEP
xDP
0CP
xBP
xAP
x@P
bx0 ?P
bx >P
0=P
bx <P
bx ;P
x:P
x9P
x8P
x7P
x6P
x5P
x4P
x3P
x2P
x1P
x0P
0/P
x.P
x-P
x,P
bx0 +P
bx *P
0)P
bx (P
bx 'P
x&P
x%P
x$P
x#P
x"P
x!P
x~O
x}O
x|O
x{O
xzO
0yO
xxO
xwO
xvO
bx0 uO
bx tO
0sO
bx rO
bx qO
xpO
xoO
xnO
xmO
0lO
xkO
xjO
xiO
xhO
xgO
xfO
0eO
xdO
xcO
xbO
xaO
x`O
x_O
0^O
x]O
x\O
x[O
xZO
xYO
xXO
0WO
xVO
xUO
xTO
xSO
0RO
xQO
xPO
xOO
bx NO
bx MO
bx LO
0KO
bx JO
xIO
xHO
0GO
xFO
xEO
xDO
0CO
xBO
xAO
x@O
x?O
x>O
x=O
x<O
x;O
x:O
x9O
x8O
07O
x6O
x5O
x4O
bx0 3O
bx 2O
01O
bx 0O
b0xx /O
x.O
x-O
0,O
x+O
x*O
0)O
x(O
x'O
x&O
x%O
x$O
0#O
x"O
x!O
x~N
bx0 }N
bx |N
0{N
b0x zN
bx yN
xxN
xwN
0vN
0uN
0tN
xsN
0rN
xqN
xpN
0oN
0nN
0mN
xlN
0kN
0jN
b0 iN
bx hN
0gN
bx fN
b0 eN
xdN
xcN
0bN
0aN
0`N
0_N
x^N
x]N
x\N
x[N
xZN
0YN
xXN
xWN
xVN
xUN
xTN
xSN
0RN
xQN
xPN
0ON
0NN
0MN
0LN
0KN
0JN
0IN
xHN
xGN
0FN
xEN
xDN
xCN
bx BN
b0xxxxx00 AN
bx0xx @N
0?N
b0xxxxx00 >N
x=N
x<N
0;N
x:N
x9N
08N
x7N
x6N
x5N
x4N
x3N
x2N
x1N
x0N
x/N
x.N
x-N
x,N
0+N
x*N
x)N
x(N
bx0 'N
bx &N
0%N
b0xx $N
bx #N
x"N
x!N
0~M
0}M
0|M
x{M
0zM
xyM
xxM
0wM
0vM
0uM
xtM
0sM
0rM
b0 qM
bx pM
0oM
bx nM
b0 mM
xlM
xkM
0jM
xiM
xhM
0gM
xfM
xeM
xdM
xcM
xbM
0aM
x`M
x_M
x^M
bx0 ]M
bx \M
0[M
b0x ZM
bx YM
xXM
xWM
xVM
xUM
0TM
xSM
xRM
0QM
0PM
0OM
0NM
0MM
0LM
0KM
xJM
xIM
0HM
0GM
0FM
0EM
xDM
xCM
xBM
xAM
x@M
0?M
x>M
x=M
x<M
x;M
0:M
x9M
x8M
x7M
bx 6M
bx000xxx 5M
b0xxxxx 4M
03M
bx000xxx 2M
x1M
x0M
x/M
x.M
x-M
x,M
x+M
x*M
x)M
x(M
x'M
x&M
x%M
x$M
x#M
x"M
x!M
x~L
0}L
x|L
x{L
xzL
bx0 yL
bx xL
0wL
bx vL
bx uL
xtL
xsL
xrL
xqL
xpL
xoL
xnL
xmL
xlL
xkL
xjL
0iL
xhL
xgL
xfL
bx0 eL
bx dL
0cL
bx bL
bx aL
x`L
x_L
x^L
x]L
x\L
x[L
xZL
xYL
xXL
xWL
xVL
0UL
xTL
xSL
xRL
bx0 QL
bx PL
0OL
bx NL
bx ML
xLL
xKL
xJL
xIL
0HL
xGL
xFL
xEL
xDL
xCL
xBL
0AL
x@L
x?L
x>L
x=L
x<L
x;L
0:L
x9L
x8L
x7L
x6L
x5L
x4L
03L
x2L
x1L
x0L
x/L
1.L
x-L
x,L
x+L
bx *L
bx )L
bx (L
1'L
bx &L
x%L
x$L
x#L
x"L
x!L
x~K
x}K
x|K
x{K
xzK
xyK
xxK
xwK
xvK
xuK
xtK
xsK
xrK
0qK
xpK
xoK
xnK
bx0 mK
bx lK
0kK
bx jK
bx iK
xhK
xgK
xfK
xeK
xdK
xcK
xbK
xaK
x`K
x_K
x^K
0]K
x\K
x[K
xZK
bx0 YK
bx XK
0WK
bx VK
bx UK
xTK
xSK
xRK
xQK
xPK
xOK
xNK
xMK
xLK
xKK
xJK
0IK
xHK
xGK
xFK
bx0 EK
bx DK
0CK
bx BK
bx AK
x@K
x?K
x>K
x=K
0<K
x;K
x:K
x9K
x8K
x7K
x6K
05K
x4K
x3K
x2K
x1K
x0K
x/K
0.K
x-K
x,K
x+K
x*K
x)K
x(K
0'K
x&K
x%K
x$K
x#K
1"K
x!K
x~J
x}J
bx |J
bx {J
bx zJ
1yJ
bx xJ
xwJ
xvJ
xuJ
xtJ
xsJ
xrJ
xqJ
xpJ
xoJ
xnJ
xmJ
xlJ
xkJ
xjJ
xiJ
xhJ
xgJ
xfJ
0eJ
xdJ
xcJ
xbJ
bx0 aJ
bx `J
0_J
bx ^J
bx ]J
x\J
x[J
xZJ
xYJ
xXJ
xWJ
xVJ
xUJ
xTJ
xSJ
xRJ
0QJ
xPJ
xOJ
xNJ
bx0 MJ
bx LJ
0KJ
bx JJ
bx IJ
xHJ
xGJ
xFJ
xEJ
xDJ
xCJ
xBJ
xAJ
x@J
x?J
x>J
0=J
x<J
x;J
x:J
bx0 9J
bx 8J
07J
bx 6J
bx 5J
x4J
x3J
x2J
x1J
00J
x/J
x.J
x-J
x,J
x+J
x*J
0)J
x(J
x'J
x&J
x%J
x$J
x#J
0"J
x!J
x~I
x}I
x|I
x{I
xzI
0yI
xxI
xwI
xvI
xuI
0tI
xsI
xrI
xqI
bx pI
bx oI
bx nI
0mI
bx lI
xkI
xjI
xiI
xhI
xgI
xfI
xeI
xdI
xcI
xbI
xaI
x`I
x_I
x^I
x]I
x\I
x[I
xZI
0YI
xXI
xWI
xVI
bx0 UI
bx TI
0SI
bx RI
bx QI
xPI
xOI
xNI
xMI
xLI
xKI
xJI
xII
xHI
xGI
xFI
0EI
xDI
xCI
xBI
bx0 AI
bx @I
0?I
bx >I
bx =I
x<I
x;I
x:I
x9I
x8I
x7I
x6I
x5I
x4I
x3I
x2I
01I
x0I
x/I
x.I
bx0 -I
bx ,I
0+I
bx *I
bx )I
x(I
x'I
x&I
x%I
0$I
x#I
x"I
x!I
x~H
x}H
x|H
0{H
xzH
xyH
xxH
xwH
xvH
xuH
0tH
xsH
xrH
xqH
xpH
xoH
xnH
0mH
xlH
xkH
xjH
xiH
0hH
xgH
xfH
xeH
bx dH
bx cH
bx bH
0aH
bx `H
x_H
x^H
x]H
x\H
x[H
xZH
xYH
xXH
xWH
xVH
xUH
xTH
xSH
xRH
xQH
xPH
xOH
xNH
0MH
xLH
xKH
xJH
bx0 IH
bx HH
0GH
bx FH
bx EH
xDH
xCH
xBH
xAH
x@H
x?H
x>H
x=H
x<H
x;H
x:H
09H
x8H
x7H
x6H
bx0 5H
bx 4H
03H
bx 2H
bx 1H
x0H
x/H
x.H
x-H
x,H
x+H
x*H
x)H
x(H
x'H
x&H
0%H
x$H
x#H
x"H
bx0 !H
bx ~G
0}G
bx |G
bx {G
xzG
xyG
xxG
xwG
0vG
xuG
xtG
xsG
xrG
xqG
xpG
0oG
xnG
xmG
xlG
xkG
xjG
xiG
0hG
xgG
xfG
xeG
xdG
xcG
xbG
0aG
x`G
x_G
x^G
x]G
0\G
x[G
xZG
xYG
bx XG
bx WG
bx VG
0UG
bx TG
xSG
xRG
xQG
xPG
xOG
xNG
xMG
xLG
xKG
xJG
xIG
xHG
xGG
xFG
xEG
xDG
xCG
xBG
0AG
x@G
x?G
x>G
bx0 =G
bx <G
0;G
bx :G
bx 9G
x8G
x7G
x6G
x5G
x4G
x3G
x2G
x1G
x0G
x/G
x.G
0-G
x,G
x+G
x*G
bx0 )G
bx (G
0'G
bx &G
bx %G
x$G
x#G
x"G
x!G
x~F
x}F
x|F
x{F
xzF
xyF
xxF
0wF
xvF
xuF
xtF
bx0 sF
bx rF
0qF
bx pF
bx oF
xnF
xmF
xlF
xkF
0jF
xiF
xhF
xgF
xfF
xeF
xdF
0cF
xbF
xaF
x`F
x_F
x^F
x]F
0\F
x[F
xZF
xYF
xXF
xWF
xVF
0UF
xTF
xSF
xRF
xQF
0PF
xOF
xNF
xMF
bx LF
bx KF
bx JF
0IF
bx HF
xGF
xFF
0EF
xDF
xCF
xBF
0AF
x@F
x?F
x>F
x=F
x<F
x;F
x:F
x9F
x8F
x7F
x6F
05F
x4F
x3F
x2F
bx0 1F
bx 0F
0/F
bx .F
b0xx -F
x,F
x+F
0*F
x)F
x(F
0'F
x&F
x%F
x$F
x#F
x"F
0!F
x~E
x}E
x|E
bx0 {E
bx zE
0yE
b0x xE
bx wE
xvE
xuE
0tE
0sE
0rE
xqE
0pE
xoE
xnE
0mE
0lE
0kE
xjE
0iE
0hE
b0 gE
bx fE
0eE
bx dE
b0 cE
xbE
xaE
0`E
0_E
0^E
0]E
x\E
x[E
xZE
xYE
xXE
0WE
xVE
xUE
xTE
xSE
xRE
xQE
0PE
xOE
xNE
0ME
0LE
0KE
0JE
0IE
0HE
0GE
xFE
xEE
0DE
xCE
xBE
xAE
bx @E
b0xxxxx00 ?E
bx0xx >E
0=E
b0xxxxx00 <E
x;E
x:E
09E
x8E
x7E
06E
x5E
x4E
x3E
x2E
x1E
x0E
x/E
x.E
x-E
x,E
x+E
x*E
0)E
x(E
x'E
x&E
bx0 %E
bx $E
0#E
b0xx "E
bx !E
x~D
x}D
0|D
0{D
0zD
xyD
0xD
xwD
xvD
0uD
0tD
0sD
xrD
0qD
0pD
b0 oD
bx nD
0mD
bx lD
b0 kD
xjD
xiD
0hD
xgD
xfD
0eD
xdD
xcD
xbD
xaD
x`D
0_D
x^D
x]D
x\D
bx0 [D
bx ZD
0YD
b0x XD
bx WD
xVD
xUD
xTD
xSD
0RD
xQD
xPD
0OD
0ND
0MD
0LD
0KD
0JD
0ID
xHD
xGD
0FD
0ED
0DD
0CD
xBD
xAD
x@D
x?D
x>D
0=D
x<D
x;D
x:D
x9D
08D
x7D
x6D
x5D
bx 4D
bx000xxx 3D
b0xxxxx 2D
01D
bx000xxx 0D
x/D
x.D
x-D
x,D
x+D
x*D
x)D
x(D
x'D
x&D
x%D
x$D
x#D
x"D
x!D
x~C
x}C
x|C
0{C
xzC
xyC
xxC
bx0 wC
bx vC
0uC
bx tC
bx sC
xrC
xqC
xpC
xoC
xnC
xmC
xlC
xkC
xjC
xiC
xhC
0gC
xfC
xeC
xdC
bx0 cC
bx bC
0aC
bx `C
bx _C
x^C
x]C
x\C
x[C
xZC
xYC
xXC
xWC
xVC
xUC
xTC
0SC
xRC
xQC
xPC
bx0 OC
bx NC
0MC
bx LC
bx KC
xJC
xIC
xHC
xGC
0FC
xEC
xDC
xCC
xBC
xAC
x@C
0?C
x>C
x=C
x<C
x;C
x:C
x9C
08C
x7C
x6C
x5C
x4C
x3C
x2C
01C
x0C
x/C
x.C
x-C
0,C
x+C
x*C
x)C
bx (C
bx 'C
bx &C
0%C
bx $C
x#C
x"C
x!C
x~B
x}B
x|B
x{B
xzB
xyB
xxB
xwB
xvB
xuB
xtB
xsB
xrB
xqB
xpB
0oB
xnB
xmB
xlB
bx0 kB
bx jB
0iB
bx hB
bx gB
xfB
xeB
xdB
xcB
xbB
xaB
x`B
x_B
x^B
x]B
x\B
0[B
xZB
xYB
xXB
bx0 WB
bx VB
0UB
bx TB
bx SB
xRB
xQB
xPB
xOB
xNB
xMB
xLB
xKB
xJB
xIB
xHB
0GB
xFB
xEB
xDB
bx0 CB
bx BB
0AB
bx @B
bx ?B
x>B
x=B
x<B
x;B
0:B
x9B
x8B
x7B
x6B
x5B
x4B
03B
x2B
x1B
x0B
x/B
x.B
x-B
0,B
x+B
x*B
x)B
x(B
x'B
x&B
0%B
x$B
x#B
x"B
x!B
0~A
x}A
x|A
x{A
bx zA
bx yA
bx xA
0wA
bx vA
xuA
xtA
xsA
xrA
xqA
xpA
xoA
xnA
xmA
xlA
xkA
xjA
xiA
xhA
xgA
xfA
xeA
xdA
0cA
xbA
xaA
x`A
bx0 _A
bx ^A
0]A
bx \A
bx [A
xZA
xYA
xXA
xWA
xVA
xUA
xTA
xSA
xRA
xQA
xPA
0OA
xNA
xMA
xLA
bx0 KA
bx JA
0IA
bx HA
bx GA
xFA
xEA
xDA
xCA
xBA
xAA
x@A
x?A
x>A
x=A
x<A
0;A
x:A
x9A
x8A
bx0 7A
bx 6A
05A
bx 4A
bx 3A
x2A
x1A
x0A
x/A
0.A
x-A
x,A
x+A
x*A
x)A
x(A
0'A
x&A
x%A
x$A
x#A
x"A
x!A
0~@
x}@
x|@
x{@
xz@
xy@
xx@
0w@
xv@
xu@
xt@
xs@
0r@
xq@
xp@
xo@
bx n@
bx m@
bx l@
0k@
bx j@
xi@
xh@
xg@
xf@
xe@
xd@
xc@
xb@
xa@
x`@
x_@
x^@
x]@
x\@
x[@
xZ@
xY@
xX@
0W@
xV@
xU@
xT@
bx0 S@
bx R@
0Q@
bx P@
bx O@
xN@
xM@
xL@
xK@
xJ@
xI@
xH@
xG@
xF@
xE@
xD@
0C@
xB@
xA@
x@@
bx0 ?@
bx >@
0=@
bx <@
bx ;@
x:@
x9@
x8@
x7@
x6@
x5@
x4@
x3@
x2@
x1@
x0@
0/@
x.@
x-@
x,@
bx0 +@
bx *@
0)@
bx (@
bx '@
x&@
x%@
x$@
x#@
0"@
x!@
x~?
x}?
x|?
x{?
xz?
0y?
xx?
xw?
xv?
xu?
xt?
xs?
0r?
xq?
xp?
xo?
xn?
xm?
xl?
0k?
xj?
xi?
xh?
xg?
0f?
xe?
xd?
xc?
bx b?
bx a?
bx `?
0_?
bx ^?
x]?
x\?
x[?
xZ?
xY?
xX?
xW?
xV?
xU?
xT?
xS?
xR?
xQ?
xP?
xO?
xN?
xM?
xL?
0K?
xJ?
xI?
xH?
bx0 G?
bx F?
0E?
bx D?
bx C?
xB?
xA?
x@?
x??
x>?
x=?
x<?
x;?
x:?
x9?
x8?
07?
x6?
x5?
x4?
bx0 3?
bx 2?
01?
bx 0?
bx /?
x.?
x-?
x,?
x+?
x*?
x)?
x(?
x'?
x&?
x%?
x$?
0#?
x"?
x!?
x~>
bx0 }>
bx |>
0{>
bx z>
bx y>
xx>
xw>
xv>
xu>
0t>
xs>
xr>
xq>
xp>
xo>
xn>
0m>
xl>
xk>
xj>
xi>
xh>
xg>
0f>
xe>
xd>
xc>
xb>
xa>
x`>
0_>
x^>
x]>
x\>
x[>
0Z>
xY>
xX>
xW>
bx V>
bx U>
bx T>
0S>
bx R>
xQ>
xP>
xO>
xN>
xM>
xL>
xK>
xJ>
xI>
xH>
xG>
xF>
xE>
xD>
xC>
xB>
xA>
x@>
0?>
x>>
x=>
x<>
bx0 ;>
bx :>
09>
bx 8>
bx 7>
x6>
x5>
x4>
x3>
x2>
x1>
x0>
x/>
x.>
x->
x,>
0+>
x*>
x)>
x(>
bx0 '>
bx &>
0%>
bx $>
bx #>
x">
x!>
x~=
x}=
x|=
x{=
xz=
xy=
xx=
xw=
xv=
0u=
xt=
xs=
xr=
bx0 q=
bx p=
0o=
bx n=
bx m=
xl=
xk=
xj=
xi=
0h=
xg=
xf=
xe=
xd=
xc=
xb=
0a=
x`=
x_=
x^=
x]=
x\=
x[=
0Z=
xY=
xX=
xW=
xV=
xU=
xT=
0S=
xR=
xQ=
xP=
xO=
0N=
xM=
xL=
xK=
bx J=
bx I=
bx H=
0G=
bx F=
xE=
xD=
0C=
xB=
xA=
x@=
0?=
x>=
x==
x<=
x;=
x:=
x9=
x8=
x7=
x6=
x5=
x4=
03=
x2=
x1=
x0=
bx0 /=
bx .=
0-=
bx ,=
b0xx +=
x*=
x)=
0(=
x'=
x&=
0%=
x$=
x#=
x"=
x!=
x~<
0}<
x|<
x{<
xz<
bx0 y<
bx x<
0w<
b0x v<
bx u<
xt<
xs<
0r<
0q<
0p<
xo<
0n<
xm<
xl<
0k<
0j<
0i<
xh<
0g<
0f<
b0 e<
bx d<
0c<
bx b<
b0 a<
x`<
x_<
0^<
0]<
0\<
0[<
xZ<
xY<
xX<
xW<
xV<
0U<
xT<
xS<
xR<
xQ<
xP<
xO<
0N<
xM<
xL<
0K<
0J<
0I<
0H<
0G<
0F<
0E<
xD<
xC<
0B<
xA<
x@<
x?<
bx ><
b0xxxxx00 =<
bx0xx <<
0;<
b0xxxxx00 :<
x9<
x8<
07<
x6<
x5<
04<
x3<
x2<
x1<
x0<
x/<
x.<
x-<
x,<
x+<
x*<
x)<
x(<
0'<
x&<
x%<
x$<
bx0 #<
bx "<
0!<
b0xx ~;
bx };
x|;
x{;
0z;
0y;
0x;
xw;
0v;
xu;
xt;
0s;
0r;
0q;
xp;
0o;
0n;
b0 m;
bx l;
0k;
bx j;
b0 i;
xh;
xg;
0f;
xe;
xd;
0c;
xb;
xa;
x`;
x_;
x^;
0];
x\;
x[;
xZ;
bx0 Y;
bx X;
0W;
b0x V;
bx U;
xT;
xS;
xR;
xQ;
0P;
xO;
xN;
0M;
0L;
0K;
0J;
0I;
0H;
0G;
xF;
xE;
0D;
0C;
0B;
0A;
x@;
x?;
x>;
x=;
x<;
0;;
x:;
x9;
x8;
x7;
06;
x5;
x4;
x3;
bx 2;
bx000xxx 1;
b0xxxxx 0;
0/;
bx000xxx .;
x-;
x,;
x+;
x*;
x);
x(;
x';
x&;
x%;
x$;
x#;
x";
x!;
x~:
x}:
x|:
x{:
xz:
0y:
xx:
xw:
xv:
bx0 u:
bx t:
0s:
bx r:
bx q:
xp:
xo:
xn:
xm:
xl:
xk:
xj:
xi:
xh:
xg:
xf:
0e:
xd:
xc:
xb:
bx0 a:
bx `:
0_:
bx ^:
bx ]:
x\:
x[:
xZ:
xY:
xX:
xW:
xV:
xU:
xT:
xS:
xR:
0Q:
xP:
xO:
xN:
bx0 M:
bx L:
0K:
bx J:
bx I:
xH:
xG:
xF:
xE:
0D:
xC:
xB:
xA:
x@:
x?:
x>:
0=:
x<:
x;:
x::
x9:
x8:
x7:
06:
x5:
x4:
x3:
x2:
x1:
x0:
0/:
x.:
x-:
x,:
x+:
0*:
x):
x(:
x':
bx &:
bx %:
bx $:
0#:
bx ":
x!:
x~9
x}9
x|9
x{9
xz9
xy9
xx9
xw9
xv9
xu9
xt9
xs9
xr9
xq9
xp9
xo9
xn9
0m9
xl9
xk9
xj9
bx0 i9
bx h9
0g9
bx f9
bx e9
xd9
xc9
xb9
xa9
x`9
x_9
x^9
x]9
x\9
x[9
xZ9
0Y9
xX9
xW9
xV9
bx0 U9
bx T9
0S9
bx R9
bx Q9
xP9
xO9
xN9
xM9
xL9
xK9
xJ9
xI9
xH9
xG9
xF9
0E9
xD9
xC9
xB9
bx0 A9
bx @9
0?9
bx >9
bx =9
x<9
x;9
x:9
x99
089
x79
x69
x59
x49
x39
x29
019
x09
x/9
x.9
x-9
x,9
x+9
0*9
x)9
x(9
x'9
x&9
x%9
x$9
0#9
x"9
x!9
x~8
x}8
0|8
x{8
xz8
xy8
bx x8
bx w8
bx v8
0u8
bx t8
xs8
xr8
xq8
xp8
xo8
xn8
xm8
xl8
xk8
xj8
xi8
xh8
xg8
xf8
xe8
xd8
xc8
xb8
0a8
x`8
x_8
x^8
bx0 ]8
bx \8
0[8
bx Z8
bx Y8
xX8
xW8
xV8
xU8
xT8
xS8
xR8
xQ8
xP8
xO8
xN8
0M8
xL8
xK8
xJ8
bx0 I8
bx H8
0G8
bx F8
bx E8
xD8
xC8
xB8
xA8
x@8
x?8
x>8
x=8
x<8
x;8
x:8
098
x88
x78
x68
bx0 58
bx 48
038
bx 28
bx 18
x08
x/8
x.8
x-8
0,8
x+8
x*8
x)8
x(8
x'8
x&8
0%8
x$8
x#8
x"8
x!8
x~7
x}7
0|7
x{7
xz7
xy7
xx7
xw7
xv7
0u7
xt7
xs7
xr7
xq7
0p7
xo7
xn7
xm7
bx l7
bx k7
bx j7
0i7
bx h7
xg7
xf7
xe7
xd7
xc7
xb7
xa7
x`7
x_7
x^7
x]7
x\7
x[7
xZ7
xY7
xX7
xW7
xV7
0U7
xT7
xS7
xR7
bx0 Q7
bx P7
0O7
bx N7
bx M7
xL7
xK7
xJ7
xI7
xH7
xG7
xF7
xE7
xD7
xC7
xB7
0A7
x@7
x?7
x>7
bx0 =7
bx <7
0;7
bx :7
bx 97
x87
x77
x67
x57
x47
x37
x27
x17
x07
x/7
x.7
0-7
x,7
x+7
x*7
bx0 )7
bx (7
0'7
bx &7
bx %7
x$7
x#7
x"7
x!7
0~6
x}6
x|6
x{6
xz6
xy6
xx6
0w6
xv6
xu6
xt6
xs6
xr6
xq6
0p6
xo6
xn6
xm6
xl6
xk6
xj6
0i6
xh6
xg6
xf6
xe6
0d6
xc6
xb6
xa6
bx `6
bx _6
bx ^6
0]6
bx \6
x[6
xZ6
xY6
xX6
xW6
xV6
xU6
xT6
xS6
xR6
xQ6
xP6
xO6
xN6
xM6
xL6
xK6
xJ6
0I6
xH6
xG6
xF6
bx0 E6
bx D6
0C6
bx B6
bx A6
x@6
x?6
x>6
x=6
x<6
x;6
x:6
x96
x86
x76
x66
056
x46
x36
x26
bx0 16
bx 06
0/6
bx .6
bx -6
x,6
x+6
x*6
x)6
x(6
x'6
x&6
x%6
x$6
x#6
x"6
0!6
x~5
x}5
x|5
bx0 {5
bx z5
0y5
bx x5
bx w5
xv5
xu5
xt5
xs5
0r5
xq5
xp5
xo5
xn5
xm5
xl5
0k5
xj5
xi5
xh5
xg5
xf5
xe5
0d5
xc5
xb5
xa5
x`5
x_5
x^5
0]5
x\5
x[5
xZ5
xY5
0X5
xW5
xV5
xU5
bx T5
bx S5
bx R5
0Q5
bx P5
xO5
xN5
xM5
xL5
xK5
xJ5
xI5
xH5
xG5
xF5
xE5
xD5
xC5
xB5
xA5
x@5
x?5
x>5
0=5
x<5
x;5
x:5
bx0 95
bx 85
075
bx 65
bx 55
x45
x35
x25
x15
x05
x/5
x.5
x-5
x,5
x+5
x*5
0)5
x(5
x'5
x&5
bx0 %5
bx $5
0#5
bx "5
bx !5
x~4
x}4
x|4
x{4
xz4
xy4
xx4
xw4
xv4
xu4
xt4
0s4
xr4
xq4
xp4
bx0 o4
bx n4
0m4
bx l4
bx k4
xj4
xi4
xh4
xg4
0f4
xe4
xd4
xc4
xb4
xa4
x`4
0_4
x^4
x]4
x\4
x[4
xZ4
xY4
0X4
xW4
xV4
xU4
xT4
xS4
xR4
0Q4
xP4
xO4
xN4
xM4
0L4
xK4
xJ4
xI4
bx H4
bx G4
bx F4
0E4
bx D4
xC4
xB4
0A4
x@4
x?4
x>4
0=4
x<4
x;4
x:4
x94
x84
x74
x64
x54
x44
x34
x24
014
x04
x/4
x.4
bx0 -4
bx ,4
0+4
bx *4
b0xx )4
x(4
x'4
0&4
x%4
x$4
0#4
x"4
x!4
x~3
x}3
x|3
0{3
xz3
xy3
xx3
bx0 w3
bx v3
0u3
b0x t3
bx s3
xr3
xq3
0p3
0o3
0n3
xm3
0l3
xk3
xj3
0i3
0h3
0g3
xf3
0e3
0d3
b0 c3
bx b3
0a3
bx `3
b0 _3
x^3
x]3
0\3
0[3
0Z3
0Y3
xX3
xW3
xV3
xU3
xT3
0S3
xR3
xQ3
xP3
xO3
xN3
xM3
0L3
xK3
xJ3
0I3
0H3
0G3
0F3
0E3
0D3
0C3
xB3
xA3
0@3
x?3
x>3
x=3
bx <3
b0xxxxx00 ;3
bx0xx :3
093
b0xxxxx00 83
x73
x63
053
x43
x33
023
x13
x03
x/3
x.3
x-3
x,3
x+3
x*3
x)3
x(3
x'3
x&3
0%3
x$3
x#3
x"3
bx0 !3
bx ~2
0}2
b0xx |2
bx {2
xz2
xy2
0x2
0w2
0v2
xu2
0t2
xs2
xr2
0q2
0p2
0o2
xn2
0m2
0l2
b0 k2
bx j2
0i2
bx h2
b0 g2
xf2
xe2
0d2
xc2
xb2
0a2
x`2
x_2
x^2
x]2
x\2
0[2
xZ2
xY2
xX2
bx0 W2
bx V2
0U2
b0x T2
bx S2
xR2
xQ2
xP2
xO2
0N2
xM2
xL2
0K2
0J2
0I2
0H2
0G2
0F2
0E2
xD2
xC2
0B2
0A2
0@2
0?2
x>2
x=2
x<2
x;2
x:2
092
x82
x72
x62
x52
042
x32
x22
x12
bx 02
bx000xxx /2
b0xxxxx .2
0-2
bx000xxx ,2
x+2
x*2
x)2
x(2
x'2
x&2
x%2
x$2
x#2
x"2
x!2
x~1
x}1
x|1
x{1
xz1
xy1
xx1
0w1
xv1
xu1
xt1
bx0 s1
bx r1
0q1
bx p1
bx o1
xn1
xm1
xl1
xk1
xj1
xi1
xh1
xg1
xf1
xe1
xd1
0c1
xb1
xa1
x`1
bx0 _1
bx ^1
0]1
bx \1
bx [1
xZ1
xY1
xX1
xW1
xV1
xU1
xT1
xS1
xR1
xQ1
xP1
0O1
xN1
xM1
xL1
bx0 K1
bx J1
0I1
bx H1
bx G1
xF1
xE1
xD1
xC1
0B1
xA1
x@1
x?1
x>1
x=1
x<1
0;1
x:1
x91
x81
x71
x61
x51
041
x31
x21
x11
x01
x/1
x.1
0-1
x,1
x+1
x*1
x)1
0(1
x'1
x&1
x%1
bx $1
bx #1
bx "1
0!1
bx ~0
x}0
x|0
x{0
xz0
xy0
xx0
xw0
xv0
xu0
xt0
xs0
xr0
xq0
xp0
xo0
xn0
xm0
xl0
0k0
xj0
xi0
xh0
bx0 g0
bx f0
0e0
bx d0
bx c0
xb0
xa0
x`0
x_0
x^0
x]0
x\0
x[0
xZ0
xY0
xX0
0W0
xV0
xU0
xT0
bx0 S0
bx R0
0Q0
bx P0
bx O0
xN0
xM0
xL0
xK0
xJ0
xI0
xH0
xG0
xF0
xE0
xD0
0C0
xB0
xA0
x@0
bx0 ?0
bx >0
0=0
bx <0
bx ;0
x:0
x90
x80
x70
060
x50
x40
x30
x20
x10
x00
0/0
x.0
x-0
x,0
x+0
x*0
x)0
0(0
x'0
x&0
x%0
x$0
x#0
x"0
0!0
x~/
x}/
x|/
x{/
0z/
xy/
xx/
xw/
bx v/
bx u/
bx t/
0s/
bx r/
xq/
xp/
xo/
xn/
xm/
xl/
xk/
xj/
xi/
xh/
xg/
xf/
xe/
xd/
xc/
xb/
xa/
x`/
0_/
x^/
x]/
x\/
bx0 [/
bx Z/
0Y/
bx X/
bx W/
xV/
xU/
xT/
xS/
xR/
xQ/
xP/
xO/
xN/
xM/
xL/
0K/
xJ/
xI/
xH/
bx0 G/
bx F/
0E/
bx D/
bx C/
xB/
xA/
x@/
x?/
x>/
x=/
x</
x;/
x:/
x9/
x8/
07/
x6/
x5/
x4/
bx0 3/
bx 2/
01/
bx 0/
bx //
x./
x-/
x,/
x+/
0*/
x)/
x(/
x'/
x&/
x%/
x$/
0#/
x"/
x!/
x~.
x}.
x|.
x{.
0z.
xy.
xx.
xw.
xv.
xu.
xt.
0s.
xr.
xq.
xp.
xo.
0n.
xm.
xl.
xk.
bx j.
bx i.
bx h.
0g.
bx f.
xe.
xd.
xc.
xb.
xa.
x`.
x_.
x^.
x].
x\.
x[.
xZ.
xY.
xX.
xW.
xV.
xU.
xT.
0S.
xR.
xQ.
xP.
bx0 O.
bx N.
0M.
bx L.
bx K.
xJ.
xI.
xH.
xG.
xF.
xE.
xD.
xC.
xB.
xA.
x@.
0?.
x>.
x=.
x<.
bx0 ;.
bx :.
09.
bx 8.
bx 7.
x6.
x5.
x4.
x3.
x2.
x1.
x0.
x/.
x..
x-.
x,.
0+.
x*.
x).
x(.
bx0 '.
bx &.
0%.
bx $.
bx #.
x".
x!.
x~-
x}-
0|-
x{-
xz-
xy-
xx-
xw-
xv-
0u-
xt-
xs-
xr-
xq-
xp-
xo-
0n-
xm-
xl-
xk-
xj-
xi-
xh-
0g-
xf-
xe-
xd-
xc-
0b-
xa-
x`-
x_-
bx ^-
bx ]-
bx \-
0[-
bx Z-
xY-
xX-
xW-
xV-
xU-
xT-
xS-
xR-
xQ-
xP-
xO-
xN-
xM-
xL-
xK-
xJ-
xI-
xH-
0G-
xF-
xE-
xD-
bx0 C-
bx B-
0A-
bx @-
bx ?-
x>-
x=-
x<-
x;-
x:-
x9-
x8-
x7-
x6-
x5-
x4-
03-
x2-
x1-
x0-
bx0 /-
bx .-
0--
bx ,-
bx +-
x*-
x)-
x(-
x'-
x&-
x%-
x$-
x#-
x"-
x!-
x~,
0},
x|,
x{,
xz,
bx0 y,
bx x,
0w,
bx v,
bx u,
xt,
xs,
xr,
xq,
0p,
xo,
xn,
xm,
xl,
xk,
xj,
0i,
xh,
xg,
xf,
xe,
xd,
xc,
0b,
xa,
x`,
x_,
x^,
x],
x\,
0[,
xZ,
xY,
xX,
xW,
0V,
xU,
xT,
xS,
bx R,
bx Q,
bx P,
0O,
bx N,
xM,
xL,
xK,
xJ,
xI,
xH,
xG,
xF,
xE,
xD,
xC,
xB,
xA,
x@,
x?,
x>,
x=,
x<,
0;,
x:,
x9,
x8,
bx0 7,
bx 6,
05,
bx 4,
bx 3,
x2,
x1,
x0,
x/,
x.,
x-,
x,,
x+,
x*,
x),
x(,
0',
x&,
x%,
x$,
bx0 #,
bx ",
0!,
bx ~+
bx }+
x|+
x{+
xz+
xy+
xx+
xw+
xv+
xu+
xt+
xs+
xr+
0q+
xp+
xo+
xn+
bx0 m+
bx l+
0k+
bx j+
bx i+
xh+
xg+
xf+
xe+
0d+
xc+
xb+
xa+
x`+
x_+
x^+
0]+
x\+
x[+
xZ+
xY+
xX+
xW+
0V+
xU+
xT+
xS+
xR+
xQ+
xP+
0O+
xN+
xM+
xL+
xK+
0J+
xI+
xH+
xG+
bx F+
bx E+
bx D+
0C+
bx B+
xA+
x@+
0?+
x>+
x=+
x<+
0;+
x:+
x9+
x8+
x7+
x6+
x5+
x4+
x3+
x2+
x1+
x0+
0/+
x.+
x-+
x,+
bx0 ++
bx *+
0)+
bx (+
b0xx '+
x&+
x%+
0$+
x#+
x"+
0!+
x~*
x}*
x|*
x{*
xz*
0y*
xx*
xw*
xv*
bx0 u*
bx t*
0s*
b0x r*
bx q*
xp*
xo*
0n*
0m*
0l*
xk*
0j*
xi*
xh*
0g*
0f*
0e*
xd*
0c*
0b*
b0 a*
bx `*
0_*
bx ^*
b0 ]*
x\*
x[*
0Z*
0Y*
0X*
0W*
xV*
xU*
xT*
xS*
xR*
0Q*
xP*
xO*
xN*
xM*
xL*
xK*
0J*
xI*
xH*
0G*
0F*
0E*
0D*
0C*
0B*
0A*
x@*
x?*
0>*
x=*
x<*
x;*
bx :*
b0xxxxx00 9*
bx0xx 8*
07*
b0xxxxx00 6*
x5*
x4*
03*
02*
01*
00*
x/*
x.*
x-*
0,*
0+*
0**
0)*
x(*
x'*
x&*
0%*
0$*
0#*
0"*
x!*
0~)
b0 })
bx |)
0{)
b0 z)
bx y)
0x)
0w)
0v)
0u)
0t)
0s)
0r)
0q)
0p)
0o)
0n)
0m)
0l)
0k)
0j)
b0 i)
b0 h)
0g)
b0 f)
b0 e)
xd)
xc)
0b)
xa)
x`)
0_)
x^)
x])
x\)
x[)
xZ)
0Y)
xX)
xW)
xV)
bx0 U)
bx T)
0S)
b0x R)
bx Q)
0P)
0O)
0N)
0M)
0L)
0K)
0J)
0I)
0H)
0G)
0F)
0E)
0D)
0C)
xB)
xA)
0@)
0?)
0>)
0=)
x<)
x;)
x:)
x9)
x8)
07)
x6)
x5)
x4)
x3)
02)
x1)
x0)
x/)
b0xxx .)
b0xxx -)
b0xxx ,)
0+)
b0xxx *)
x))
x()
0')
x&)
x%)
0$)
x#)
x")
x!)
0~(
x}(
x|(
0{(
xz(
xy(
xx(
xw(
xv(
0u(
xt(
xs(
xr(
bx0 q(
bx p(
0o(
b0x n(
bx m(
0l(
0k(
0j(
0i(
0h(
0g(
0f(
xe(
xd(
0c(
0b(
0a(
0`(
x_(
0^(
b0 ](
b0x \(
0[(
b0 Z(
b0x Y(
xX(
xW(
xV(
xU(
xT(
xS(
xR(
xQ(
xP(
xO(
xN(
0M(
xL(
xK(
xJ(
bx0 I(
bx H(
0G(
bx F(
bx E(
0D(
0C(
0B(
0A(
0@(
0?(
0>(
x=(
x<(
0;(
0:(
09(
08(
x7(
x6(
x5(
x4(
x3(
02(
x1(
x0(
x/(
x.(
x-(
x,(
0+(
x*(
x)(
x((
x'(
0&(
x%(
x$(
x#(
bx "(
b0xxxxx !(
b0xxxx ~'
0}'
b0xxxxx |'
x{'
xz'
0y'
xx'
xw'
0v'
xu'
xt'
xs'
0r'
xq'
xp'
0o'
xn'
xm'
xl'
xk'
xj'
0i'
xh'
xg'
xf'
bx0 e'
bx d'
0c'
b0x b'
bx a'
0`'
0_'
0^'
0]'
0\'
0['
0Z'
xY'
xX'
0W'
0V'
0U'
0T'
xS'
0R'
b0 Q'
b0x P'
0O'
b0 N'
b0x M'
xL'
xK'
xJ'
xI'
xH'
xG'
xF'
xE'
xD'
xC'
xB'
0A'
x@'
x?'
x>'
bx0 ='
bx <'
0;'
bx :'
bx 9'
08'
07'
06'
05'
04'
03'
02'
x1'
x0'
0/'
0.'
0-'
0,'
x+'
x*'
x)'
x('
x''
0&'
x%'
x$'
x#'
x"'
x!'
x~&
0}&
x|&
x{&
xz&
xy&
0x&
xw&
xv&
xu&
bx t&
b0xxxxx s&
b0xxxx r&
0q&
b0xxxxx p&
xo&
xn&
0m&
xl&
xk&
0j&
xi&
xh&
xg&
0f&
xe&
xd&
0c&
xb&
xa&
x`&
x_&
x^&
0]&
x\&
x[&
xZ&
bx0 Y&
bx X&
0W&
b0x V&
bx U&
0T&
0S&
0R&
0Q&
0P&
0O&
0N&
xM&
xL&
0K&
0J&
0I&
0H&
xG&
0F&
b0 E&
b0x D&
0C&
b0 B&
b0x A&
x@&
x?&
x>&
x=&
x<&
x;&
x:&
x9&
x8&
x7&
x6&
05&
x4&
x3&
x2&
bx0 1&
bx 0&
0/&
bx .&
bx -&
0,&
0+&
0*&
0)&
0(&
0'&
0&&
x%&
x$&
0#&
0"&
0!&
0~%
x}%
x|%
x{%
xz%
xy%
0x%
xw%
xv%
xu%
xt%
xs%
xr%
0q%
xp%
xo%
xn%
xm%
0l%
xk%
xj%
xi%
bx h%
b0xxxxx g%
b0xxxx f%
0e%
b0xxxxx d%
xc%
xb%
0a%
x`%
x_%
0^%
x]%
x\%
x[%
0Z%
xY%
xX%
0W%
xV%
xU%
xT%
xS%
xR%
0Q%
xP%
xO%
xN%
bx0 M%
bx L%
0K%
b0x J%
bx I%
0H%
0G%
0F%
0E%
0D%
0C%
0B%
xA%
x@%
0?%
0>%
0=%
0<%
x;%
0:%
b0 9%
b0x 8%
07%
b0 6%
b0x 5%
x4%
x3%
x2%
x1%
x0%
x/%
x.%
x-%
x,%
x+%
x*%
0)%
x(%
x'%
x&%
bx0 %%
bx $%
0#%
bx "%
bx !%
0~$
0}$
0|$
0{$
0z$
0y$
0x$
xw$
xv$
0u$
0t$
0s$
0r$
xq$
xp$
xo$
xn$
xm$
0l$
xk$
xj$
xi$
xh$
xg$
xf$
0e$
xd$
xc$
xb$
xa$
0`$
x_$
x^$
x]$
bx \$
b0xxxxx [$
b0xxxx Z$
0Y$
b0xxxxx X$
xW$
xV$
0U$
xT$
xS$
0R$
xQ$
xP$
xO$
0N$
xM$
xL$
0K$
xJ$
xI$
xH$
xG$
xF$
0E$
xD$
xC$
xB$
bx0 A$
bx @$
0?$
b0x >$
bx =$
0<$
0;$
0:$
09$
08$
07$
06$
x5$
x4$
03$
02$
01$
00$
x/$
0.$
b0 -$
b0x ,$
0+$
b0 *$
b0x )$
x($
x'$
x&$
x%$
x$$
x#$
x"$
x!$
x~#
x}#
x|#
0{#
xz#
xy#
xx#
bx0 w#
bx v#
0u#
bx t#
bx s#
0r#
0q#
0p#
0o#
0n#
0m#
0l#
xk#
xj#
0i#
0h#
0g#
0f#
xe#
xd#
xc#
xb#
xa#
0`#
x_#
x^#
x]#
x\#
x[#
xZ#
0Y#
xX#
xW#
xV#
xU#
0T#
xS#
xR#
xQ#
bx P#
b0xxxxx O#
b0xxxx N#
0M#
b0xxxxx L#
xK#
xJ#
0I#
xH#
xG#
0F#
xE#
xD#
xC#
0B#
xA#
x@#
0?#
x>#
x=#
x<#
x;#
x:#
09#
x8#
x7#
x6#
bx0 5#
bx 4#
03#
b0x 2#
bx 1#
00#
0/#
0.#
0-#
0,#
0+#
0*#
x)#
x(#
0'#
0&#
0%#
0$#
x##
0"#
b0 !#
b0x ~"
0}"
b0 |"
b0x {"
xz"
xy"
xx"
xw"
xv"
xu"
xt"
xs"
xr"
xq"
xp"
0o"
xn"
xm"
xl"
bx0 k"
bx j"
0i"
bx h"
bx g"
0f"
0e"
0d"
0c"
0b"
0a"
0`"
x_"
x^"
0]"
0\"
0["
0Z"
xY"
xX"
xW"
xV"
xU"
0T"
xS"
xR"
xQ"
xP"
xO"
xN"
0M"
xL"
xK"
xJ"
xI"
0H"
xG"
xF"
xE"
bx D"
b0xxxxx C"
b0xxxx B"
0A"
b0xxxxx @"
x?"
0>"
0="
0<"
x;"
0:"
09"
x8"
x7"
06"
x5"
x4"
03"
x2"
x1"
x0"
x/"
x."
0-"
x,"
x+"
0*"
b0xx0 )"
bx ("
0'"
b0x &"
b0xx %"
0$"
0#"
0""
0!"
0~
0}
0|
x{
xz
0y
0x
0w
0v
xu
0t
b0 s
b0x r
0q
b0 p
b0x o
xn
xm
0l
0k
0j
xi
0h
xg
xf
0e
0d
0c
xb
0a
0`
b0 _
bx ^
0]
bx \
b0 [
0Z
0Y
0X
0W
0V
0U
0T
xS
xR
0Q
0P
0O
0N
xM
xL
xK
xJ
xI
0H
xG
xF
0E
0D
0C
0B
0A
0@
0?
x>
x=
0<
x;
x:
x9
b0xxx 8
b0xxx00 7
b0x0xx 6
05
b0xxx00 4
b1001 3
b1001 2
bx 1
x0
1/
1.
b11 -
b10 ,
bx +
bx *
bx )
b10000000010000011100000000000000000000000000000000000000000000 (
b100000000001000000011100000000000000000000000000000000000000000000000000000000000000000 '
b0xxxxxxxx00xxxxxxxx00xxxxxxxx00xxxxxxxx00xxxxxxxx00xxxxxxxx00xxxxxxxx00xxxxxxxx00000000000 &
b0xxxxxxxx00xxxxxxxx00xxxxxxxx00xxxxxxxx00xxxxxxxx00xxxxxxxx00xxxxxxxx00xxxxxxxx00000000000 %
bx $
bx #
0"
b11 !
$end
#5000
1ei
0Yi
b0x Qi
b0x Pi
b0x Oi
b0x Ni
b0x Mi
b0x Li
b0x Ki
b0x Ji
0\i
0hi
1ai
0Ui
b0 Wi
b0 `i
b0 ^i
b0 Xi
b0 [i
b1 ci
b1 li
b0 ji
b1 $
b1 Ei
b1 Hi
b1 Ti
b1 di
b1 gi
b1 Si
b1 ni
0_i
0]i
0Zi
0ki
0ii
0fi
0mi
b0 Vi
b0 bi
b0 Ri
00
b0 1
b0 Gi
b0 *
b0 +
1"
#10000
0"
#15000
x<
xH"
xT#
x`$
xl%
xx&
x&(
x2)
x>*
xJ+
xV,
xb-
xn.
xz/
x(1
x42
x@3
xL4
xX5
xd6
xp7
x|8
x*:
x6;
xB<
xN=
xZ>
xf?
xr@
x~A
x,C
x8D
xDE
xPF
x\G
xhH
xtI
x"K
x.L
x:M
xFN
xRO
x^P
xjQ
xvR
x$T
x0U
x<V
xHW
xTX
x`Y
xlZ
xx[
x&]
x2^
x>_
xJ`
xVa
xbb
xnc
xzd
x(f
x4g
x@h
0/
b111 -
b0 ,
0.
b0 !
1"
#20000
0"
#25000
b1 *
b1 +
1"
#30000
0"
#35000
10
b10 *
b10 +
1"
#40000
0"
#45000
b0x0 Qi
b0x0 Pi
b0x0 Oi
b0x0 Ni
b0x0 Mi
b0x0 Li
b0x0 Ki
b0x0 Ji
b10 $
b10 Ei
b10 Hi
b10 Ti
b10 di
b10 gi
1]i
1Zi
1ii
1fi
b1 Vi
b1 bi
b1 Ri
00
b1 1
b1 Gi
b0 *
b0 +
1"
#50000
0"
#55000
b1 *
b1 +
1"
#60000
0"
#65000
10
b10 *
b10 +
1"
#70000
0"
#75000
b1 ji
b0x00 Qi
b0x00 Pi
b0x00 Oi
b0x00 Ni
b0x00 Mi
b0x00 Li
b0x00 Ki
b0x00 Ji
0ei
1hi
b10 ci
b10 li
b100 $
b100 Ei
b100 Hi
b100 Ti
b100 di
b0 gi
1_i
0]i
0Zi
1ki
0ii
0fi
b10 Vi
b10 bi
b10 Ri
00
b10 1
b10 Gi
b0 *
b0 +
1"
#80000
0"
#85000
b1 *
b1 +
1"
#90000
0"
#95000
10
b10 *
b10 +
1"
#100000
0"
#105000
b0x000 Qi
b0x000 Pi
b0x000 Oi
b0x000 Ni
b0x000 Mi
b0x000 Li
b0x000 Ki
b0x000 Ji
b1000 $
b1000 Ei
b1000 Hi
b1000 Ti
b1000 di
b10 ji
1]i
1Zi
1ii
1fi
b11 Vi
b11 bi
b11 Ri
00
b11 1
b11 Gi
b0 *
b0 +
1"
#110000
0"
#115000
b1 *
b1 +
1"
#120000
0"
#125000
10
b10 *
b10 +
1"
#130000
0"
#135000
b1 Xi
b1 [i
1Yi
b0 gi
b0x0000 Qi
b0x0000 Pi
b0x0000 Oi
b0x0000 Ni
b0x0000 Mi
b0x0000 Li
b0x0000 Ki
b0x0000 Ji
b1 Wi
b1 `i
0ei
0hi
0ai
1Ui
b0 ci
b0 li
b10000 $
b10000 Ei
b10000 Hi
b10000 Ti
b0 di
b0 ji
b10 Si
b10 ni
0_i
0]i
0Zi
0ki
0ii
0fi
1mi
b0 Vi
b0 bi
b100 Ri
00
b100 1
b100 Gi
b0 *
b0 +
1"
#140000
0"
#145000
b1 *
b1 +
1"
#150000
0"
#155000
10
b10 *
b10 +
1"
#160000
0"
#165000
b0x00000 Qi
b0x00000 Pi
b0x00000 Oi
b0x00000 Ni
b0x00000 Mi
b0x00000 Li
b0x00000 Ki
b0x00000 Ji
b100000 $
b100000 Ei
b100000 Hi
b100000 Ti
b10 Xi
b10 [i
1]i
1Zi
1ii
1fi
b1 Vi
b1 bi
b101 Ri
00
b101 1
b101 Gi
b0 *
b0 +
1"
#170000
0"
#175000
b1 *
b1 +
1"
#180000
0"
#185000
10
b10 *
b10 +
1"
#190000
0"
#195000
b1 ^i
b0x000000 Qi
b0x000000 Pi
b0x000000 Oi
b0x000000 Ni
b0x000000 Mi
b0x000000 Li
b0x000000 Ki
b0x000000 Ji
0Yi
1\i
b10 Wi
b10 `i
b1000000 $
b1000000 Ei
b1000000 Hi
b1000000 Ti
b100 Xi
b0 [i
1_i
0]i
0Zi
1ki
0ii
0fi
b10 Vi
b10 bi
b110 Ri
00
b110 1
b110 Gi
b0 *
b0 +
1"
#200000
0"
#205000
b1 *
b1 +
1"
#210000
0"
#215000
10
b10 *
b10 +
1"
#220000
0"
#225000
bx0000000 Qi
bx0000000 Pi
bx0000000 Oi
bx0000000 Ni
bx0000000 Mi
bx0000000 Li
bx0000000 Ki
bx0000000 Ji
b10000000 $
b10000000 Ei
b10000000 Hi
b10000000 Ti
b1000 Xi
b10 ^i
1]i
1Zi
1ii
1fi
b11 Vi
b11 bi
b111 Ri
00
b111 1
b111 Gi
b0 *
b0 +
1"
#230000
0"
#235000
b1 *
b1 +
1"
#240000
0"
#245000
10
b10 *
b10 +
1"
#250000
0"
#255000
b1 di
b1 gi
1ei
b0 [i
b0x Qi
b0x Pi
b0x Oi
b0x Ni
b0x Mi
b0x Li
b0x Ki
b0x Ji
b1 ci
b1 li
0Yi
0\i
1ai
0Ui
b0 Wi
b0 `i
b1 $
b1 Ei
b1 Hi
b1 Ti
b0 Xi
b0 ^i
b1 Si
b1 ni
0_i
0]i
0Zi
0ki
0ii
0fi
0mi
b0 Vi
b0 bi
b0 Ri
00
b0 1
b0 Gi
b0 *
b0 +
1"
#260000
0"
#265000
b1 *
b1 +
1"
#270000
0"
#275000
10
b10 *
b10 +
1"
#280000
0"
#285000
b0x0 Qi
b0x0 Pi
b0x0 Oi
b0x0 Ni
b0x0 Mi
b0x0 Li
b0x0 Ki
b0x0 Ji
b10 $
b10 Ei
b10 Hi
b10 Ti
b10 di
b10 gi
1]i
1Zi
1ii
1fi
b1 Vi
b1 bi
b1 Ri
00
b1 1
b1 Gi
b0 *
b0 +
1"
#290000
0"
#295000
b1 *
b1 +
1"
#300000
0"
#305000
10
b10 *
b10 +
1"
#310000
0"
#315000
b1 ji
b0x00 Qi
b0x00 Pi
b0x00 Oi
b0x00 Ni
b0x00 Mi
b0x00 Li
b0x00 Ki
b0x00 Ji
0ei
1hi
b10 ci
b10 li
b100 $
b100 Ei
b100 Hi
b100 Ti
b100 di
b0 gi
1_i
0]i
0Zi
1ki
0ii
0fi
b10 Vi
b10 bi
b10 Ri
00
b10 1
b10 Gi
b0 *
b0 +
1"
#320000
0"
#325000
b1 *
b1 +
1"
#330000
0"
#335000
10
b10 *
b10 +
1"
#340000
0"
#345000
b0x000 Qi
b0x000 Pi
b0x000 Oi
b0x000 Ni
b0x000 Mi
b0x000 Li
b0x000 Ki
b0x000 Ji
b1000 $
b1000 Ei
b1000 Hi
b1000 Ti
b1000 di
b10 ji
1]i
1Zi
1ii
1fi
b11 Vi
b11 bi
b11 Ri
00
b11 1
b11 Gi
b0 *
b0 +
1"
#350000
0"
#355000
b1 *
b1 +
1"
#360000
0"
#365000
10
b10 *
b10 +
1"
#370000
0"
#375000
b1 Xi
b1 [i
1Yi
b0 gi
b0x0000 Qi
b0x0000 Pi
b0x0000 Oi
b0x0000 Ni
b0x0000 Mi
b0x0000 Li
b0x0000 Ki
b0x0000 Ji
b1 Wi
b1 `i
0ei
0hi
0ai
1Ui
b0 ci
b0 li
b10000 $
b10000 Ei
b10000 Hi
b10000 Ti
b0 di
b0 ji
b10 Si
b10 ni
0_i
0]i
0Zi
0ki
0ii
0fi
1mi
b0 Vi
b0 bi
b100 Ri
00
b100 1
b100 Gi
b0 *
b0 +
1"
#380000
0"
#385000
b1 *
b1 +
1"
#390000
0"
#395000
10
b10 *
b10 +
1"
#400000
0"
#405000
b0x00000 Qi
b0x00000 Pi
b0x00000 Oi
b0x00000 Ni
b0x00000 Mi
b0x00000 Li
b0x00000 Ki
b0x00000 Ji
b100000 $
b100000 Ei
b100000 Hi
b100000 Ti
b10 Xi
b10 [i
1]i
1Zi
1ii
1fi
b1 Vi
b1 bi
b101 Ri
00
b101 1
b101 Gi
b0 *
b0 +
1"
#410000
0"
#415000
b1 *
b1 +
1"
#420000
0"
#425000
10
b10 *
b10 +
1"
#430000
0"
#435000
b1 ^i
b0x000000 Qi
b0x000000 Pi
b0x000000 Oi
b0x000000 Ni
b0x000000 Mi
b0x000000 Li
b0x000000 Ki
b0x000000 Ji
0Yi
1\i
b10 Wi
b10 `i
b1000000 $
b1000000 Ei
b1000000 Hi
b1000000 Ti
b100 Xi
b0 [i
1_i
0]i
0Zi
1ki
0ii
0fi
b10 Vi
b10 bi
b110 Ri
00
b110 1
b110 Gi
b0 *
b0 +
1"
#440000
0"
#445000
b1 *
b1 +
1"
#450000
0"
#455000
10
b10 *
b10 +
1"
#460000
0"
#465000
bx0000000 Qi
bx0000000 Pi
bx0000000 Oi
bx0000000 Ni
bx0000000 Mi
bx0000000 Li
bx0000000 Ki
bx0000000 Ji
b10000000 $
b10000000 Ei
b10000000 Hi
b10000000 Ti
b1000 Xi
b10 ^i
1]i
1Zi
1ii
1fi
b11 Vi
b11 bi
b111 Ri
00
b111 1
b111 Gi
b0 *
b0 +
1"
#470000
0"
#475000
b1 *
b1 +
1"
#480000
0"
#485000
10
b10 *
b10 +
1"
#490000
0"
#495000
b1 di
b1 gi
1ei
b0 [i
b0x Qi
b0x Pi
b0x Oi
b0x Ni
b0x Mi
b0x Li
b0x Ki
b0x Ji
b1 ci
b1 li
0Yi
0\i
1ai
0Ui
b0 Wi
b0 `i
b1 $
b1 Ei
b1 Hi
b1 Ti
b0 Xi
b0 ^i
b1 Si
b1 ni
0_i
0]i
0Zi
0ki
0ii
0fi
0mi
b0 Vi
b0 bi
b0 Ri
00
b0 1
b0 Gi
b0 *
b0 +
1"
#500000
0"
#505000
b1 *
b1 +
1"
#510000
0"
#515000
10
b10 *
b10 +
1"
#520000
0"
#525000
b0x0 Qi
b0x0 Pi
b0x0 Oi
b0x0 Ni
b0x0 Mi
b0x0 Li
b0x0 Ki
b0x0 Ji
b10 $
b10 Ei
b10 Hi
b10 Ti
b10 di
b10 gi
1]i
1Zi
1ii
1fi
b1 Vi
b1 bi
b1 Ri
00
b1 1
b1 Gi
b0 *
b0 +
1"
#530000
0"
#535000
b1 *
b1 +
1"
#540000
0"
#545000
10
b10 *
b10 +
1"
#550000
0"
#555000
b1 ji
b0x00 Qi
b0x00 Pi
b0x00 Oi
b0x00 Ni
b0x00 Mi
b0x00 Li
b0x00 Ki
b0x00 Ji
0ei
1hi
b10 ci
b10 li
b100 $
b100 Ei
b100 Hi
b100 Ti
b100 di
b0 gi
1_i
0]i
0Zi
1ki
0ii
0fi
b10 Vi
b10 bi
b10 Ri
00
b10 1
b10 Gi
b0 *
b0 +
1"
#560000
0"
#565000
b1 *
b1 +
1"
#570000
0"
#575000
10
b10 *
b10 +
1"
#580000
0"
#585000
b0x000 Qi
b0x000 Pi
b0x000 Oi
b0x000 Ni
b0x000 Mi
b0x000 Li
b0x000 Ki
b0x000 Ji
b1000 $
b1000 Ei
b1000 Hi
b1000 Ti
b1000 di
b10 ji
1]i
1Zi
1ii
1fi
b11 Vi
b11 bi
b11 Ri
00
b11 1
b11 Gi
b0 *
b0 +
1"
#590000
0"
#595000
b1 *
b1 +
1"
#600000
0"
#605000
10
b10 *
b10 +
1"
#610000
0"
#615000
b1 Xi
b1 [i
1Yi
b0 gi
b0x0000 Qi
b0x0000 Pi
b0x0000 Oi
b0x0000 Ni
b0x0000 Mi
b0x0000 Li
b0x0000 Ki
b0x0000 Ji
b1 Wi
b1 `i
0ei
0hi
0ai
1Ui
b0 ci
b0 li
b10000 $
b10000 Ei
b10000 Hi
b10000 Ti
b0 di
b0 ji
b10 Si
b10 ni
0_i
0]i
0Zi
0ki
0ii
0fi
1mi
b0 Vi
b0 bi
b100 Ri
00
b100 1
b100 Gi
b0 *
b0 +
1"
#620000
0"
#625000
b1 *
b1 +
1"
#630000
0"
#635000
10
b10 *
b10 +
1"
#640000
0"
#645000
b0x00000 Qi
b0x00000 Pi
b0x00000 Oi
b0x00000 Ni
b0x00000 Mi
b0x00000 Li
b0x00000 Ki
b0x00000 Ji
b100000 $
b100000 Ei
b100000 Hi
b100000 Ti
b10 Xi
b10 [i
1]i
1Zi
1ii
1fi
b1 Vi
b1 bi
b101 Ri
00
b101 1
b101 Gi
b0 *
b0 +
1"
#650000
0"
#655000
b1 *
b1 +
1"
#660000
0"
#665000
10
b10 *
b10 +
1"
#670000
0"
#675000
b1 ^i
b0x000000 Qi
b0x000000 Pi
b0x000000 Oi
b0x000000 Ni
b0x000000 Mi
b0x000000 Li
b0x000000 Ki
b0x000000 Ji
0Yi
1\i
b10 Wi
b10 `i
b1000000 $
b1000000 Ei
b1000000 Hi
b1000000 Ti
b100 Xi
b0 [i
1_i
0]i
0Zi
1ki
0ii
0fi
b10 Vi
b10 bi
b110 Ri
00
b110 1
b110 Gi
b0 *
b0 +
1"
#680000
0"
#685000
b1 *
b1 +
1"
#690000
0"
#695000
10
b10 *
b10 +
1"
#700000
0"
#705000
bx0000000 Qi
bx0000000 Pi
bx0000000 Oi
bx0000000 Ni
bx0000000 Mi
bx0000000 Li
bx0000000 Ki
bx0000000 Ji
b10000000 $
b10000000 Ei
b10000000 Hi
b10000000 Ti
b1000 Xi
b10 ^i
1]i
1Zi
1ii
1fi
b11 Vi
b11 bi
b111 Ri
00
b111 1
b111 Gi
b0 *
b0 +
1"
#710000
0"
#715000
b1 *
b1 +
1"
#720000
0"
#725000
10
b10 *
b10 +
1"
#730000
0"
#735000
b1 di
b1 gi
1ei
b0 [i
b0x Qi
b0x Pi
b0x Oi
b0x Ni
b0x Mi
b0x Li
b0x Ki
b0x Ji
b1 ci
b1 li
0Yi
0\i
1ai
0Ui
b0 Wi
b0 `i
b1 $
b1 Ei
b1 Hi
b1 Ti
b0 Xi
b0 ^i
b1 Si
b1 ni
0_i
0]i
0Zi
0ki
0ii
0fi
0mi
b0 Vi
b0 bi
b0 Ri
00
b0 1
b0 Gi
b0 *
b0 +
1"
#740000
0"
#745000
b1 *
b1 +
1"
#750000
0"
#755000
10
b10 *
b10 +
1"
#760000
0"
#765000
b0x0 Qi
b0x0 Pi
b0x0 Oi
b0x0 Ni
b0x0 Mi
b0x0 Li
b0x0 Ki
b0x0 Ji
b10 $
b10 Ei
b10 Hi
b10 Ti
b10 di
b10 gi
1]i
1Zi
1ii
1fi
b1 Vi
b1 bi
b1 Ri
00
b1 1
b1 Gi
b0 *
b0 +
1"
#770000
0"
#775000
b1 *
b1 +
1"
#780000
0"
#785000
10
b10 *
b10 +
1"
#790000
0"
#795000
b1 ji
b0x00 Qi
b0x00 Pi
b0x00 Oi
b0x00 Ni
b0x00 Mi
b0x00 Li
b0x00 Ki
b0x00 Ji
0ei
1hi
b10 ci
b10 li
b100 $
b100 Ei
b100 Hi
b100 Ti
b100 di
b0 gi
1_i
0]i
0Zi
1ki
0ii
0fi
b10 Vi
b10 bi
b10 Ri
00
b10 1
b10 Gi
b0 *
b0 +
1"
#800000
0"
#805000
b1 *
b1 +
1"
#810000
0"
#815000
10
b10 *
b10 +
1"
#820000
0"
#825000
b0x000 Qi
b0x000 Pi
b0x000 Oi
b0x000 Ni
b0x000 Mi
b0x000 Li
b0x000 Ki
b0x000 Ji
b1000 $
b1000 Ei
b1000 Hi
b1000 Ti
b1000 di
b10 ji
1]i
1Zi
1ii
1fi
b11 Vi
b11 bi
b11 Ri
00
b11 1
b11 Gi
b0 *
b0 +
1"
#830000
0"
#835000
b1 *
b1 +
1"
#840000
0"
#845000
10
b10 *
b10 +
1"
#850000
0"
#855000
b1 Xi
b1 [i
1Yi
b0 gi
b0x0000 Qi
b0x0000 Pi
b0x0000 Oi
b0x0000 Ni
b0x0000 Mi
b0x0000 Li
b0x0000 Ki
b0x0000 Ji
b1 Wi
b1 `i
0ei
0hi
0ai
1Ui
b0 ci
b0 li
b10000 $
b10000 Ei
b10000 Hi
b10000 Ti
b0 di
b0 ji
b10 Si
b10 ni
0_i
0]i
0Zi
0ki
0ii
0fi
1mi
b0 Vi
b0 bi
b100 Ri
00
b100 1
b100 Gi
b0 *
b0 +
1"
#860000
0"
#865000
b1 *
b1 +
1"
#870000
0"
#875000
10
b10 *
b10 +
1"
#880000
0"
#885000
b0x00000 Qi
b0x00000 Pi
b0x00000 Oi
b0x00000 Ni
b0x00000 Mi
b0x00000 Li
b0x00000 Ki
b0x00000 Ji
b100000 $
b100000 Ei
b100000 Hi
b100000 Ti
b10 Xi
b10 [i
1]i
1Zi
1ii
1fi
b1 Vi
b1 bi
b101 Ri
00
b101 1
b101 Gi
b0 *
b0 +
1"
#890000
0"
#895000
b1 *
b1 +
1"
#900000
0"
#905000
10
b10 *
b10 +
1"
#910000
0"
#915000
b1 ^i
b0x000000 Qi
b0x000000 Pi
b0x000000 Oi
b0x000000 Ni
b0x000000 Mi
b0x000000 Li
b0x000000 Ki
b0x000000 Ji
0Yi
1\i
b10 Wi
b10 `i
b1000000 $
b1000000 Ei
b1000000 Hi
b1000000 Ti
b100 Xi
b0 [i
1_i
0]i
0Zi
1ki
0ii
0fi
b10 Vi
b10 bi
b110 Ri
00
b110 1
b110 Gi
b0 *
b0 +
1"
#920000
0"
#925000
b1 *
b1 +
1"
#930000
0"
#935000
10
b10 *
b10 +
1"
#940000
0"
#945000
bx0000000 Qi
bx0000000 Pi
bx0000000 Oi
bx0000000 Ni
bx0000000 Mi
bx0000000 Li
bx0000000 Ki
bx0000000 Ji
b10000000 $
b10000000 Ei
b10000000 Hi
b10000000 Ti
b1000 Xi
b10 ^i
1]i
1Zi
1ii
1fi
b11 Vi
b11 bi
b111 Ri
00
b111 1
b111 Gi
b0 *
b0 +
1"
#950000
0"
#955000
b1 *
b1 +
1"
#960000
0"
#965000
10
b10 *
b10 +
1"
#970000
0"
#975000
b1 di
b1 gi
1ei
b0 [i
b0x Qi
b0x Pi
b0x Oi
b0x Ni
b0x Mi
b0x Li
b0x Ki
b0x Ji
b1 ci
b1 li
0Yi
0\i
1ai
0Ui
b0 Wi
b0 `i
b1 $
b1 Ei
b1 Hi
b1 Ti
b0 Xi
b0 ^i
b1 Si
b1 ni
0_i
0]i
0Zi
0ki
0ii
0fi
0mi
b0 Vi
b0 bi
b0 Ri
00
b0 1
b0 Gi
b0 *
b0 +
1"
#980000
0"
#985000
b1 *
b1 +
1"
#990000
0"
#995000
10
b10 *
b10 +
1"
#1000000
0"
#1005000
b0x0 Qi
b0x0 Pi
b0x0 Oi
b0x0 Ni
b0x0 Mi
b0x0 Li
b0x0 Ki
b0x0 Ji
b10 $
b10 Ei
b10 Hi
b10 Ti
b10 di
b10 gi
1]i
1Zi
1ii
1fi
b1 Vi
b1 bi
b1 Ri
00
b1 1
b1 Gi
b0 *
b0 +
1"
#1010000
0"
#1015000
b1 *
b1 +
1"
