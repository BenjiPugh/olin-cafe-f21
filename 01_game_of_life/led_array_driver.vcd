$date
	Mon Oct 11 20:45:28 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module test_led_array_driver $end
$scope module UUT $end
$var wire 9 ! cells [8:0] $end
$var wire 3 " cols [2:0] $end
$var wire 1 # ena $end
$var wire 3 $ x [2:0] $end
$var wire 3 % x_decoded [2:0] $end
$var wire 3 & rows [2:0] $end
$scope begin genblk1[0] $end
$var wire 3 ' row_products [2:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$var wire 3 ( row_products [2:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$var wire 3 ) row_products [2:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$upscope $end
$scope module COL_DECODER $end
$var wire 1 # ena $end
$var wire 3 * in [2:0] $end
$var wire 2 + out_en [1:0] $end
$var wire 8 , out [7:0] $end
$scope module deco_1 $end
$var wire 1 - ena $end
$var wire 2 . in [1:0] $end
$var wire 2 / out_en [1:0] $end
$var wire 4 0 out [3:0] $end
$scope module deco_0 $end
$var wire 1 1 ena $end
$var wire 1 2 in $end
$var reg 2 3 out [1:0] $end
$upscope $end
$scope module deco_1 $end
$var wire 1 4 ena $end
$var wire 1 5 in $end
$var reg 2 6 out [1:0] $end
$upscope $end
$scope module deco_en $end
$var wire 1 - ena $end
$var wire 1 7 in $end
$var reg 2 8 out [1:0] $end
$upscope $end
$upscope $end
$scope module deco_2 $end
$var wire 1 9 ena $end
$var wire 2 : in [1:0] $end
$var wire 2 ; out_en [1:0] $end
$var wire 4 < out [3:0] $end
$scope module deco_0 $end
$var wire 1 = ena $end
$var wire 1 > in $end
$var reg 2 ? out [1:0] $end
$upscope $end
$scope module deco_1 $end
$var wire 1 @ ena $end
$var wire 1 A in $end
$var reg 2 B out [1:0] $end
$upscope $end
$scope module deco_en $end
$var wire 1 9 ena $end
$var wire 1 C in $end
$var reg 2 D out [1:0] $end
$upscope $end
$upscope $end
$scope module deco_en $end
$var wire 1 # ena $end
$var wire 1 E in $end
$var reg 2 F out [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 F
0E
b0 D
0C
b0 B
0A
0@
b0 ?
0>
0=
b0 <
b0 ;
b0 :
09
b0 8
07
b0 6
05
04
b0 3
02
01
b0 0
b0 /
b0 .
0-
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
b111 &
b0 %
b0 $
0#
b0 "
b111111111 !
$end
#1000
b110 &
b1 '
b1 "
b1 %
b1 ,
b1 <
b1 ?
1=
b1 ;
b1 D
19
b1 +
b1 F
b1 !
1#
#2000
b111 &
b0 '
b10 "
b10 %
b10 ,
b10 <
b10 ?
15
12
1A
1>
b1 .
b1 :
b1 !
b1 $
b1 *
#3000
b111 &
b0 '
b1 B
0=
1@
b100 "
b100 %
b10 ;
b10 D
b100 ,
b100 <
b0 ?
17
05
02
1C
0A
0>
b10 .
b10 :
b1 !
b10 $
b10 *
#4000
b101 &
b1 (
b1 "
b1 %
b1 ?
b1 ,
b1 <
b0 B
1=
0@
b1 ;
b1 D
07
0C
b0 .
b0 :
b1000 !
b0 $
b0 *
#5000
b111 &
b0 (
b10 "
b10 %
b10 ,
b10 <
b10 ?
15
12
1A
1>
b1 .
b1 :
b1000 !
b1 $
b1 *
#6000
b111 &
b0 (
b1 B
0=
1@
b100 "
b100 %
b10 ;
b10 D
b100 ,
b100 <
b0 ?
17
05
02
1C
0A
0>
b10 .
b10 :
b1000 !
b10 $
b10 *
#7000
b11 &
b1 )
b1 "
b1 %
b1 ?
b1 ,
b1 <
b0 B
1=
0@
b1 ;
b1 D
07
0C
b0 .
b0 :
b1000000 !
b0 $
b0 *
#8000
b111 &
b0 )
b10 "
b10 %
b10 ,
b10 <
b10 ?
15
12
1A
1>
b1 .
b1 :
b1000000 !
b1 $
b1 *
#9000
b111 &
b0 )
b1 B
0=
1@
b100 "
b100 %
b10 ;
b10 D
b100 ,
b100 <
b0 ?
17
05
02
1C
0A
0>
b10 .
b10 :
b1000000 !
b10 $
b10 *
#10000
b1 "
b1 %
b1 ?
b1 ,
b1 <
b0 B
1=
0@
b1 ;
b1 D
07
0C
b0 .
b0 :
b10 !
b0 $
b0 *
#11000
b110 &
b10 '
b10 "
b10 %
b10 ,
b10 <
b10 ?
15
12
1A
1>
b1 .
b1 :
b10 !
b1 $
b1 *
#12000
b111 &
b0 '
b1 B
0=
1@
b100 "
b100 %
b10 ;
b10 D
b100 ,
b100 <
b0 ?
17
05
02
1C
0A
0>
b10 .
b10 :
b10 !
b10 $
b10 *
#13000
b1 "
b1 %
b1 ?
b1 ,
b1 <
b0 B
1=
0@
b1 ;
b1 D
07
0C
b0 .
b0 :
b10000 !
b0 $
b0 *
#14000
b101 &
b10 (
b10 "
b10 %
b10 ,
b10 <
b10 ?
15
12
1A
1>
b1 .
b1 :
b10000 !
b1 $
b1 *
#15000
b111 &
b0 (
b1 B
0=
1@
b100 "
b100 %
b10 ;
b10 D
b100 ,
b100 <
b0 ?
17
05
02
1C
0A
0>
b10 .
b10 :
b10000 !
b10 $
b10 *
#16000
b1 "
b1 %
b1 ?
b1 ,
b1 <
b0 B
1=
0@
b1 ;
b1 D
07
0C
b0 .
b0 :
b10000000 !
b0 $
b0 *
#17000
b11 &
b10 )
b10 "
b10 %
b10 ,
b10 <
b10 ?
15
12
1A
1>
b1 .
b1 :
b10000000 !
b1 $
b1 *
#18000
b111 &
b0 )
b1 B
0=
1@
b100 "
b100 %
b10 ;
b10 D
b100 ,
b100 <
b0 ?
17
05
02
1C
0A
0>
b10 .
b10 :
b10000000 !
b10 $
b10 *
#19000
b1 "
b1 %
b1 ?
b1 ,
b1 <
b0 B
1=
0@
b111 &
b1 ;
b1 D
b0 '
07
0C
b0 .
b0 :
b100 !
b0 $
b0 *
#20000
b10 "
b10 %
b10 ,
b10 <
b10 ?
15
12
1A
1>
b1 .
b1 :
b100 !
b1 $
b1 *
#21000
b110 &
b100 '
b1 B
0=
1@
b100 "
b100 %
b10 ;
b10 D
b100 ,
b100 <
b0 ?
17
05
02
1C
0A
0>
b10 .
b10 :
b100 !
b10 $
b10 *
#22000
b1 "
b1 %
b1 ?
b1 ,
b1 <
b0 B
1=
0@
b111 &
b1 ;
b1 D
b0 (
b0 '
07
0C
b0 .
b0 :
b100000 !
b0 $
b0 *
#23000
b10 "
b10 %
b10 ,
b10 <
b10 ?
15
12
1A
1>
b1 .
b1 :
b100000 !
b1 $
b1 *
#24000
b101 &
b100 (
b1 B
0=
1@
b100 "
b100 %
b10 ;
b10 D
b100 ,
b100 <
b0 ?
17
05
02
1C
0A
0>
b10 .
b10 :
b100000 !
b10 $
b10 *
#25000
b1 "
b1 %
b1 ?
b1 ,
b1 <
b0 B
1=
0@
b111 &
b1 ;
b1 D
b0 )
b0 (
07
0C
b0 .
b0 :
b100000000 !
b0 $
b0 *
#26000
b10 "
b10 %
b10 ,
b10 <
b10 ?
15
12
1A
1>
b1 .
b1 :
b100000000 !
b1 $
b1 *
#27000
b11 &
b100 )
b1 B
0=
1@
b100 "
b100 %
b10 ;
b10 D
b100 ,
b100 <
b0 ?
17
05
02
1C
0A
0>
b10 .
b10 :
b100000000 !
b10 $
b10 *
#28000
b111 &
b0 )
b0 "
b0 %
b1000 ,
b1000 <
b10 B
15
12
1A
1>
b11 .
b11 :
b11 $
b11 *
